
ArrayList
-> 순서대로 저장하고, 중복 가능

Set
-> 순서 x, 중복 불가능

@ Map
-> 키(key)와 값(value)으로 구성되어 있음, 키와 값은 모두 객체
	- String도 객체, 정수도 Integer
	- 즉, 객체 타입만 저장할 수 있다는 의미
-> 키는 중복 저장을 허용하지 않음 (Set 방식)
-> 값은 중복 저장이 가능함(List 방식)
-> 키가 중복되는 경우에는 기존에 있는 키에 해당하는 값을 덮어 씀
-> 구현 클래스는 HashMap, HashTable, LinkedHashMap, Properties, TreeMap이 있음
	- key를 이용하여 Value를 찾음
-> Map은 데이터 추가시에 put 메소드를 사용함 (add 메소드가 아님!!!!)

ex) "one":1, "two":2, "three":3
-> key:value 형태로 입력되기 떄문에 "one,"two,"three"가 키(key)가 되고
1,2,3 이 value가 됨


궁금증
현재 삽입된 데이터 : "one":1, "two":2, "three":3
1. "one":100 을 넣게 되면 어떻게 될까?
	-> "one":100, "two":2, "three":3
	-> 키가 중복되는 경우에는 기존에 있는 키에 해당하는 값을 덮어 씀
2. "four":2 를 넣게 되면 어떻게 될까?
	-> "one":100, "two":2, "three":3, "four":2
	-> value는 중복 문제와는 상관없이 처리 됨
	-> 즉, key만 중복되지 않으면 문제가 없음


@ 데이터 삽입
-> Map은 put 메소드를 이용하여 데이터를 삽입함
-> put(key,value);

@ key 확인
-> 중복되는 key가 발생하는 상황에서 데이터를 삽입하게 되면
기존 value가 사라질 수 있으므로 데이터 삽입시 키를 확인하는것을 권장함
-> containsKey 메소드를 통해 key값의 존재를 확인 할 수 있음
	※ 있으면 true, 없으면 false


@ 데이터 추출
-> Map은 키(key)를 이용하여 값(value)을 추출함
-> value값을 꺼낼때에는 get 메소드를 사용함
	- 해당 키가 없을때에는 null을 리턴

@ 데이터 삭제
-> remove 메소드를 통해 삭제함
	- 인자값은 key
	ex) hm.remove("one");


@ 모든 키를 set 객체에 담아서 리턴
-> Set<k> keySet();
-> 모든 키를 하나하나 작성하여 처리 하지 않고, 저장된 모든 key 값을 가져와서
처리할 때 유용하게 사용 됨


