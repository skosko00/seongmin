
@ Set
-> Collection 중 한가지
-> Set의 특성상 중복된 요소를 저장하지 않음
	- 중복된 데이터 삽입시 false 값 리턴, 중복이 아니면 true 값 리턴
-> 저장 순서가 유지 되지 않고, 중복 객체도 저장하지 못하게 하는 자료 구조
-> 요소를 추가할때는 add 메소드를 사용
-> null도 중복을 허용하지 않기 때문에 1개의 null만 저장이 됨
-> 기존 List와는 다르게 index의 접근이 불가능 함
-> HashSet, LinkeSet, TreeSet이 있음


@ Set의 사용
추가 : add 메소드
삭제 : remove 메소드
추출 : Iterator 메소드

-> set은 index로 처리하는 것이 아니기 때문에 데이터 추출시
	Iterator 화 시키고 hashnext와 next를 이용하여 추출해야 함

-> 		// hasNext 메소드는 가리키는 공간의 값이 있으면 true
		// 없으면 false를 리턴
		
		// System.out.println(data.next());
		// next 메소드는 가리키는 공간의 값을 꺼내는 메소드
		// Iterator 공간에 저장된 값은 꺼낼때마다 잘라내기로 가져옴
		// 중요한점은 Iterator화는 원본값을 이용하여 만든 복사된 값이므로
		// next로 데이터를 가져온다고 해서 원본값이 사라지는 것은 아님

-> Set에 저장된 데이터를 ArrayList에 옮겨 담아서 처리 할 수도 있음

ex)
		HashSet<Integer> hs = new HashSet<Integer>();	// Integer형 Set을 만듬
		hs.add(300);	// add 메소드를 이용하여 추가
		hs.add(200);	// add 메소드를 이용하여 추가
		hs.add(100);	// add 메소드를 이용하여 추가
		hs.add(500);	// add 메소드를 이용하여 추가
		hs.add(100);	// add 메소드를 이용하여 추가 하였으나 중복된것이므로 저장X
		※ 단, Set 계열은 중복된 데이터를 저장하지 않음

		ArrayList<Integer> al = new ArrayList(hs);
		// Set 계열 데이터들을 ArrayList를 생성하면서 ArrayList에 저장함
		// ArrayList에 저장된 데이터들은 Iterator화 시켜서
		// 꺼낼 필요가 없음
		// get 메소드를 이용하여 추출 가능함


@ Iterator
-> Iterator는 반복자리는 뜻을 가지고 있음
-> set이나 map계열은 index로 데이터에 접근 할 수 없기 때문에
실제 가지고 있는 데이터를 Iterator화 시켜서 데이터를 가리킬 수 있는
형태로 만들어 주어야 함
-> Iterator화가 된 데이터는 hasNext와 next 메소드를 사용할 수 있음

hasNext : 다음 가리키는 데이터가 있는지 확인함 (잇으면 true, 없으면 false)
next : 가리키는 데이터를 가져옴 (get과 같은 형태)

※ 주의 할 점
객체의 주소를 저장한 set의 형태를 Iterator화 시키게 되면
set에 저장된 주소 (래퍼런스)만 새롭게 가져와서 만드는 거임
-> 실제 객체를 복사하여 가져오는 형태는 아닌것 (얕은 복사)


HashSet<Student> hs = new HashSet<Student>();
hs.add(new Student("홍길동",20));
hs.add(new Student("김말똥",30));

Iterator iter = hs.Iterator();
Student s = Iter.next();
s.name = "테스트";

실제 HashSet에 저장된 데이터를 보면 변경되는 것을 볼 수 있음
즉, Iterator로 복사된것은 래퍼런스(주소값)일뿐 깊은 복사형태가 아님을 기억합시다

@ set 계열의 객체 저장

-> set 계열에 객체를 저장할 때에는 중복 문제가 발생함
-> 기존에 integer 형태인 100, 200, 300 이 저장된 ㄴet에 중복 값인 100을 저장하게 되면
중복으로 인해 저장되지 않음
-> 하지만 객체를 만들어서 저장하게 될 경우 중복 객체가 들어온다 하여도
중복으로 인식하지 못 하고 저장되는 문제가 발생함
-> 이유는 사용자가 직접 class의 객체들은 hashcode 와 equals 가 오버라이딩 되어 있지
않기 때문에 발생하는 문제임
-> 그렇기 때문에 실제 사용할때에는 사용자가 직접 만든 class에는 hashcode와 equals를
오버라이딩 해서 정의 해두어야 set에 저장되는 객체 중복 문제가 해결 됨