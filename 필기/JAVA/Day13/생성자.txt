

@ 생성자와 소멸자
-> 생성자는 class를 바탕으로 객체가 생성될 때 자동으로 호출되는 메소드
-> 소멸자는 객체가 소멸할 때 자동으로 호출되는 메소드
-> 타 언어에서는 생성자와 소멸자가 존재하지만 'Java' 라는 언어는 특성상
생성자는 있지만 소멸자는 존재하지 않음

	※ 소멸자가 존재하지 않게 된 이유
	: 타 언어(c++)에서는 사용한 메모리에 대한 정리도 개발자가 직접 해야 했음
	(new를 사용하면 사용한 객체를 지울때는 delete를 코딩 해야 했음)
	하지만 'Java'라는 언어는 메모리에 대한 정리는 개발자가 하지 않고
	JVM이 직접 관리 하도록 하기 위하여 GC(Garbage Collector)가 존재함
	GC는 JVM에서 사용하는 메모리가 꽉차기 전에 자동으로 특정 알고리즘에 의해서
	메모리 정리 역할을 해주고 있음
	즉, 자바는 개발자에게 메모리 관리까지 생각하여 코딩하지 말고
	프로그램 개발에만 집중할 수 있도록 만든 개발자 중심의 언어라고 볼 수 있음


@ 생성자
-> 객체가 생성될때 자동으로 호출 되는 메소드
-> 일반적으로 객체가 제대로 동작할 수 있게 준비하는 역할 (기본 데이터 입력)
-> 메소드 이름은 클래스 이름과 같아야 하며 리턴 값은 존재하지 않음 
	(리턴 값은 넣을수가 없기 때문에 리턴 데이터 타입 명시를 하지 않아도 됨)
-> 주의할점 : 생성자 코드를 수정하게 되면 디폴트(기본) 생성자가 없어지게 됨
-> 일반 메소드와 마찬가지로 오버로딩이 가능 함

	※ 디폴트 생성자 : 매개변수가 존재하지 않는 생성자






















