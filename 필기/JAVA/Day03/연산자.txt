

@ 연산자
-> 자바에서는 다양한 연산자를 사용하여 다양한 프로그램을 만들 수 있음

@ 산술 연산자

+	: 더하기
-	: 빼  기
*	: 곱하기
/	: 나누기
%	: 나머지


ex)

	int a = 10;
	int b = 3;
	
	System.out.println("a + b = " + (a+b));
	System.out.println("a - b = " + (a-b));
	System.out.println("a * b = " + (a*b));
	System.out.println("a / b = " + (a/b));
	System.out.println("a % b = " + (a%b));




@ 대입 연산자

=	오른쪽 값을 왼쪽 공간(변수)에 대입
+=	왼쪽과 오른쪽 값을 더한 결과값을 왼쪽 공간(변수)에 대입
-=	왼쪽과 오른쪽 값을 뺀 결과값을 왼쪽 공간(변수)에 대입
*=	왼쪽과 오른쪽 값을 곱한 결과값을 왼쪽 공간(변수)에 대입
/=	왼쪽과 오른쪽 값을 나눈 결과값(몫)을 왼쪽 공간(변수)에 대입
%=	왼쪽과 오른쪽 값을 나눈 결과값(나머지)을 왼쪽 공간(변수)에 대입



예제)
	int a = 10;
	int b = 3;
	int c = 6;

	a += 3;
	b *= 4;
	c %= 5;

@ 증가, 감소 연산자
-> 값을 하나 증가, 하나 감소 시키는 경우에 사용되는 단항 연산자

전치(전위) 연산
-> 변수에 저장된 값을 증/감 시킨 후 연산


후치(후위) 연산
-> 연산 수행후 변수에 저장된 값을 증/감


a++	연산을 진행한 후 값을 1 증가 (선 연산, 후 증가)
++a	값을 1 증가 시킨 후 연산을 진행 (선 증가, 후 연산)
b-- 	연산을 진행한 후 값을 1 감소 (선 연산, 후 감소)
--b	값을 1 감소 시킨 후 연산을 진행 (선 감소, 후 연산)




@ 관계 연산자 (비교 연산자)
-> 두 개의 변수 관계를 따지는 연산자, 다른 말로는 비교 연산자 라고 함
-> 관계 연산자는 조건을 만족하면 true, 
	만족하지 못하면 false 값을 리턴(반환)



<	ex) a<b		a가 b보다 작은가?
>	ex) a>b		a가 b보다 큰가?
==	ex) a==b	a와 b가 같은가?
!=	ex) a!=b	a와 b가 다른가?
<=	ex) a<=b	a가 b보다 작거나 같은가?
>=	ex) a>=b	a가 b보다 크거나 같은가?




@ 논리 연산자
-> 여러 조건을 동시에 검사할 때 주로 사용하는 연산자
-> and(그리고), or(또는), not(그러나)를 표현하는 연산자

&&	피연산자가 모두 참이면 true를 반환 (and의 의미)
||	피연산자 중 하나라도 참이면 true를 반환 (or의 의미)
!	피연산자가 true면 false를, false면 true를 반환 (not의 의미)




@ 비트 연산자
-> 2진수로 변환하여 비트 단위의 연산을 수행하는 연산자
-> 정수형 타입에서만 사용 가능함
-> 주로 하드웨어를 직접 제어하거나 한글등을 처리할 때 사용함


&	비트 단위 AND 연산자
|	비트 단위 OR 연산자
^	비트단위 XOR 연산자
~	비트단위 NOT 연산자
<<	왼쪽으로 비트 이동 연산자 (왼쪽 쉬프트 연산자)
>>	오른쪽으로 비트 이동 연산자 (오른쪽 쉬프트 연산자)




### & 연산자
-> 두 개의 비트가 1이면 결과는 1, 두 개 중 1개라도 0이면 결과는 0


### | 연산자
-> 둘 중에 하나라도 1이면 결과는 1, 둘 다 0이면 결과는 0


### ^ 연산자
-> 두 개의 비트가 다르면 1, 같으면 0
-> 영문자의 대소문자를 변환할 경우에 사용하기도 함


### ~ 연산자
-> 비트가 0이면 1로 변환, 1이면 0으로 변환



### << 연산자
-> 비트를 왼쪽으로 이동


### >> 연산자
-> 비트를 오른쪽으로 이동
















