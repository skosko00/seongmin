
@ Generic (제네릭)
-> 제네릭이란 클래스 내부에서 사용할 데이터 타입을 외부에서 지정하는 기법
-> jdk 1.5 부터 제공되는 기능

ex)

public calss GenericEx <T>{
	private T data;
	public GenericEx(T data) {
		this.data = data;
	}
	public T getData() {return this.data;}
}

-> 제네릭은 데이터 타입을 바로 정해놓지 않고 동적으로 처리하기 위한 문법
-> 하지만 중요한 점은 타입은 Class 타입만 가능함 (기본 자료형은 불가능)
-> 기본 자료형의 데이터를 처리 하기 위하여 래퍼(Wrapper) 클래스를 사용 하면 됨


@ 제네릭을 이용한 여러개의 데이터 타입 명시
-> 제네릭은 하나의 클래스당 1개 이상 사용이 가능함
-> 즉, 여러개를 타입을 동시에 선언이 가능하다는 의미
-> 단, 동일한 것을 연속으로 사용할 순 없음 (ex. <T.T>)

@ 제네릭의 생략
-> 제네릭은 정의 후 사용 할 때 생략 할 수 있음

public static void main(String [] args)
{
	GenericEx s1 = new GenericEx(100,"Hello");
	GenericEx<Integer,String> s2 = new GenericEx<Integer,String>(100,"Hello");
}

-> 제네릭의 정석적인 사용법은 사용시에 형을 지정해주어야 함
	ex. <Integer,String>
-> 제네릭은 사용시에 데이터형을 생략하면 자동으로 데이터형을 입력 처리 해주기 때문에
	데이터만 넘겨 주어도 처리 할 수 있음


@ 제네릭의 제한
-> 제네릭은 해당 클래스로 데이터가 들어올 때 타입이 정해지는 것
-> 그러다 보면 개발자가 의도치 않은 데이터 타입이 올 수도 있음
-> 그렇기 때문에 제네릭을 설정시 데이터 타입을 제한 할 수 있음
-> 제네릭은 3가지로 설정 할 수 있음
	-<?>		:제한 없음, 모든 타입이 가능함
	-<? extends T>	:상한제한, T와 그 자손들만 가능
	-<? super T>	:하한제한, T와 그 조상들만 가능

