

@ 프레임 워크란?
-> 프레임 워크의 사전적 의미는 뼈대 혹은 틀이라는 뜻을 가지고 있음
-> 어떠한 애플리케이션을 개발할 때 정해진 것 없이 개발을 한다면 체계화 되어 있지 않게 되고,
만드는데에도 구조가 정해져 있지 않기 때문에 시간이 오래 걸리게 됨
-> 프레임워크가 있다면 뼈대(구조)를 프레임워크가 제공해주게 되고 개발 초점에서도
초급개발자, 중급개발자, 고급개발자가 큰 차이 없이 개발을 할 수 있도록 도와줌
-> 또한 프레임워크로 개발한 애플리케이션의 경우 유지보수가 수월함


@ Spring Framework
-> 스프링 프레임워크는 로드 존슨이 2004년에 만든 오픈소스 프레임 워크
-> 자바 플랫폼을 위한 오픈 소스 애플리케이션 프레임워크로서 스프링(Spring)이라고 부름
-> 동적인 웹 사이트를 개발하기 위한 여러가지 서비스를 제공하고 있으며, 대한민국 공공기관의 웹 서비스 개발시
사용을 권장하고 있는 전자정부 표준 프레임워크의 기반 기술로써 쓰이고 있음
-> 스프링 프레임워크가 등장하기 이전에 자바 기반의 엔터프라이즈(기업용) 애플리케이션은 대부분 
EJB(Enterprise Java Beans)로 개발 되었음
-> EJB 기술은 EJB 컨테이너가 제공하는 많은 기능과 장점이 있음에도 불구하고 개발자들에게 외면 받는 프레임워크임
	- 이유? EJB는 사용법이 너무 어렵고 학습에 시간이 엄청 많이 필요함
		또한 EJB로 만든 애플리케이션의 경우 유지보수가 어려움이 있음
		(애초에 사용법이 어려워서...)

-> EJB가 너무 어려운 이유로 인해 개발자들에게 있어서 스프링의 탄생은 엄청난 환호를 받게 되었고
실제로 스프링을 사용하여 개발하는 경우가 많아짐

※ Spring 공식 사이트 : https://spring.io/


@ Spring의 특징

1. DI (Dependancy Injection / 의존성 주입)
-> 설정 파일이나 어노테이션을 통해 객체간 의존 관계를 설정하여 개발자가 직접 의존하는 객체를 생성할 필요가 없음
(개발자가 객체 생성을 하지 않고 get 메소드를 통해 객체 생성을 컨테이너로부터 가져옴)

2. Spring AOP (관점 지향 프로그래밍)
-> DataBase의 트랜잭션 처리나 로깅처리와 같이 여러 모듈에서 공통으로 필요로 하는 기능의 경우 해당 기능을
분리하여 관리함

3. Spring JDBC
-> Mybatis나 Hibernate등의 데이터베이스를 처리하는 영속성 프레임워크와 연결할 수 있는 인터페이스를 제공함

4. Spring MVC
-> MVC 디자인 패턴을 통해 웹 애플리케이션의 Model, View, Controller 사이의 의존 관계를 DI 컨테이너에서
관리하여 개발자가 아닌 서버가 객체들을 관리하는 웹 애플리케이션을 구축할 수 있음