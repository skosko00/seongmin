

@ Spring IoC
-> Inversion of Control 로써 제어의 역행 이라는 뜻을 가지고 있음
-> 프로그램을 구동하는데 필요한 객체에 대한 생성, 변경 등의 관리를
프로그램을 개발하는 사람이 아닌 프로그램을 구동하는데 컨테이너에서 직접 관리하는 것을 말함
-> 스프링은 IoC 구조를 통해 구동 시 필요한 객체의 생성부터 생명주기까지
해당 객체에 대한 관리를 직접 수행 하게 됨


@ IoC 컨테이너의 역할
-> 객체의 생명주기와 의존성을 관리함
	- 생명 주기 : 생성 -> 초기화 -> 사용 -> 소멸
	- 의존성 : 개발자가 직접 객체를 생성할 수 있지만 해당 권한을 컨테이너에
	맡김으로써 소스 코드 구현의 시간을 단축 할 수 있음


@ Spring DI
-> Dependency Injection 이란 IoC 구현의 핵심 기술로, 사용하는 객체를 직접
생성하여 만드는 것이 아니라 컨테이너가 빈의 설정 정보를 읽어와 해당 객체를 연결하는 것을 말함
-> 이렇게 의존성을 주입받게 되면 이후 해당 객체를 수정해야 할 상황이 발생했을 때
소스 코드의 수정을 최소화 할 수 있음
※ 소스코드에서 new를 이용하여 객체를 만들거나 데이터를 직접적으로 작성하면
객체가 변경되거나 수정해야 할 때 또 다시 코드 수정을 해야 하고 재컴파일 해야 하는 문제가 발생함
이를 이용하면 소스코드를 재수정하고, 재컴파일 하는 경우를 줄일 수 있음

## DI의 장점 ##
-> 개발자가 작성해야 할 코드가 단순해짐
-> 각 객체간의 종속 관계(결합도)를 해소할 수 있음

## 객체간의 종속관계 (결합도) ##
-> 한 클래스에서 필드 객체를 생성할 때 발생하는 두 객체간의 객체를 말하며,
각 객체간의 내용이 수정될 경우 영향을 미치는 정도를 뜻 함
-> 예를 들어 A Class에서 B Class를 생성할 경우, 만약 B Class의 생성자의 매개변수가
변경되거나 제공하는 메소드가 변경될 경우 이를 사용하는 A Class의 일부 정보도
필히 수정해야 하는 상황이 발생하게 되는데 이를 '두 객체간 종속관계(결합도)가 강하다' 라고 표현함

※ 결합도가 낮을수록 좋은 코드