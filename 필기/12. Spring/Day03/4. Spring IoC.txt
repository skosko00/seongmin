

@ Spring IoC
-> Inversion of Control 로써 제어의 역행 이라는 뜻을 가지고 있음
-> 프로그램을 구동하는데 필요한 객체에 대한 생성, 변경 등의 관리를
프로그램을 개발하는 사람이 아닌 프로그램을 구동하는데 컨테이너에서 직접 관리하는 것을 말함
-> 스프링은 IoC 구조를 통해 구동 시 필요한 객체의 생성부터 생명주기까지
해당 객체에 대한 관리를 직접 수행 하게 됨


@ IoC 컨테이너의 역할
-> 객체의 생명주기와 의존성을 관리함
	- 생명 주기 : 생성 -> 초기화 -> 사용 -> 소멸
	- 의존성 : 개발자가 직접 객체를 생성할 수 있지만 해당 권한을 컨테이너에
	맡김으로써 소스 코드 구현의 시간을 단축 할 수 있음


@ Spring DI
-> Dependency Injection 이란 IoC 구현의 핵심 기술로, 사용하는 객체를 직접
생성하여 만드는 것이 아니라 컨테이너가 빈의 설정 정보를 읽어와 해당 객체를 연결하는 것을 말함
-> 이렇게 의존성을 주입받게 되면 이후 해당 객체를 수정해야 할 상황이 발생했을 때
소스 코드의 수정을 최소화 할 수 있음
※ 소스코드에서 new를 이용하여 객체를 만들거나 데이터를 직접적으로 작성하면
객체가 변경되거나 수정해야 할 때 또 다시 코드 수정을 해야 하고 재컴파일 해야 하는 문제가 발생함
이를 이용하면 소스코드를 재수정하고, 재컴파일 하는 경우를 줄일 수 있음

## DI의 장점 ##
-> 개발자가 작성해야 할 코드가 단순해짐
-> 각 객체간의 종속 관계(결합도)를 해소할 수 있음

## 객체간의 종속관계 (결합도) ##
-> 한 클래스에서 필드 객체를 생성할 때 발생하는 두 객체간의 객체를 말하며,
각 객체간의 내용이 수정될 경우 영향을 미치는 정도를 뜻 함
-> 예를 들어 A Class에서 B Class를 생성할 경우, 만약 B Class의 생성자의 매개변수가
변경되거나 제공하는 메소드가 변경될 경우 이를 사용하는 A Class의 일부 정보도
필히 수정해야 하는 상황이 발생하게 되는데 이를 '두 객체간 종속관계(결합도)가 강하다' 라고 표현함

※ 결합도가 낮을수록 좋은 코드





@ DI의 종류
-> 메소드를 통한 의존성 주입
	- 의존성을 입력받는 일반 메소드를 만들고 이를 통해 의존성을 주입함
	- 팩토리 패턴을 사용하는 방식

-> Setter 메소드를 통한 의존성 주입
	- 의존성을 주입하는 Setter 메소드를 만들고, 이를 통해 의존성을 주입

-> 생성자를 통한 의존성 주입
	- 필요한 의존성을 포함하는 클래스에 생성자를 만들고, 이를 통해 의존성을 주입



## Setter 메소드를 통한 의존성 주입 ##
-> Setter 메소드를 통해 의존관계가 있는 Bean을 주입하려면 <property> 태그를 사용함


※ Bean 이란?	-> 쉽게 생각하면 자바객체를 Bean 객체라고 함
		-> 스프링 컨테이너에 의해 만들어진 객체를 Bean 이라고 함


# XML 선언 방법 #
<bean id="객체의 이름" class="클래스 풀네임">
	<property name="name" value="000"/>
	<property name="name" ref="000"/>
</bean>


-> name 속성은 class에서 선언한 필드 변수의 이름을 사용
-> value 속성은 단순 값 또는 Bean이 아닌 객체를 주입할 때 사용
-> ref 속성을 사용하면 Bean id를 이용해 주입한 Bean을 찾음



## 생성자를 통한 의존성 주입 ##
-> Constructor를 통해 의존관계가 있는 Bean을 주입하려면 <constructor-arg> 태그를 사용함

# XML 선언 방법 #
<bean id="불러올 객체" class="클래스 풀네임">
	<constructor-arg index="0" value="000"/>
	<constructor-arg name="0" ref="000"/>
</bean>

-> Constructor 주입방식은 생성자의 파라미터를 이용하기 때문에 한번에 여러 개의 객체를 주입 할 수 있음
-> 필드 선언 순서에 따라 index 속성을 통해서도 접근이 가능함
-> <constructor-arg> 태그에서 index나 name을 생략하면 해당 클래스의 생성자 매개변수 순서에 따라 값이 처리 됨


@ 스프링 컨테이너의 종류
-> 스프링에서는 BeanFactory와 이를 상속한 ApplicationContext라는 두 가지 유형의 컨테이너를 제공하고 있음
-> 먼저 BeanFactory는 스프링 설정 파일에 등록된 <bean> 객체를 생성하고 관리하는 가장 기본적인 컨테이너 기능만 제공
(실제로 우리가 BeanFactory 컨테이너를 사용하지는 않음)
-> ApplicationContext는 BeanFactory를 상속 받았으며 <bean> 객체 관리 기능 외에도 트랜잭션 관리나 메시지 기반의
다국어 처리 등 다양한 기능을 제공하고 있음
-> 또한 웹 애플리케이션 개발도 지원하므로 대부분 스프링 프로젝트는 ApplicationContext유형의 컨테이너를 이용함

※ 실제로 ApplicationContext의 구현 클래스는 너무나도 다양함
(너무 많기 때문에 우리는 모두 기억할 필요 없고 2가지 용도만 기억 하면 됨 - 아래 참조)


## GenericXmlApplicationContext ##
-> 파일 시스템이나 클래스 경로에 있는 XML 설정 파일을 로딩하여 구동하는 컨테이너

## XmlWebApplicationContext ##
-> 웹 기반의 스프링 애플리케이션을 개발할 때 사용하는 컨테이너
-> 웹 애플리케이션 개발에서 사용되며, 우리가 직접 생성하진 않음



@ 스프링 XML 설정

## <beans> ##
-> 스프링 컨테이너는 <bean> 저장소에 해당하는 XML 설정 파일을 참조하여 <bean>들의 생명주기를
관리하고 여러가지 서비스를 제공하고 있음

## <import> 엘리먼트 ##
-> 스프링은 설정 파일 (XML) 하나에 우리가 만든 모든 클래스를 <bean>으로 등록하고 관리할 수 있지만 너무 많은
코드가 하나의 XML 파일에 등록되면 코드 길이가 길어지고 관리가 어려워짐
-> 이때, XML 파일을 여러개로 나누어 설정 할 수 있음



## scope 속성 ##
-> 프로그램을 개발하다보면 개발자도 모르는 사이에 수많은 객체가 생성 됨
-> 이 중에서 하나만 생성되어도 상관없는 객체들이 있음
-> scope 속성을 이용하면 객체를 singleton 형태로 만들것인지 아니면 계쏙적으로 새롭게 생성할 것인지를 설정 할 수 있음
	- 기본값은 싱글톤, 매번 새롭게 만들때에는 "prototype" 값을 주면 됨




@ 컬렉션 (Collection) 객체 설정
-> 스프링을 개발하다 보면 배열이나 List 같은 컬렉션 객체를 이용하여 데이터를 담을 수 있어야 함
-> 이 때, 스프링에서는 컬렉션 매핑과 관련된 엘리먼트를 지원함


## List 타입 매핑 ##
-> 배열 객체나 java.util.List 타입의 컬렉션 객체는 <list> 태그를 사용하여 설정함
-> 우선적으로 컬렉션을 멤버변수로 가지는 CollectionBean 클래스를 작성하여 사용해야 함


## Set 타입 매핑 ##
-> 중복 값을 허용하지 않는 집합 객체를 사용할때에는 Set을 사용하게 되는데
스프링에서는 Set 컬렉션과의 매핑도 지원함

## Map 타입 매핑 ##
-> 특정 key로 데이터를 등록하고 사용하는 Map 컬렉션과의 매핑을 지원함



@ DI 어노테이션 방식
-> 대부분 프레임워크가 그렇듯이 스프링 프레임 워크 역시 XML 설정이 매우 중요함
-> 하지만 반대적으로 XML 파일에 과도한 설정을 하게 되면 내용이 굉장히 많아지게 되고 관리하기 부담스러워 짐
-> 따라서 대부분의 프레임워크는 XML 방식 이외에도 어노테이션 방식을 이용한 DI 설정을 지원하고 있음


## Context 네임 스페이스 추가 ##
-> 어노테이션 설정을 추가하려면 <beans>에 Context관련 네임스페이스와 스키마 문서의 위치를 등록 해야함

## 컴포넌트 스캔(component-scan) 설정 ##
-> 스프링 설정 파일에 애플리케이션에서 사용할 객체들을 <bean> 등록하지 않고
자동적으로 생성하려면 <context:component-scan/> 이라는 엘리먼트를 정의해야함
-> 이 설정을 추가하려면 스프링 컨테이너는 클래스 패스에 있는 클래스들을 스캔하여
@Component가 설정된 클래스들을 자동으로 객체 생성함
-> <context:component-scan> 엘리먼트의 base-package 속성 값을 "org.kh.spring"형태로 지정하면
org.kh.spirng 으로 시작하는 모든 패키지를 스캔 대상으로 포함함


XML 방식
<bean id="computer" class="org.kh.test.ano.Computer"/>

어노테이션 방식
해당 클래스의 @Component("computer")를 명시


객체 생성 시점
1. 서버 시작과 동시에 생성
	- serlvet-context.xml에 스캔 코드를 등록
2. 서블릿 호출시 생성
	- 별도의 xml 파일에 스캔 코드를 등록
	- 이후 GenericXmlApplicationContext를 읽어 들임


## @Component ##
-> scan 설정을 했다면 스프링 설정파일에 클래스들을 일일이 <bean> 태그를 이용하여 등록할 필요가 없어짐
-> 클래스 선언부 위에 @Component 어노테이션만 추가하면 해당 객체를 만들겠다는 의미가 됨


@ 의존성 주입 설정
-> 스프링에서 의존성 주입을 지원하는 어노테이션으로는 @Autowired,
@Inject, @Qualifier, @Resource가 있음

## @Autowired ##
-> 주로 변수 위에 설정하여 해당 타입의 객체를 찾아서 자동으로 할당함

## @Qualifier ##
-> 특정 객체의 이름을 이용하여 의존성 주입 할 때 사용

## @Inject ##
-> @Autowired와 동일한 기능을 지원함(차이점은 Autowired는 스프링 전용, Inject은 자바전용)

## @Resource ##
-> @Autowired와 @Qualifier의 기능을 결합한 어노테이션



## @Autowired ##
-> 생성자나 메소드, 멤버변수 위에 모두 사용할 수 있음
-> 대부분은 멤버변수 위에 선언하여 사용함
-> 스프링 컨테이너는 멤버 변수 위에 @Autowired를 확인하는 순간 해당 변수의 타입을 체크함
-> 그리고 그 타입의 객체가 메모리에 존재하는지를 확인한 후에 그 객체를 변수에 주입함
-> 만약 @Autowired가 붙은 객체가 메모리에 없다면 컨테이너가
NoSuchBeanDefinitionException을 발생 시킴
	(해당 객체가 메모리에 존재하지 않는다는 의미)


## @Qualifier ##
-> @Autowired를 쓰면 해당 타입의 객체를 넣어줌
-> 그러나 의존성 주입 대상이 되는 같은 타입의 객체가 2개일때 문제가 발생함
-> 만약 SonySpeaker 와 AppleSpeaker 객체가 모두 메모리에 생성되어 있는 상황이라면
컨테이너가 어떤 객체를 할당할지 스스로 판단할 수 없어서 에러가 발생함
-> 이 떄 @Qualifier를 쓰면 해결이 됨


## @Resource ##
-> @Autowired와 @Qualifier의 기능을 결합한 어노테이션
-> @Autowired는 변수의 타입을 기준으로 객체를 검색하여 의존성 주입을 처리함
-> @Resource를 이용하면 객체의 이름을 이용하여 의존성 주입을 처리함
-> @Resource는 name 속성을 사용할 수 있어서, 스프링 컨테이너가 해당 이름으로 생성된 객체를 검색하여
의존성 주입을 처리함




@ 추가 어노테이션
-> 우리가 사용하는 비즈니스 로직에 대해 어노테이션으로 처리할 수 있음
-> Controller, Service, DAO 를 우리는 그동안 new 연산자를 통하여 객체를 만들었고,
매번 요청마다 new를 통하여 객체를 생성하여 처리했기 때문에 리소스 낭비가 심했었음
-> 아래의 어노테이션을 사용하게 되면 객체를 매번 만들 필요가 없어지게 됨
	- @Controller, @Service, @Repository
-> @Component라고 붙이지 않는 이유는 각자 별도의 수행하는 역할에 대하여 만든 어노테이션이라고 볼 수 있음


## @Controller ##
-> 사용자 요청을 제어하는 Controller 클래스

## @Service ##
-> 비즈니스 로직을 처리하는 Service 클래스

## @Repository
-> 데이터 베이스 연동을 처리하는 DAO 클래스


-> 이외에도 session을 의미하거나, Parameter를 의미하는 어노테이션 등..
스프링에서는 다양한 어노테이션들이 존재함


※ 해당 어노테이션들은 스프링 MVC를 배우면서 사용해보도록 하겠음













