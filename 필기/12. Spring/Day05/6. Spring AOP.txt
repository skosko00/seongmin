

@ Spring AOP
-> 관점 지향 프로그래밍(Aspect Oriented Programing)의 약자로 일반적으로 사용하는 클래스 (Service, DAO 등) 에서
중복되는 공통 코드 부분(commit, rollback, log 등)을 별도의 영역으로 분리해내고, 코드가 실행되기 전이나 이 후의
시점에 해당 코드를 붙여 넣음으로써 소스 코드의 중복을 줄이고, 필요할 때마다 가져다 쓸 수 있게 객체화하는 기술을 말함


AOP를 이용하면
MemberService 안에 있는 소스와는 전혀 무관하게
LogAdvice나 Log4jAdivce 클래스의 메소드들을 실행할 수 있게 됨
교체도 훨씬 쉽게 가능함


AOP 동작원리
-> JDK Dynamic Proxy
	- 인터페이스를 참조하여 AOP를 생성함
	- 인터페이스 구현이 완벽하게 되어 있어야 함
	- AOP config 설정시 proxy-target-class="false" 값 명시
		(실제로 명시하지 않아도 디폴트 값임)
	
-> CG-lib 
	- 원본 클래스를 참조하여 AOP를 생성함
	- 인터페이스 구현과는 무관함 (원본 클래스를 참조하기 때문)
	- AOP config 설정시 proxy-target-class="true" 값 명시


@ AOP 용어 및 기본 설정


## 조인포인트(Joinpoint) ##
-> 조인포인트는 클라이언트가 호출하는 모든 비즈니스 메소드로서, BoardServiceImpl 이나
MemberServiceImpl 클래스 등의 모든 메소드를 조인 포인트라고 생각하면 됨
-> 조인포인트를 '포인트컷 대상' 또는 '포인트컷 후보' 라고도 부름


## 포인트 컷 (Pointcut) ##
-> 필터링 된 조인 포인트를 의미함
-> 예를 들면, 트랜잭션을 처리하는 공통 기능을 만들었다고 가정 할 때, 등록, 수정, 삭제 기능의 비즈니스
메소들은 당연히 트랜잭션에 대한 처리를 해야 하지만 검색 기능은 트랜잭션 처리와는 무관함
-> 이때 수 많은 비즈니스 메소드 중에서 우리가 원하는 특정 메소드에서만 횡단 관심에 해당하는 트랜잭션 처리를
수행시키기 위해서는 포인트 컷이 필요함
-> 포인트 컷에서 가장 중요한 것은 expression 속성
	(expression 속성에 따라 포함되는 메소드들을 필터링 할 수 있음)


## 어드바이스 (Advice) ##
-> 어드바이스는 단 관심에 해당하는 공통 기능의 코드를 의미하고, 독립된 클래스의 메소드로 작성 됨
-> 어드바이스로 구현된 메소드가 언제 동작할지 스프링 설정 파일을 통해서 지정할 수 있음
-> 예를 들어 트랜잭션 처리 코드는 비즈니스 로직이 처리되기 전에 넣어주면 안됨
	- 비즈니스 로직 처리후 commit 인지 rollback인지를 결정 해야 함
-> 스프링에서는 어드바이스의 동작 시점을 'before', 'after', 'after-returning', 'after-throwing', 'around' 등
	다섯가지로 지정할 수 있음
ex) '<aop:before ' 로 설정하면 해당 메소드를 호출 하기 전! 이라는 의미


## 에스팩트(aspect) 또는 어드바이저(Advisor) ##
-> 에스팩트는 AOP의 핵심
-> 에스팩트는 포인트 컷과 어드바이스의 결합
-> 어떠한 포인트 컷 메소드에 대해서 어떤 어드바이스 메소드를 실행할지를 결정 함
-> 어드바이저는 에스팩트와 같지만 트랜잭션 설정 같은 몇몇의 특수한 경우에는 에스팩트가 아닌 어드바이저를 사용함


@ 어드바이스 동작 시점
-> 어드바이스는 다섯 가지의 동작 시점을 제공함
-> Before, After Returning, After Throwing, After, Around


## Before ##
-> 비즈니스 메소드 실행 전 동작 함

## After Returning ##
-> 비즈니스 메소드가 성공적으로 리턴되면 동작

## After Throwing ##
-> 비즈니스 메소드 실행 중 예외가 발생하면 동작
-> try ~ catch 로 비유하면 catch 블록과 유사함

## After ##
-> 비즈니스 메소드가 실행 된 후 무조건 실행
-> try - catch - finally 블록에서 finally 블록과 유사함

## Around ##
-> 메소드 호출 자체를 가로채 비즈니스 메소드 실행 전 후에 처리할 로직을 삽입할 수 있음


@ JoinPoint 와 바인드 변수
-> 횡단 관심에 해당하는 어드바이스 메소드를 의미있게 구현하려면 클라이언트가 호출한 비즈니스 메소드에
대한 정보가 필요함
-> 예를 들어, After Throwing 기능의 어드바이스 메소드를 구현한다고 할 때 예외가 발생한 비즈니스 메소드 이름이
무엇인지, 그 메소드가 속한 클래스와 패키지 정보는 무엇인지를 알아야 정확한 예외 처리 로직을 구현 할 수 있음
-> 스프링에서는 이러한 다양한 정보를 이용할 수 있도록 JoinPoint 인터페이스를 제공함
-> ProceedingJoinPoint 인터페이스는 JoinPoint를 상속한 인터페이스
-> 그러기 때문에 JoinPoint가 가진 모든 메소드를 지원하고, 추가적으로 proceed() 메소드가 생성되어 있음
(JoinPoint 안에는 proceed 메소드는 없음)
-> 어드바이스 시점 중 Before, After Returning, After Throwing, After 어드바이스는 proceed() 메소드가 필요 없기
때문에 JoinPoint를 사용하고,
Around 어드바이스는 proceed() 메소드가 필요하기 때문에 ProceedingJoinPoint 를 사용함


@ JoinPoint의 메소드
-> Signature getSignature()
	- 클라이언트가 호출한 메소드의 시그니처(리턴타입, 이름, 매개변수) 정보가 저장된 Signature 객체를 리턴

-> Object getTarget()
	- 클라이언트가 호출한 비즈니스 메소드를 포함하는 비즈니스 객체 리턴

-> Object[] getArgs()
	- 클라이언트가 메소드를 호출할 때 넘겨준 인자 목록을 Object 배열로 리턴

※ JoinPoint 객체를 사용하려면 JoinPoint를 어드바이스 메소드 매개변수로 선언하면 됨
클라이언트가 비즈니스 메소드를 호출하면 스프링 컨테이너가 JoinPoint 객체를 생성하면서
메소드 호출과 관련된 모든 정보를 JoinPoint 객체에 저장하여 인자값으로 넘겨줌


## Signature 객체의 메소드 ##
-> String getName()
	- 클라이언트가 호출한 메소드 이름을 리턴

-> String toLongString()
	- 클라이언트가 호출한 메소드의 리턴 타입, 이름, 매개변수를 패키지 경로까지 포함하여 리턴

-> String toShortString()
	- 클라이언트가 호출한 메소드 시그니처를 축약한 문자열로 리턴


@ 어노테이션 기반 AOP
-> AOP 설정을 XML 방식 이외에도, 어노테이션 방식으로도 설정 할 수 있음
-> AOP를 어노테이션으로 설정하려면 가장 먼저 스프링 설정 파일에 <aop:aspectj-autoproxy> 엘리먼트를 선언 해야 함
-> <aop:aspectj-autoproxy> 엘리먼트를 설정 후 어드바이스 클래스에 선언된 어노테이션들을 스프링 컨테이너가 처리하게
하려면, 반드시 어드바이스 객체가 생성 되어 있어야 함
-> 따라서 어드바이스 클래스는 반드시 스프링 설정 파일에 <bean>을 등록하거나 @Service 어노테이션을 사용하여
컴포넌트가 검색 될 수 있도록 해야함


## 어노테이션 설정 ##
@Service
public class LogAdvice{}

## XML 설정 ##
<bean id="log" class="org.kh.member.common.LogAdvice"></bean>


## 포인트컷 설정 ##
-> 기존 XML에서 포인트컷을 선언할 때 <aop:pointcut>을 사용했었음
-> 여러 포인트컷을 식별하기 위한 용도로 ID를 사용했었음
	ex) <aop:pointcut id="aopPointcut" expression="...." />
어드바이스 클래스안에 여러 개의 포인트 컷을 선언 할 수 있음
-> 이때 여러개의 포인트 컷을 실행하기 위한 식별자로 참조 메소드를 이용함


ex)

@Service
public class LogAdvice{
	@Pointcut("execution(* org.kh.member.model.service.*ServiceImpl.*(..))")
	public void aopPointcut(){}

	@Pointcut("execution(int org.kh.member.model.service.*ServiceImpl.*(..))")
	public void trasactionPointcut(){}
}

-> 참조 메소드는 메소드 몸체가 비어있는, 즉 로직 구현이 없는 메소드
-> 따라서 어떤 기능 처리를 목적으로 하지 않고 단순히 포인트컷을 식별하는 이름으로만 사용이 됨
-> 그러므로 포인트 어노테이션을 명시한 메소드의 로직은 사용하는 메소드에 따로 정의하면 됨


ex)

@Service
public class LogAdvice{
	@Pointcut("execution(* org.kh.member.model.service.*ServiceImpl.*(..))")
	public void allPointcut(){}

	@Before("allPointcut()")	// 어드바이스
	public void printLog(){
		System.out.println("[공통로그 - LogAdvice] 비즈니스 로직 수행 전 동작");
}


## AOP 어드바이스 ##
-> 동작 시점은 기존 XML과 같음

@ Before
-> 비즈니스 메소드 실행 전에 동작

@ AfterReturning
-> 비즈니스 메소드가 성공적으로 리턴되면 동작

@ AfterThrowing
-> 비즈니스 메소드가 실행 중 예외가 발생하면 동작

@ After
-> 비즈니스 메소드가 실행된 후 무조건 동작

@ Around
-> 호출 자체를 가로채 비즈니스 메소드 실행 전 후에 처리할 로직을 삽입

## 에스팩트 설정 ##
-> AOP에서 가장 중요한 에그팩트는 @Aspect 어노테이션을 이용하여 설정
-> 에스팩트는 포인트 컷과 어드바이스의 결합이므로 포인트컷과 어드바이스를 결합하는 설정이 있어야 함

ex)
@Service	// <bean> 객체 생성
@Aspect		
public class LogAdvice{
	@Pointcut("execution(* org.kh.member.model.service.*ServiceImpl.*(..))")
	public void allPointcut(){}

	@Before("allPointcut()")	// 어드바이스
	public void printLog(){
		System.out.println("[공통로그 - LogAdvice] 비즈니스 로직 수행 전 동작");
}



@ AOP를 이용한 비밀번호 암호화
-> DB에 저장하는 비밀번호가 평문으로 저장되면 보안상 위험함
-> AOP를 보안적인 측면에서도 사용할 수 있음 (비밀번호 암호화, 로그인 실패 로그 기록 등등)
-> 비밀번호 암호화는 기본적으로 Hash+SALT를 권장함
	- 우리는 수업상 간단하게 Hash 암호화 정도로 암호화를 해보도록 하겠음


암호화 용어

평문 : 누구나 알아 볼 수 있는 형태의 메시지
암호문 : 제3자는 알아 볼 수 없고, 관계자만 알아 볼 수 있는 형태의 메시지
암호화 : 평문을 암호문으로 변경하는 행위
복호화 : 암호문을 평문으로 변경하는 행위


@ Hash 알고리즘
-> 단방향으로 암호화 할 때 사용하는 알고리즘

특징
-> compression : 다양한 길이의 데이터를 입력하여도 고정 길이로 결과를 출력함
-> One-way : 암호화는 하되 복호화는 제공되지 않음
-> 효율성 : 평문에서 암호문으로 변경하는 과정이 빠름
-> Collision-free : 메시지가 고유하다면 그에 대한 해시 값도 고유함
		(충돌이 발생하지 않음)

-> 종류 : MD5, SHA(SHA-1, SHA-2(SHA-224, SHA-256, SHA-384, SHA-512 등등))

※ 비밀번호는 복호화 할 필요가 없기 때문에 HASH 알고리즘을 사용함

