
@ 이벤트(event)
-> 사용자가 마우스로 버튼을 클릭하거나 키보드를 누르는 등 어떠한 데이터가 도착하면 발생함
-> 이벤트가 발생하면 이벤트 객체가 자동 생성됨
-> 이벤트 객체는 이벤트에 대한 여러 가지 정보를 가지고 있음
-> 발생된 이벤트를 처리하는 객체를 이벤트 리스너(event listener)라고 부름


## 이벤트는 3가지가 필요함 ##
1. 이벤트의 소스(출발지) - 소스코드 x
-> 이벤트가 발생한 대상체
	ex) 버튼을 눌렀으면 버튼이 소스
	ex) 윈도우를 드래그 하면 윈도우가 소스

2. 이벤트 리스너
-> 이벤트가 발생하면 그것을 들어줄 수 있는 개체가 필요함
-> 이벤트 발생시 감지하는 것을 리스너 라고 함 (청취자 혹은 감지자)
-> 감지에는 종류가 다양함 (클릭, 키보드, 드래그 등등)
-> 단, 리스너는 들어주는 역할일뿐 일을 처리할 순 없음
	- 이벤트에 따른 처리를 하기 위하여 리스너는 이벤트를 감지하면 핸들러에게 감

3. 이벤트의 핸들러
-> 이벤트가 발생했을 대 이벤트 종류에 따라서 반응 및 조치를 가지고 있는 것은
핸들러라고 함
-> 리스너가 핸들러에게 올 때 "이벤트가 발생했음"과 동시에 다양한 정보를
같이 가지고 옴 (이벤트 종류 및 이벤트의 소스 등등..)


@ 이벤트 핸들러 작성 4가지 방법
1. 독립적인 클래스
2. 내부 클래스
3. 내부 메소드
4. 무명 클래스

1. 독립 클래스
-> 외부에 별도의 클래스를 작성하여 사용하는 방법

package kh.java.com;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JOptionPane;

public class MyListener implements ActionListener{
	private JButton button = null;
	private JButton button2 = null;
	public MyListener(JButton button, JButton button2)
	{
		this.button = button;
		this.button2 = button2;
	}
	
	@Override
	public void actionPerformed(ActionEvent e) {
		JButton sourceButton = (JButton)e.getSource();
		if(sourceButton == button)
		{
		JOptionPane.showMessageDialog(null, "알림창");
		}else if(sourceButton == button2)
		{
			System.out.println("두번쨰 버튼입니다.");
		}
		
	}

}


2. 내부 클래스
-> 독립적인 클래스 방법으로는 버튼을 클릭하면 MyFrame에 있는 멤버필드에 접근하는 것이
어려움
-> 그래서 일반적으로 내부 클래스를 만들어 사용하기도 함
-> 내부 클래스는 자신을 포함하는 클래스의 멤버변수들을 자유롭게 사용 할 수 있음

package kh.java.com;

import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

public class EventTest extends JFrame{
	private JButton button = new JButton("눌러보세요");
	private JButton button2 = new JButton("누르지마세요");
	
	class MyListene2 implements ActionListener
	{

		@Override
		public void actionPerformed(ActionEvent e)
		{
			if(e.getSource()==button)
			{
				JOptionPane.showMessageDialog(null, "첫번째 버튼 클릭되었습니다.");
			}else if(e.getSource()==button2)
			{
				JOptionPane.showMessageDialog(null, "두번째 버튼이 클릭 되었습니다.");
			}
			
		}
		
	}
	private void compInit()
	{
		this.add(button);
		this.add(button2);
		button.addActionListener(new MyListene2());
		button2.addActionListener(new MyListene2());
	}
	
	public EventTest()
	{
			super("Event");
			this.setLayout(new FlowLayout());	// 레이아웃 매니저 설정
			this.setSize(450,300);		// 프레임 사이즈
			this.setLocationRelativeTo(null);	// 중앙에 위치
			this.setDefaultCloseOperation(EXIT_ON_CLOSE);	// X버튼 클릭시 종료
			this.compInit();	// 사용자 정의 메소드
			this.setVisible(true);	// 가시적으로 보여주어라
			
	}
}


3. 내부 메소드
-> 해당 클래스 안에 actionPerformed 메소드를 생성하여 사용하는 방법
-> 프레임 클래스가 ActionListener 인터페이스를 상속받아 자신이 Frame 이자
이벤트 리스너가 된다는 의미

package kh.java.com;

import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

public class EventTest extends JFrame implements ActionListener{
	private JButton button = new JButton("눌러보세요");
	private JButton button2 = new JButton("누르지마세요");



	@Override
	public void actionPerformed(ActionEvent e)
	{
		if(e.getSource()==button)
		{
			JOptionPane.showMessageDialog(null, "첫번째 버튼 클릭되었습니다.");
		}else if(e.getSource()==button2)
		{
			JOptionPane.showMessageDialog(null, "두번째 버튼이 클릭 되었습니다.");
		}


	}
	private void compInit()
	{
		this.add(button);
		this.add(button2);
		button.addActionListener(this);
		button2.addActionListener(this);
	}

	public EventTest()
	{
		super("Event");
		this.setLayout(new FlowLayout());	// 레이아웃 매니저 설정
		this.setSize(450,300);		// 프레임 사이즈
		this.setLocationRelativeTo(null);	// 중앙에 위치
		this.setDefaultCloseOperation(EXIT_ON_CLOSE);	// X버튼 클릭시 종료
		this.compInit();	// 사용자 정의 메소드
		this.setVisible(true);	// 가시적으로 보여주어라

	}
}


4. 무명 클래스
-> 이벤트 리스너 클래스를 정의 할 때, 가장 많이 사용되는 방법 중 하나
-> 무명 클래스는 말 그대로 이름이 없는 클래스를 작성하여 한번만 사용하는 것
-> 처음에는 어려워 보일 수 있으나 익숙해지면 코드를 읽기 쉽게 만듦

package kh.java.com;

import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

public class EventTest extends JFrame{
	private JButton button = new JButton("눌러보세요");
	private JButton button2 = new JButton("누르지마세요");

	private void compInit()
	{
		this.add(button);
		this.add(button2);
		button.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				if(e.getSource()==button)
				{
					JOptionPane.showMessageDialog(null, "눌러졌음");
				}				
			}
		});	
		button2.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				if(e.getSource()==button2)
				{
					JOptionPane.showMessageDialog(null, "두번째 버튼");
				}				
			}
		});
	}

	public EventTest()
	{
		super("Event");
		this.setLayout(new FlowLayout());	// 레이아웃 매니저 설정
		this.setSize(450,300);		// 프레임 사이즈
		this.setLocationRelativeTo(null);	// 중앙에 위치
		this.setDefaultCloseOperation(EXIT_ON_CLOSE);	// X버튼 클릭시 종료
		this.compInit();	// 사용자 정의 메소드
		this.setVisible(true);	// 가시적으로 보여주어라

	}
}


