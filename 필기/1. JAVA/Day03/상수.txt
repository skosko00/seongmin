
@ 상수
-> 상수에는 리터럴 상수와 심볼릭 상수가 있음


리터럴 상수
-> 이름이 없는 상수
-> 변수에 대입되는 값 자체를 의미함

ex) 3, 3.14, 'a', "Hello";



심볼릭 상수
-> 이름이 있는 상수
-> 변수에 값을 대입후 해당 변수를 상수화 시킴
-> final 이라는 keyword를 사용하여 심볼릭 상수를 만듦
-> 상수로 사용되는 이름은 대문자로 사용하기로 약속 되어 있음
	(상수선언 명명규칙)




@ 컴퓨터의 동작 원칙

1. 반드시 같은 데이터 타입 간에 연산을 해야 함
2. 반드시 동일한 데이터 타입의 값을 동일한 데이터 타입 변수에 대입 해야 함
3. 결과값 또한 동일한 데이터타입의 값을 가짐

※ 위에 기본 원칙이 지켜지지 않을 경우 프로그래밍 언어에서는 사용자에
의해 명시적으로 '형변환'을 해주거나 혹은 암묵적으로 '형변환'을 진행 함


@ 자동 형변환
-> 연산시 컴파일러가 자동으로 형이 변환되는 것을 의미함
-> 작은 데이터형에서 큰데이터형과의 연산은 큰 데이터형으로 자동 형변환 함


byte -> short	-> int	-> long	-> float  -> double
	char


@ 자동 형변환 되는 경우

1. 작은것 에서 큰것으로 대입 될때
	byte b = 100;
	int i = b;

2. 자료형이 다른 값이 계산 될때
	int a = 3;
	double b = 5.7;
	System.out.println(a+b);



@ 강제 형변환 (캐스팅 연산자)
-> 자료형을 강제적으로 형 변환 하는 연산자
-> 데이터가 큰 자료형에서 작은 자료형으로 변경시 데이터 손실이 발생할 수
있으므로 사용시 유의 해야 함
-> 사용 방법은 형변환을 해야 하는 데이터 앞에 () 를 사용하여 작성함
	- ex) (int)3.14;	-> 3.14를 정수로 강제 변환함 ( 3으로 바뀜)



@ 출력 메소드
1. System.out.println()
-> Console 화면에 데이터를 출력후 자동 줄개행을 해주는 메소드


2. System.out.print()
-> Console 화면에 데이터를 출력 (자동 줄개행 X)


3. System.out.printf()
-> 특정 포맷 형식을 사용하여 그 형식에 맞게 값을 출력 해줌
-> 자동 줄개행을 하지 않음 (개행시 특수 문자를 사용함)

포맷 형식

정수표현
%d : 10진수 , %o : 8진수, %x : 16진수


실수표현
%f : 실수(소수점 아래 6자리)
%e : 지수 표현식
%g : %e와 %f 중 더 짧은 표현으로 사용



문자 / 문자열
%c : 문자 , %s : 문자열


불린형
%b : 논리형 (true, false)


너비 및 정렬
%5d	5칸을 확보하고, 우측 정렬
%-5d	5칸을 확보하고, 좌측 정렬
%.2f	소수점 아래 2자리까지만 표시


@ 특수 문자 (escape 문자)

tab		\t		정해진 공간만큼 띄어쓰기
new line	\n		출력하고 다음라인으로 옮김
역슬래쉬	\\		특수문자(\)를 출력
작은따옴표	\'		특수문자(')를 출력
큰따옴표	\"		특수문자(")를 출력
유니코드 	\u		유니코드 표시할때 사용




























 


















