

@ 객체지향 프로그래밍이란?
-> 현실 세계는 사물이나 어떠한 개념 처럼 독립되고 구분되는 각 각의 객체로 이루어져 있음
-> 각 각의 독립되는 형태로 구현되어 있는 것이 객체이고 이 개념을 바탕으로
프로그래밍을 하는 것을 객체 지향 프로그래밍이라고 함
	※ 객체지향 언어는 객체지향 프로그래밍을 하기 위해 만들어진 언어
-> 프로그램 객체를 만들기 위해서는 실제 객체에 대한 분석이 필요함
-> 객체를 표현하는 것에는 속성(데이터)와 기능(메소드)을 가지고 있음


@ 객체지향 용어

클래스 : 객체를 만들기 위한 설계도 혹은 틀
	사물이나 개념의 공통요소(속성,기능)를 용도에 맞게 추상화 해야 함

추상화 : 프로그램에서 필요한 속성과 기능을 추출하고 불필요한 것을 제거 하는 과정
	프로그래밍적으로 보았을때 속성(변수)으로 사용할 것과
	기능(메소드)으로 구현할 것들을 설계하는 과정



성별 : 남자
직업 : 강사
사는곳 : 인천
나이 : 20
키 : 186
몸무게 : 70kg

행동
-> 강의,조언,운전,식사하다






절차지향 언어

변수 -> 데이터를 저장하는 공간
배열 -> 데이터를 연속적으로 저장하는 공간 (같은 타입)


이름,나이,주소
String,int,String


구조체 -> 여러 데이터 타입의 데이터를 저장하는 공간

	
class Student
{
String name;
int age;
String addr;
public void insertData()
{
	
	Syso("학생 이름 입력 : ");
	s[0].name = sc.next();

}
};


Student [] s = new Student[50000];









## 속성 ##
이름	- String name;
나이	- int age;
주소	- String addr;
전공
학번
학점

## 기능 ##
입력	- insert
출력	- print
수정	- modify
삭제




@ 객체 지향 프로그래밍을 하기 위한 단계

1. 대상 물색
2. 추상화
3. 설계 (클래스 작성)
4. 사용 (인스턴스화)





ex) 모니터를 대상으로 Class화 시키기

1. 대상 물색 -> 모니터
2. 추상화
	## 속성 ##
	사이즈 
	해상도
	모델명
	가격
	제조회사
	## 기능 ##
	정보입력,정보출력
	출력
	전원 (on,off)
	밝기 조정








@ 객체지향의 3대 원칙

1. 캡슐화
	-> 정보은닉
2. 상속
3. 다형성




@ 접근제어 지시자
-> 클래스안에서 변수 및 메소드 생성시 접근제어 지시자를 사용 해야 함
-> 접근제어 키워드는 public, protected, default, private이 있음
-> 접근제어 지시자는 접근할때 허용하는 범위를 말하는 것
-> 접근제어 지시자를 작성하지 않으면 default로 설정 됨

public : 어디서든 접근 허용
protected : 후손클래스(상속), 같은 패키지 내, 해당클래스 내부에서 접근 가능
default : 같은 패키지 내, 해당클래스 내부에서 접근 가능
private : 해당 클래스에서만 접근 가능


원칙
-> 클래스안의 멤버 변수는 private 으로 설정 하는 것을 원칙으로 함
	(멤버 변수는 데이터를 저장하고 있는 중요한 공간 이기 때문에 보호 해야 함)
-> 클래스안의 멤버 메소드는 다양 하게 사용할 수 있음 (기본은 public)

@ 정보 은닉
-> 정보를 숨기는 것을 정보 은닉 이라고 함

## 정보 은닉의 필요성 ##
-> 클래스의 멤버 변수는 일반적으로 private 영역에 저장함
-> 의도치 않은 외부 접근에 대한 오류를 방지 하기 위함
-> 클래스를 만든 개발자는 해당 클래스의 멤버 변수를 타 사용자가 마음대로
바꾸게 두어서는 안됨 (흐름의 문제가 발생할 수 있음)

@ 캡슐화
-> 하나의 객체는 독립적으로 완벽한 역할을 수행할 수 있어야 함
-> 정보은닉 + 독립적인 역할을 캡슐화 작업을 하였다 라고 볼 수 있음
	※ 독립적인 역할만 하고 정보은닉이 되지 않은것은 캡슐화가 되지 못한 것임



@ getter 메소드와 setter 메소드
-> private으로 설정된 멤버변수들은 외부에서 접근이 불가능함
-> 하지만 실제로 해당 클래스를 객체화 해서 사용해야 하는 사용자 입장에서는
멤버변수의 데이터를 대입할 수 있어야 함
-> 이때 메소드는 public으로 만든다 라는 개념으로 알고 있기 때문에 메소드를
public으로 만들고 사용자는 해당 메소드를 이용하여 데이터를 넣을 수 있게 만들어야 함
-> 하지만 우리가 멤버 변수에 넣는 메소드의 이름을 개발자 마음대로 정한다면
사용자 입장에서 메소드 이름만 보고 적절하게 사용할 수 있을까?
-> 개발자가 마음대로 정한 메소드 명만 보고 사용하기에는 무리가 있음
-> 그렇게 되면 결국 사용자는 해당 클래스를 열어서 확인할 수밖에 없고,
확인과 동시에 클래스의 캡슐화는 깨지게 됨 
(캡슐화는 정보은닉 + 독립적인 객체로 동작해야 하므로 실제 내부 코드를 보지 않고도
사용자는 사용할 수 있어야 함)
-> 그렇기 때문에 Class를 개발할 때 멤버변수의 값을 넣거나 혹은 꺼낼 수 있는 메소드를
만들 때에는 get 과 set 을 메소드명에 붙여서 제작을 함


ex) private String name ; //name이라는 멤버변수

public void setName(String _name)
{
	name = _name;
}
public String getName()
{
	return name;
}


기능제공용 클래스
-> Entity Class (VO, DTO)
	- 순수 데이터를 표현하는 클래스

-> Control Class
	- 데이터를 운영하는 클래스



@ this 키워드
-> 클래스 생성시 setter, getter 메소드를 만들게 되면 멤버변수와
매개변수의 이름이 동일할 경우 해당 변수는 가장 가까운 변수를 지목하는 상황이 됨

	
ex) 	
	private String name;
	public void setName(String name)
	{
		name = name; // 왼쪽에 name은 매개변수의 name을 지칭, 오른쪽도 동일 함	
	}


-> 그렇기 때문에 실제로 해당 클래스안에 존재하는 멤버변수를 표현할때에는
this라는 키워드를 사용하여 자기 자신을 지칭 하게 됨




@ 클래스 다이어 그램
-> 우리가 제작된 클래스를 그림으로 표현하는 것
-> 클래스 다이어 그램에는 멤버변수(필드),메소드를 표현 함


















































