
@ IO
-> Input(입력)과 Output(출력)을 의미함
-> 자바에서는 입력(input)과 출력(output) 처리를 할 수 있어야 함
	-> java.io 패키지안에 입출력 관련 클래스가 있음
-> 입출력에는 가상의 통로(stream)가 사용됨


@ 컴퓨터에서의 입출력 처리 방식

## 입력 절차 ##
1. 입력
-> 외부자원(resource)
-> 키보드
-> 디스크상의 파일 (읽음)
-> 네트워크상의 다른 pc
-> 데이터베이스 서버

2. 입력용 버퍼
-> 읽기용 통로(inputStream)
-> 읽음

3. 메모리
-> 변수에 기록

## 출력 절차 ##

1. 메모리
-> 변수값을 읽음

2. 출력용 버퍼
-> 쓰기용 통로(outputStream)
-> 내보냄

3. 출력
-> 외부자원(resource)
-> 모니터
-> 디스크의 파일 (저장)
-> 네트워크상의 다른 pc
-> 데이터베이스 서버


※ 읽기용 통로를 inputStream 이라고 함
※ 쓰기용 통로를 outputStream 이라고 함
※ 주의할 점 : stream(통로)는 시스템(OS)로 부터 얻어오기 때문에 특정 리소스를
		사용하게 됨! 사용후에는 꼭 반납하여야 함
		(사용한 스트림 반납은 close 메소드를 사용 함)


-> 스트림은 단방향임 (일반통행)
	- 입력용 스트림
	- 출력용 스트림
	※ 만약 입출력을 동시에 하려면 2개의 스트림을 만들어야 함 (입력, 출력 스트림)

-> 자바에서 입/출력을 하려면, 외부자원과 스트림을 이용하여 연결 시키고 난 후
	그 다음에 읽거나 쓰기를 함
	- 스트림 클래스에 대한 객체 생성
		: 외부 자원과의 통로 만들기
	- 래퍼런스.읽기용메소드() 또는 래퍼런스.쓰기용메소드() 호출


-> 자바에서 파일스트림의 종류는 2가지로 구분됨
	- 바이트(Byte) 스트림 : 통로로 움직이는 데이터의 크기가 1Byte 단위임
		- 사운드, 이미지, 동영상과 같은 바이너리 파일들
		- 기록된 정보를 파일 내용으로 볼수는 없음
	- 문자(Character) 스트림 : 통로로 움직이는 데이터의 크기가 2Byte 단위임
		- 문자 1개씩 움직임
		- 문서 저장 or 불러오기 용도로 사용되며, 문서 파일의 기록된 정보를
		볼 수 있음



-> 바이트 스트림의 클래스의 최상위 클래스 : inputStream / ouputStream 클래스
-> 문자 스트림 클래스의 최상위 클래스 : Reader / Writer 클래스
-> 각 각 read() 메소드를 사용하여 읽어와서 변수에 기록 함
	Write() 메소드를 사용하여 변수값을 꺼내서 내보냄


@ 스트림의 분류
- 용도에 의한 분류
a. 1차 스트림(주 스트림) : 디바이스에 직접 연결되는 스트림
b. 2차 스트림(보조 스트림) : 1차 스트림과 연결을 통해 디바이스에 연결되는 스트림

※ 보조 스트림은 독단적으로 사용 될 수 없음, 1차 스트림(주 스트림)을 통해서만
	연결이 가능함
※ 보조 스트림의 역할은 주 스트림을 보다 편하게 사용하기 위함


- 전송 방향에 의한 분류
a. 입력 스트림 : 디바이스로부터 데이터를 읽어오는 스트림
b. 출력 스트림 : 디바이스로 데이터를 출력하는 스트림


- 전송 단위에 의한 분류
a. 바이트 스트림 : 1Byte 단위로 입/출력 하는 스트림
b. 문자 스트림 : 2Byte 단위로 입/출력 하는 스트림

- 보조 스트림
-> 주 스트림의 기능을 향상 시키거나 새로운 기능을 추가 시킴

