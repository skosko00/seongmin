

## 자바스크립트 주석 ##
//		: 한줄 주석
/* */		: 범위 주석


## 변수 선언 ##
변수 종류 : 멤버 변수(전역)와 지역 변수
멤버 변수 : 전역 변수라고도 하며, 기본적으로 window 객체의 멤버변수를 말함
	변수에 대한 자료형을 선언하지 않음 (자료형은 존재함 : var)

	형식		설명
변수명 = 값;		변수 선언시 변수명 앞에 var를 붙이지 않으면 전역변수로 간주함

var 변수명 = 값;	변수 선언시 변수명 앞에 var를 붙이면 지역 변수임
			(단, 함수 안에서 var를 붙이면 지역변수 이고,
			함수 밖에서 만들면 var를 붙이더라도 전역 변수가 됨)


정리하면?
1. 함수 밖에서 var를 붙이거나 붙이지 않아도 전역 변수
2. 함수 안에서 var를 붙이면 지역변수, 붙이지 않으면 전역변수

전역변수를 만드는 방법 3가지
1. 함수 외부에서 var를 붙여서 만드는 방법
2. 함수 외부에서 var를 붙이지 않고 만드는 방법
3. 함수 내부에서 var를 붙이지 않고 만드는 방법
-> 즉, 함수 내부에서도 전역변수를 만들 수 있음


## 변수 이름 명명 규칙 ##
-> 영어 대/소문자, 숫자, _(언더바), $ 사용 가능
-> 첫글자 숫자 사용불가
-> 공백을 포함한 특수문자 사용 불가
-> 이름에 의미있는 단어의 조합을 권장 (a,b,c.. 제발 하지 마요)
-> 예약어를 이름으로 사용 불가 (switch, if 등등..)
-> 두 단어 이상 결합시 낙타 표기법 권장
-> 한글 이름 사용 가능
-> 생성자 함수의 이름은 항상 대문자로 시작
-> 변수, 인스턴스, 함수, 메소드 이름은 항상 소문자로 시작


## 문자열 (String) ##
-> " ", ' '로 묶여 있는 리터럴 값 (상수)
-> 내장 객체로 String 객체 / 기본적인 함수가 존재함

toUpperCase()	: 모든 문자를 대문자로 변환
toLowerCase()	: 모든 문자를 소문자로 변환
length		: 글자 개수 조회용 멤버변수
indexOf()	: 시작부터 가장 먼저 찾는 문자열의 위치를 리턴
lastIndexOf()	: 끝에서 부터 가장 먼저 찾는 문자열의 위치를 리턴	
	※ 끝에서 부터 찾지만 인덱스 요소는 0부터 시작하여 찾음
charAt()	: 찾는 위치의 문자 리턴
substring()	: 값을 일부분만 리턴
split()		: 토큰 문자로 분리한 문자열 배열 리턴

ex)
	console.log(div.innerHTML.toUpperCase());
        console.log(div.innerHTML.toLowerCase());
        console.log(div.innerHTML.length);
        console.log(div.innerHTML.indexOf('소'));
        console.log(div.innerHTML.lastIndexOf('한'));
        console.log(div.innerHTML.charAt(2));
        console.log(div.innerHTML.substring(5,8));


@ 형변환

## 숫자 -> 문자열 ##
-> 숫자와 문자를 + 연산하게 되면 문자가 우선되어 숫자를 문자로 변환 함
-> 강제 형변환 : String() 함수를 이용


## 문자열 -> 숫자 ##
-> 사칙 연산시 숫자가 우선되어 문자를 숫자로 변환
	- 단, +는 자동 변환하지 않음(-,*,/,% 만 해당)
-> 강제 형변환 : Number(), parseInt(), parseFloat() 함수 이용


@ 연산자의 종류

최우선 연산자 	: (), [], .
단항 연산자 	: ++, --, +(양수), -(음수)
산술 연산자	: +, -, *, /, %
관계 연산자	: >, <, >=, <=, ==, !=, ===, !==
논리 연산자 	: &&, ||
삼항 연산자	: ?:;
대입 연산자	: =
복합대입 연산자	: +=, -=, *=, /=, %=

※ 연산자 우선 순위는 위에서 아래로
최우선 > 단항> 산술> 관계 > 논리> 삼항 > 대입


## === 연산자와 !== 연산자 ##
-> === 연산자와 !== 연산자 또한 같은가? 다른가? 를 표현하는 연산자
-> 다만 ==, != 연산자 와의 차이점은 데이터와 자료형까지 비교하는 연산자임

삼항연산자
<script type="text/javascript">
    function myfunc() {
        var num1 = 1;
        var num2 = 2;
        var div = document.getElementById("div1");
        
        num1>num2?div1.innerHTML="num1이 더 큽니다.":div1.innerHTML="num2이 더 큽니다.";
        // ex) 조건? 참일때:거짓일때;
    }
</script>



@ 제어문

## 조건문 ##
-> if, if ~ else, else if, switch, 짧은 조건문(||, &&)

## 반복문 ##
-> for, while, do~while, for in문

## 분기문 ##
-> continue, break


※ 문법은 자바와 동일하나 사용시에 데이터의 자료형은 var 라는것을 명심


## 짧은 조건문(||,&&) ##
-> ||는 거짓이면 실행
-> &&는 참이면 실행

<script type="text/javascript">
    function myfunc()
    {
        var num1 = 3;
        var num2 = 2;
        var div1 = document.getElementById("div1");
        
        num1>num2 || alert("num2이 더 큽니다.");
        num1>num2 && alert("num1이 더 큽니다.");
    }
</script>

||(or) &&(and)의 동작 방식을 이용하여 만든 조건문임
-> OR 연산자는 앞의 것이 참이면 뒤에 것을 볼 필요가 없으므로 뒤의 구문이 동작하지 않음
	- 하지만 앞의 것이 거짓이라면 뒤의 것이 참일 수 있으므로 뒤의 것을 봐야 함
	- 그래서 작동하는 것임
-> && 연산자는 앞의 것이 참이더라도 뒤의것을 봐야 하므로 참이면 실행 되는 원리
	- 만약 앞의 것이 거짓이면 뒤의것은 볼 필요가 없으므로 실행되지 않는 원리

※ or연산은 둘 중에 하나라도 참이면 참, and 연산은 둘 다 참이여야 참이기 때문!

ex)
        num1>num2 || alert("num2이 더 큽니다.");
        num1>num2 && alert("num1이 더 큽니다.");

or(||) 연산자
	-> 둘 중에 하나라도 참이면 최종 결과가 참	
	a = 10;
	b = 20;

1.	a==10 || b==20;
2.	a==10 || b==25;
3.	a==15 || b==20;
4.	a==15 || b==25;

and(&&) 연산자
	-> 둘 다 참이여야지만 최종 결과가 참 (하나라도 거짓이면 거짓)
	a = 10;
	b = 20;

1.	a==10 && b==20;
2.	a==10 && b==25;
3.	a==15 && b==20;
4.	a==15 && b==25;



