SET SERVEROUTPUT ON;

DECLARE
    Search_NAME EMPLOYEE.EMP_NAME%TYPE;
    Search_D_CODE EMPLOYEE.DEPT_CODE%TYPE;
    Search_D_TITLE DEPARTMENT.DEPT_TITLE%TYPE;
    First_NAME EMPLOYEE.EMP_NAME%TYPE;
    First_SALARY EMPLOYEE.SALARY%TYPE;
    First_D_TITLE DEPARTMENT.DEPT_TITLE%TYPE;
    Result_SALARY NUMBER;
BEGIN
SELECT EMP_NAME, DEPT_CODE, NVL(DEPT_TITLE,'No')
INTO Search_NAME, Search_D_CODE, Search_D_TITLE
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID)
WHERE EMP_ID = '&사번';

SELECT *
INTO First_NAME,First_SALARY,First_D_TITLE
FROM(SELECT EMP_NAME,SALARY,NVL(DEPT_TITLE,'No')
FROM EMPLOYEE 
LEFT JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID)
WHERE DEPT_CODE=Search_D_CODE
ORDER BY SALARY DESC)
WHERE ROWNUM =1;

DBMS_OUTPUT.PUT_LINE('#### 검색된 사원 정보 ####');
DBMS_OUTPUT.PUT_LINE('사원명 : ' || Search_NAME);
DBMS_OUTPUT.PUT_LINE('소속된 부서명 : ' || Search_D_TITLE);
DBMS_OUTPUT.PUT_LINE('-----------------------------------');
DBMS_OUTPUT.PUT_LINE('#### '|| Search_D_TITLE||'에서 급여가 가장 높은 사원 정보');
DBMS_OUTPUT.PUT_LINE('사원명 : ' || First_NAME);
DBMS_OUTPUT.PUT_LINE('급여 : ' || First_SALARY);
DBMS_OUTPUT.PUT_LINE('소속된 부서명 : ' || First_D_TITLE);

Result_SALARY := First_SALARY/10000;

IF (Result_SALARY BETWEEN 100 AND 199)
THEN DBMS_OUTPUT.PUT_LINE('저임금');
ELSIF (Result_SALARY BETWEEN 200 AND 399)
THEN DBMS_OUTPUT.PUT_LINE('평균임금');
ELSIF (Result_SALARY BETWEEN 300 AND 499)
THEN DBMS_OUTPUT.PUT_LINE('고임금');
ELSIF (Result_SALARY BETWEEN 300 AND 499)
THEN DBMS_OUTPUT.PUT_LINE('능력자');
ELSE
DBMS_OUTPUT.PUT_LINE('CEO');
END IF;
EXCEPTION
WHEN NO_DATA_FOUND
THEN DBMS_OUTPUT.PUT_LINE('부서가 없는 사람이 있습니다');
END;
/


DECLARE
    
BEGIN
	FOR I IN 1..5 LOOP
		DBMS_OUTPUT.PUT_LINE(i);
	END LOOP;
END;
/

-- PS/SQL 반복문을 이용하여 사번을 입력 하였을때
-- 입력한 사번부터 사번이 1씩 증가하여 5명을 출력하여라.
-- ex) 200번 입력시 200~204번까지 출력

DECLARE
    ID EMPLOYEE.EMP_ID%TYPE;
    NAME EMPLOYEE.EMP_NAME%TYPE;
    HIRE EMPLOYEE.HIRE_DATE%TYPE;
BEGIN
    FOR J IN 0..3 LOOP
    SELECT EMP_ID, EMP_NAME, HIRE_DATE
    INTO ID,NAME,HIRE
    FROM EMPLOYEE
    WHERE EMP_ID=&사번입력+J;
    DBMS_OUTPUT.PUT_LINE('사번 : ' || ID);
    DBMS_OUTPUT.PUT_LINE('이름 : ' || NAME);
    DBMS_OUTPUT.PUT_LINE('입사일 : ' || HIRE);
    DBMS_OUTPUT.PUT_LINE('-----------------------');
    END LOOP;
EXCEPTION
    WHEN NO_DATA_FOUND
    THEN DBMS_OUTPUT.PUT_LINE('사원이 없습니다');
END;
/

DECLARE
    USERINFO EMPLOYEE%ROWTYPE;
BEGIN
    FOR N IN 0..4 LOOP
    SELECT *
    INTO USERINFO
    FROM EMPLOYEE
    WHERE EMP_ID = &사번 + N;
    
    DBMS_OUTPUT.PUT_LINE('사번 : ' || USERINFO.EMP_ID);
    DBMS_OUTPUT.PUT_LINE('이름 : ' || USERINFO.EMP_NAME);
    DBMS_OUTPUT.PUT_LINE('입사일 : ' || USERINFO.HIRE_DATE);
    DBMS_OUTPUT.PUT_LINE('---------------------------');
    END LOOP;
EXCEPTION
    WHEN NO_DATA_FOUND
    THEN DBMS_OUTPUT.PUT_LINE('사원이 없습니다');
END;
/

/*
    문제1) 1~10 까지 반복하여 TEST1 테이블에 데이터가 저장되게 하시오
    
    KH 계정에서 TEST1 테이블 생성
->  CREATE TABLE TEST1(BUNHO NUMBER(3), INUM VARCHAR2(10));
*/

CREATE TABLE TEST1(BUNHO NUMBER(3), INUM VARCHAR2(10));

BEGIN
    FOR N IN 1..10 LOOP
    INSERT INTO TEST1
    VALUES(N, SYSDATE);
    END LOOP;
END;
/

SELECT * FROM TEST1;

-- TOP N 분석을 위한 PL/SQL을 만들어라
-- '급여' / '보너스' / '입사일'
-- 무조건 1위~5위 까지를 출력하는 PL/SQL을 만들어라.

DECLARE
    N_ROWNUM NUMBER;
    EMP EMPLOYEE%ROWTYPE;
    SEARCH_VALUE VARCHAR(20);
BEGIN
    SEARCH_VALUE := '&입력';
    IF('급여'=SEARCH_VALUE)    
    THEN
    FOR I IN 1..5 LOOP
    WITH TOP_N AS (SELECT ROW_NUMBER() OVER(ORDER BY SALARY DESC) AS "순위",
        EMP_NAME, SALARY
        FROM EMPLOYEE)
    SELECT *
    INTO N_ROWNUM, EMP.EMP_NAME, EMP.SALARY
    FROM TOP_N
    WHERE "순위" = I;    
    DBMS_OUTPUT.PUT_LINE('랭킹 : ' || I ||' /이름 : ' || EMP.EMP_NAME || ' /급여 : ' || EMP.SALARY);
    END LOOP;
    
    ELSIF('보너스'=SEARCH_VALUE)
    THEN
    FOR I IN 1..5 LOOP
    WITH TOP_N AS (SELECT ROW_NUMBER() OVER (ORDER BY NVL(BONUS,0) DESC) AS "순위",
    EMP_NAME, NVL(BONUS,0)*100
    FROM EMPLOYEE)
    SELECT *
    INTO N_ROWNUM, EMP.EMP_NAME, EMP.BONUS
    FROM TOP_N
    WHERE "순위" = I;    
    DBMS_OUTPUT.PUT_LINE('랭킹 : ' || I ||' /이름 : ' || EMP.EMP_NAME || ' /보너스 : ' || EMP.BONUS || '%');
    END LOOP;
    
    ELSIF('입사일'=SEARCH_VALUE)
    THEN
    FOR I IN 1..5 LOOP
    WITH TOP_N AS (SELECT ROW_NUMBER() OVER (ORDER BY HIRE_DATE ASC) AS "순위",
    EMP_NAME, HIRE_DATE
    FROM EMPLOYEE)
    SELECT *
    INTO N_ROWNUM, EMP.EMP_NAME, EMP.HIRE_DATE
    FROM TOP_N
    WHERE "순위" = I;    
    DBMS_OUTPUT.PUT_LINE('랭킹 : ' || I ||' /이름 : ' || EMP.EMP_NAME || ' /입사일 : ' || EMP.HIRE_DATE);
    END LOOP;
    END IF;
END;
/

SET SERVEROUTPUT ON;

DECLARE
    Search_NAME EMPLOYEE.EMP_NAME%TYPE;
    Search_D_CODE EMPLOYEE.DEPT_CODE%TYPE;
    Search_D_TITLE DEPARTMENT.DEPT_TITLE%TYPE;
    First_NAME EMPLOYEE.EMP_NAME%TYPE;
    First_SALARY EMPLOYEE.SALARY%TYPE;
    First_D_TITLE DEPARTMENT.DEPT_TITLE%TYPE;
    Result_SALARY NUMBER;
BEGIN
SELECT EMP_NAME, DEPT_CODE, NVL(DEPT_TITLE,'No')
INTO Search_NAME, Search_D_CODE, Search_D_TITLE
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID)
WHERE EMP_ID = '&사번';

SELECT *
INTO First_NAME,First_SALARY,First_D_TITLE
FROM(SELECT EMP_NAME,SALARY,NVL(DEPT_TITLE,'No')
FROM EMPLOYEE 
LEFT JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID)
WHERE DEPT_CODE=Search_D_CODE
ORDER BY SALARY DESC)
WHERE ROWNUM =1;

DBMS_OUTPUT.PUT_LINE('#### 검색된 사원 정보 ####');
DBMS_OUTPUT.PUT_LINE('사원명 : ' || Search_NAME);
DBMS_OUTPUT.PUT_LINE('소속된 부서명 : ' || Search_D_TITLE);
DBMS_OUTPUT.PUT_LINE('-----------------------------------');
DBMS_OUTPUT.PUT_LINE('#### '|| Search_D_TITLE||'에서 급여가 가장 높은 사원 정보');
DBMS_OUTPUT.PUT_LINE('사원명 : ' || First_NAME);
DBMS_OUTPUT.PUT_LINE('급여 : ' || First_SALARY);
DBMS_OUTPUT.PUT_LINE('소속된 부서명 : ' || First_D_TITLE);

Result_SALARY := First_SALARY/10000;

IF (Result_SALARY BETWEEN 100 AND 199)
THEN DBMS_OUTPUT.PUT_LINE('저임금');
ELSIF (Result_SALARY BETWEEN 200 AND 399)
THEN DBMS_OUTPUT.PUT_LINE('평균임금');
ELSIF (Result_SALARY BETWEEN 300 AND 499)
THEN DBMS_OUTPUT.PUT_LINE('고임금');
ELSIF (Result_SALARY BETWEEN 300 AND 499)
THEN DBMS_OUTPUT.PUT_LINE('능력자');
ELSE
DBMS_OUTPUT.PUT_LINE('CEO');
END IF;
EXCEPTION
WHEN NO_DATA_FOUND
THEN DBMS_OUTPUT.PUT_LINE('부서가 없는 사람이 있습니다');
END;
/


DECLARE
    
BEGIN
	FOR I IN 1..5 LOOP
		DBMS_OUTPUT.PUT_LINE(i);
	END LOOP;
END;
/

-- PS/SQL 반복문을 이용하여 사번을 입력 하였을때
-- 입력한 사번부터 사번이 1씩 증가하여 5명을 출력하여라.
-- ex) 200번 입력시 200~204번까지 출력

DECLARE
    ID EMPLOYEE.EMP_ID%TYPE;
    NAME EMPLOYEE.EMP_NAME%TYPE;
    HIRE EMPLOYEE.HIRE_DATE%TYPE;
BEGIN
    FOR J IN 0..3 LOOP
    SELECT EMP_ID, EMP_NAME, HIRE_DATE
    INTO ID,NAME,HIRE
    FROM EMPLOYEE
    WHERE EMP_ID=&사번입력+J;
    DBMS_OUTPUT.PUT_LINE('사번 : ' || ID);
    DBMS_OUTPUT.PUT_LINE('이름 : ' || NAME);
    DBMS_OUTPUT.PUT_LINE('입사일 : ' || HIRE);
    DBMS_OUTPUT.PUT_LINE('-----------------------');
    END LOOP;
EXCEPTION
    WHEN NO_DATA_FOUND
    THEN DBMS_OUTPUT.PUT_LINE('사원이 없습니다');
END;
/

DECLARE
    USERINFO EMPLOYEE%ROWTYPE;
BEGIN
    FOR N IN 0..4 LOOP
    SELECT *
    INTO USERINFO
    FROM EMPLOYEE
    WHERE EMP_ID = &사번 + N;
    
    DBMS_OUTPUT.PUT_LINE('사번 : ' || USERINFO.EMP_ID);
    DBMS_OUTPUT.PUT_LINE('이름 : ' || USERINFO.EMP_NAME);
    DBMS_OUTPUT.PUT_LINE('입사일 : ' || USERINFO.HIRE_DATE);
    DBMS_OUTPUT.PUT_LINE('---------------------------');
    END LOOP;
EXCEPTION
    WHEN NO_DATA_FOUND
    THEN DBMS_OUTPUT.PUT_LINE('사원이 없습니다');
END;
/

/*
    문제1) 1~10 까지 반복하여 TEST1 테이블에 데이터가 저장되게 하시오
    
    KH 계정에서 TEST1 테이블 생성
->  CREATE TABLE TEST1(BUNHO NUMBER(3), INUM VARCHAR2(10));
*/

CREATE TABLE TEST1(BUNHO NUMBER(3), INUM VARCHAR2(10));

BEGIN
    FOR N IN 1..10 LOOP
    INSERT INTO TEST1
    VALUES(N, SYSDATE);
    END LOOP;
END;
/

SELECT * FROM TEST1;

-- TOP N 분석을 위한 PL/SQL을 만들어라
-- '급여' / '보너스' / '입사일'
-- 무조건 1위~5위 까지를 출력하는 PL/SQL을 만들어라.
-- 방법 1
DECLARE
    N_ROWNUM NUMBER;
    EMP EMPLOYEE%ROWTYPE;
    SEARCH_VALUE VARCHAR(20);
BEGIN
    SEARCH_VALUE := '&입력';
    IF('급여'=SEARCH_VALUE)    
    THEN
    FOR I IN 1..5 LOOP
    WITH TOP_N AS (SELECT ROW_NUMBER() OVER(ORDER BY SALARY DESC) AS "순위",
        EMP_NAME, SALARY
        FROM EMPLOYEE)
    SELECT *
    INTO N_ROWNUM, EMP.EMP_NAME, EMP.SALARY
    FROM TOP_N
    WHERE "순위" = I;    
    DBMS_OUTPUT.PUT_LINE('랭킹 : ' || I ||' /이름 : ' || EMP.EMP_NAME || ' /급여 : ' || EMP.SALARY);
    END LOOP;
    
    ELSIF('보너스'=SEARCH_VALUE)
    THEN
    FOR I IN 1..5 LOOP
    WITH TOP_N AS (SELECT ROW_NUMBER() OVER (ORDER BY NVL(BONUS,0) DESC) AS "순위",
    EMP_NAME, NVL(BONUS,0)*100
    FROM EMPLOYEE)
    SELECT *
    INTO N_ROWNUM, EMP.EMP_NAME, EMP.BONUS
    FROM TOP_N
    WHERE "순위" = I;    
    DBMS_OUTPUT.PUT_LINE('랭킹 : ' || I ||' /이름 : ' || EMP.EMP_NAME || ' /보너스 : ' || EMP.BONUS || '%');
    END LOOP;
    
    ELSIF('입사일'=SEARCH_VALUE)
    THEN
    FOR I IN 1..5 LOOP
    WITH TOP_N AS (SELECT ROW_NUMBER() OVER (ORDER BY HIRE_DATE ASC) AS "순위",
    EMP_NAME, HIRE_DATE
    FROM EMPLOYEE)
    SELECT *
    INTO N_ROWNUM, EMP.EMP_NAME, EMP.HIRE_DATE
    FROM TOP_N
    WHERE "순위" = I;    
    DBMS_OUTPUT.PUT_LINE('랭킹 : ' || I ||' /이름 : ' || EMP.EMP_NAME || ' /입사일 : ' || EMP.HIRE_DATE);
    END LOOP;
    END IF;
END;
/

-- 방법 2

DECLARE
    N_ROWNUM NUMBER;
    EMP EMPLOYEE%ROWTYPE;
    SEARCH_VALUE VARCHAR(20);
BEGIN
    SEARCH_VALUE := '&입력';
    
    CASE SEARCH_VALUE
    WHEN '급여' THEN
    
    FOR I IN 1..5 LOOP
    SELECT EMP_NAME,SALARY
    INTO EMP.EMP_NAME, EMP.SALARY
    FROM (SELECT ROW_NUMBER() OVER(ORDER BY SALARY DESC) AS "랭크",EMP_NAME,SALARY
    FROM EMPLOYEE)
    WHERE "랭크" = I;
    DBMS_OUTPUT.PUT_LINE('랭킹 : ' || I ||' /이름 : ' || EMP.EMP_NAME || ' /급여 : ' || EMP.SALARY);
    END LOOP;
    
    WHEN '보너스' THEN
    
    FOR I IN 1..5 LOOP
    SELECT EMP_NAME,BONUS*100
    INTO EMP.EMP_NAME,EMP.BONUS
    FROM (SELECT ROW_NUMBER() OVER(ORDER BY NVL(BONUS,0) DESC) AS "랭크",EMP_NAME,BONUS
    FROM EMPLOYEE)
    WHERE "랭크" = I;
    DBMS_OUTPUT.PUT_LINE('랭킹 : ' || I ||' /이름 : ' || EMP.EMP_NAME || ' /보너스 : ' || EMP.BONUS || '%');
    END LOOP;
    
    WHEN '입사일' THEN
    
    FOR I IN 1..5 LOOP
    SELECT EMP_NAME,HIRE_DATE
    INTO EMP.EMP_NAME, EMP.HIRE_DATE
    FROM (SELECT ROW_NUMBER() OVER(ORDER BY HIRE_DATE ASC) AS "랭크",EMP_NAME,HIRE_DATE
    FROM EMPLOYEE)
    WHERE "랭크" = I;
    DBMS_OUTPUT.PUT_LINE('랭킹 : ' || I ||' /이름 : ' || EMP.EMP_NAME || ' /입사일 : ' || EMP.HIRE_DATE);
    END LOOP;
    ELSE
    DBMS_OUTPUT.PUT_LINE('잘못 입력하셨습니다.');
    END CASE;
END;
/

--ex) 1~5까지 반복 처리

DECLARE
	N NUMBER :=1;
BEGIN
	WHILE N <=5 LOOP
	DBMS_OUTPUT.PUT_LINE(N);
	N:=N+1;
END LOOP;
END;
/
