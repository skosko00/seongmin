

@ TRIGGER
-> 데이터베이스가 미리 정해 놓은 조건을 만족하거나 어떠한 동작이 수행되면
자동적으로 수행되는 행동을 말함
	- 트리거의 사전적 의미 : 연쇄 반응
-> 트리거는 테이블이나 뷰가 INSERT, UPDATE, DELETE 등의 DML 문에 의해
데이터가 입력, 수정, 삭제 될 경우 자동으로 실행 됨

ex) 회원 탈퇴가 이루어질 경위 회원 탈퇴 테이블에 기존 회원 정보가
	자동으로 입력되도록 설정
	-> 회원이 탈퇴 했다고 해서 회원 정보를 바로 삭제 하게 되는게 아닌
	별도의 테이블에 옮겨 놓거나 탈퇴한 회원이라는 기록을 남겨야 함


@ 트리거의 실행 시점
-> 트리거 실행 시점을 이벤트 전(BEFORE)이나 이벤트 후(AFTER)로 지정하여 설정


@ 트리거의 이벤트
-> 트리거의 이벤트는 사용자가 어떤 DML(INSERT, UPDATE, DELETE) 문을 실행했을 때
트리거를 발생시킬 것인가를 결정

@ 트리거의 몸체
-> 트리거의 몸체는 해당 타이밍에 해당 이벤트가 발생했을 때 실행될 기본 로직이
포함되는 부분으로 BEGIN ~ END 안에 작성 함

@ 트리거의 유형
-> 트리거의 유형은 FOR EACH ROW에 의해 문장 레벨 트리거와 행 레벨 트리거로 나누어 짐
-> FOR EACH ROW가 생략되면 "문장 레벨 트리거"
-> FOR EACH ROW가 정의되면 "행 레벨 트리거"
-> 문장 레벨 트리거는 어떤 사용자가 트리거가 설정되어 있는 테이블에 대해
DML(INSERT, UPDATE, DELETE)문을 실행 시킬 때 트리거를 단 한번 발생 시킴
-> 행 레벨 트리거는 DML(INSERT,UPDATE,DELETE)에 의해서 여러 개의 행이 변경된다면
각 행이 변경될때마다 트리거를 발생 시킴
	(만약 5개의 행이 변경되면 5번의 트리거가 발생함)

@ 트리거의 조건
-> 트리거의 조건은 행 레벨 트리거에서만 설정할 수 있으며 트리거 이벤트에
정의된 테이블에 이벤트가 발생할 때보다 구체적인 데이터 검색 조건을 부여할 때 사용

@ 트리거 생성 확인
SELECT * FROM ALL_TRIGGER;
SELECT * FROM USER_TRIGGER;


ex) 회원이 탈퇴 하면 탈퇴 테이블에 정보를 옮겨 놓는 PL/SQL

-- 트리거 실습을 위한 테이블 2개 생성
-- 회원 테이블 , 탈퇴 회원 테이블

CREATE TABLE M_TBL
(
    USERID  VARCHAR2(20) PRIMARY KEY,
    USERPWD VARCHAR2(20) NOT NULL,
    USERNAME VARCHAR2(20) NOT NULL,
    ENROLL_DATE DATE
);

CREATE TABLE DEL_M_TBL
(
    USERID VARCHAR2(20) PRIMARY KEY,
    USERNAME VARCHAR2(20),
    ENROLL_DATE DATE,
    OUT_DATE    DATE
);

INSERT INTO M_TBL
VALUES('user11','pass11','노민수','16/05/23');
INSERT INTO M_TBL
VALUES('user22','pass22','한아름','17/05/03');
INSERT INTO M_TBL
VALUES('user33','pass33','황누리','17/04/13');
INSERT INTO M_TBL
VALUES('user44','pass44','한영진','15/04/27');


SELECT * FROM M_TBL;
SELECT * FROM DEL_M_TBL;

COMMIT;
ROLLBACK;

DECLARE
    ID M_TBL.USERID%TYPE;
    NAME M_TBL.USERNAME%TYPE;
    EN_DATE M_TBL.ENROLL_DATE%TYPE;
BEGIN
    SELECT USERID,USERNAME,ENROLL_DATE
    INTO ID,NAME,EN_DATE
    FROM M_TBL
    WHERE USERID = 'user22';
    INSERT INTO DEL_M_TBL VALUES(ID,NAME,EN_DATE,SYSDATE);
    DELETE FROM M_TBL WHERE USERID = 'user22';
END;
/




ex) 회원이 탈퇴 하면 탈퇴 테이블에 정보를 옮겨 놓는 트리거 설정


CREATE OR REPLACE TRIGGER M_TBL_TRG
AFTER DELETE
ON M_TBL
FOR EACH ROW
BEGIN
    INSERT INTO DEL_M_TBL VALUES(
        :OLD.USERID,:OLD.USERNAME,:OLD.ENROLL_DATE,SYSDATE);
END;
/


-- 삭제후 확인해보기
DELETE FROM M_TBL WHERE USERID='user22';



SELECT * FROM M_TBL;
SELECT * FROM DEL_M_TBL;



<바인드 변수> 2가지
	- FOR EACH ROW를 사용해야 함
:NEW - 새로 입력된 (INSERT,UPDATE) 데이터
:OLD - 기존 데이터 (UPDATE,DELETE) 데이터

:OLD.컬럼명 -> SQL 반영 전의 컬럼 데이터
:NEW.컬럼명 -> SQL 반영 후의 컬럼 데이터

※ DELETE에는 삭제 이기 때문에 OLD만 사용할 수 있음


/*
## 간단 실습 1 ##
-> M_TBL 에서 회원 정보 (이름 변경시 LOG_TBL에 기록 남기기)
-> LOG_TBL 컬럼 (유저ID,로그내용,날짜)
    ※ 유저 ID : 로그가 남는 유저 ID
    ※ 로그내용 : 변경전 이름 -> 변경후 이름 내용
    ※ 날짜 : 실행한 시각
*/

CREATE TABLE LOG_TBL
(
    USERID VARCHAR(20) PRIMARY KEY,
    CONTENT VARCHAR(100) NOT NULL,
    MODIFY_DATE DATE
);

CREATE OR REPLACE TRIGGER M_TBL_UPDATE_TRG
AFTER UPDATE
ON M_TBL
FOR EACH ROW
DECLARE

BEGIN
    INSERT INTO LOG_TBL VALUES(
    :OLD.USERID,:OLD.USERNAME || ' -> ' || :NEW.USERNAME, SYSDATE);
END;
/
SELECT * FROM M_TBL;

UPDATE M_TBL
SET USERNAME='김말똥'
WHERE USERID='USER11';

SELECT * FROM LOG_TBL;




/*
ex)
제품이 입고 될때마다 상품 재고 테이블의 수치를 자동으려 변경하는 트리거 만들기
(입,출고 될 때마다 관리자가 수동으로 수치를 조정하면 불편하고 일이 많아짐)

2개의 테이블
1. 제품 및 재고 테이블
2. 입출고 테이블
*/

-- 제품 및 재고 테이블
CREATE TABLE PRODUCT
(
    PCODE NUMBER PRIMARY KEY,
    PNAME VARCHAR2(30),
    BRAND VARCHAR2(30),
    PRICE NUMBER,
    STOCK NUMBER DEFAULT 0
);

-- 제품 입출고 테이블
CREATE TABLE PRO_DETAIL
(
    DCODED NUMBER PRIMARY KEY,
    PCODE NUMBER,
    PDATE DATE,
    AMOUNT NUMBER,
    STATUS VARCHAR2(10) CHECK (STATUS IN('입고','출고')),
    FOREIGN KEY (PCODE) REFERENCES PRODUCT(PCODE)
);

INSERT INTO PRODUCT 
VALUES(1111,'칸쵸','롯데',1500,DEFAULT);
INSERT INTO PRODUCT 
VALUES(2222,'시리얼','롯데',3000,DEFAULT);
INSERT INTO PRODUCT 
VALUES(3333,'허니버터','해태',10000,DEFAULT);
INSERT INTO PRODUCT 
VALUES(4444,'꼬북칩','오리온',100,DEFAULT);
SELECT * FROM PRODUCT;
COMMIT;

SELECT * FROM PRODUCT;
CREATE SEQUENCE P_D_SEQ
START WITH 1
INCREMENT BY 1
MAXVALUE 10000
NOCYCLE
NOCACHE;

INSERT INTO PRO_DETAIL 
VALUES(P_D_SEQ.NEXTVAL,1111,SYSDATE,5,'입고');

SELECT * FROM PRO_DETAIL;

UPDATE PRODUCT
SET STOCK = STOCK + 5
WHERE PCODE = 1111;

-- 하나하나 작업하게 되면 굉장히 불편함
-- 트리거를 이용하여 입, 출고 내역에 따라 재고수량이 자동으로 변경되도록
-- 만들도록 하겠음
CREATE OR REPLACE TRIGGER PRO_TGR
AFTER INSERT
ON
PRO_DETAIL
FOR EACH ROW
BEGIN
    IF (:NEW.STATUS = '입고')
    THEN
        UPDATE PRODUCT
        SET STOCK = STOCK + :NEW.AMOUNT
        WHERE PCODE = :NEW.PCODE;
    ELSIF (:NEW.STATUS = '출고')
    THEN   
        UPDATE PRODUCT
        SET STOCK = STOCK - :NEW.AMOUNT
        WHERE PCODE = :NEW.PCODE;
    END IF;
END;
/

INSERT INTO PRO_DETAIL 
VALUES(P_D_SEQ.NEXTVAL,1111,SYSDATE,5,'입고');

INSERT INTO PRO_DETAIL 
VALUES(P_D_SEQ.NEXTVAL,1111,SYSDATE,2,'출고');

SELECT * FROM PRODUCT;
SELECT * FROM PRO_DETAIL;