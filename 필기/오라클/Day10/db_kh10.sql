

BEGIN
    DBMS_OUTPUT.PUT_LINE('HELLO ORACLE');
END;
/

SET SERVEROUTPUT ON;
-- 오라클 OUTPUT 기능 ON

DECLARE
    ID NUMBER;
    NAME VARCHAR2(20);
    NO VARCHAR2(30);
BEGIN
    SELECT EMP_ID, EMP_NAME, EMP_NO
    INTO ID,NAME,NO
    FROM EMPLOYEE
    WHERE EMP_NAME = '&이름';
    DBMS_OUTPUT.PUT_LINE(ID);
    DBMS_OUTPUT.PUT_LINE(NAME);
    DBMS_OUTPUT.PUT_LINE(NO);
EXCEPTION
    WHEN NO_DATA_FOUND
    THEN DBMS_OUTPUT.PUT_LINE('데이터가 없습니다');
END;
/


-- 해당 사원의 사원번호를 입력시
-- 이름, 부서명, 직급명이 출력되도록 PL/SQL로 만들어 보시오.

SELECT * FROM JOB;

DECLARE
    NAME VARCHAR2(20);
    DEPT VARCHAR2(20);
    JOB VARCHAR2(20);
BEGIN
    SELECT EMP_ID, DEPT_TITLE, JOB_NAME
    INTO NAME, DEPT, JOB
    FROM EMPLOYEE
    WHERE EMP_ID = '&사원번호';
    DBMS_OUTPUT.PUT_LINE('이름 : ' || NAME);
    DBMS_OUTPUT.PUT_LINE('부서코드 : ' || DEPT);
    DBMS_OUTPUT.PUT_LINE('직급코드 : ' || JOB);
EXCEPTION
    WHEN NO_DATA_FOUND
    THEN DBMS_OUTPUT.PUT_LINE('데이터가 없습니다');
END;
/

DECLARE
    NAME VARCHAR2(20);
    DEPT VARCHAR2(20);
    JOB VARCHAR2(20);
BEGIN
    SELECT EMP_ID, DEPT_TITLE, JOB_NAME
    INTO NAME, DEPT, JOB
    FROM EMPLOYEE E, DEPARTMENT D, JOB J
    WHERE E.DEPT_CODE = D.DEPT_ID AND E.JOB_CODE = J.JOB_CODE AND
    EMP_ID = '&사원번호';
    DBMS_OUTPUT.PUT_LINE('이름 : ' || NAME);
    DBMS_OUTPUT.PUT_LINE('부서명 : ' || DEPT);
    DBMS_OUTPUT.PUT_LINE('직급명 : ' || JOB);
EXCEPTION
    WHEN NO_DATA_FOUND
    THEN DBMS_OUTPUT.PUT_LINE('데이터가 없습니다');
END;
/

DECLARE
    NAME VARCHAR2(20);
    DEPT VARCHAR2(20);
    JOB VARCHAR2(20);
BEGIN
    SELECT EMP_ID, (SELECT DEPT_TITLE FROM DEPARTMENT D WHERE E.DEPT_CODE=D.DEPT_ID), (SELECT JOB_NAME FROM JOB J WHERE J.JOB_CODE= E.JOB_CODE)
    INTO NAME, DEPT, JOB
    FROM EMPLOYEE E
    WHERE EMP_ID = '&사원번호';
    DBMS_OUTPUT.PUT_LINE('이름 : ' || NAME);
    DBMS_OUTPUT.PUT_LINE('부서명 : ' || DEPT);
    DBMS_OUTPUT.PUT_LINE('직급명 : ' || JOB);
EXCEPTION
    WHEN NO_DATA_FOUND
    THEN DBMS_OUTPUT.PUT_LINE('데이터가 없습니다');
END;
/

DECLARE
	DATA1 NUMBER;
	DATA2 NUMBER := 200;
BEGIN
	DATA1 := 100;
	DBMS_OUTPUT.PUT_LINE(DATA1);
	DBMS_OUTPUT.PUT_LINE(DATA2);
END;
/

DECLARE
    ID VARCHAR2(20);
    NAME NUMBER(20);
BEGIN
    SELECT EMP_ID, EMP_NAME
    INTO ID,NAME
    FROM EMPLOYEE
    WHERE EMP_NAME='선동일';
    
    DBMS_OUTPUT.PUT_LINE('ID : ' || ID);
    DBMS_OUTPUT.PUT_LINE('NAME : ' || NAME);
END;
/

DECLARE
    ID EMPLOYEE.EMP_ID%TYPE;
    NAME EMPLOYEE.EMP_NAME%TYPE;
    NO EMPLOYEE.EMP_NO%TYPE;
    SALARY EMPLOYEE.SALARY%TYPE;
    HIRE_DATE EMPLOYEE.HIRE_DATE%TYPE;
BEGIN
    SELECT EMP_ID, EMP_NAME, EMP_NO, SALARY, HIRE_DATE
    INTO ID,NAME,NO,SALARY,HIRE_DATE
    FROM EMPLOYEE
    WHERE EMP_NAME='&사원명';
    
    DBMS_OUTPUT.PUT_LINE('ID : ' || ID);
    DBMS_OUTPUT.PUT_LINE('NAME : ' || NAME);
    DBMS_OUTPUT.PUT_LINE('NO : ' || NO);
    DBMS_OUTPUT.PUT_LINE('SALARY : ' || SALARY);
    DBMS_OUTPUT.PUT_LINE('HIRE_DATE : ' || HIRE_DATE);
EXCEPTION
    WHEN NO_DATA_FOUND
    THEN DBMS_OUTPUT.PUT_LINE('데이터가 없습니다');
END;
/

DECLARE
    EMP EMPLOYEE%ROWTYPE;
BEGIN
    SELECT EMP_ID,EMP_NAME,EMP_NO
    INTO EMP.EMP_ID, EMP.EMP_NAME, EMP.EMP_NO
    FROM EMPLOYEE
    WHERE EMP_ID='200';
    DBMS_OUTPUT.PUT_LINE('사원번호 : ' || EMP.EMP_ID);
    DBMS_OUTPUT.PUT_LINE('사원명 : ' || EMP.EMP_NAME);
    DBMS_OUTPUT.PUT_LINE('주민번호 : ' || EMP.EMP_NO);
EXCEPTION
    WHEN NO_DATA_FOUND
    THEN DBMS_OUTPUT.PUT_LINE('NoData');
END;
/

DECLARE
    TYPE MY_ROW_TYPE IS RECORD(
        ID EMPLOYEE.EMP_ID%TYPE,
        NAME VARCHAR2(20),
        SALARY EMPLOYEE.SALARY%TYPE
    );
    EMP MY_ROW_TYPE;
BEGIN
    SELECT EMP_ID, EMP_NAME, SALARY
    INTO EMP.ID,EMP.NAME,EMP.SALARY
    FROM EMPLOYEE
    WHERE EMP_ID='200';
    DBMS_OUTPUT.PUT_LINE('사원번호 : ' || EMP.ID);
    DBMS_OUTPUT.PUT_LINE('사원명 : ' || EMP.NAME);
    DBMS_OUTPUT.PUT_LINE('급여 : ' || EMP.SALARY);
END;
/

--@실습문제1
--사번, 사원명, 직급코드, 급여를 담을수 있는 참조변수를 통해서 (%TYPE)
--송종기사원의 사번, 사원명, 직급코드,급여를 익명블럭을 통해 스크립트 출력하세요.

DECLARE
    ID EMPLOYEE.EMP_ID%TYPE;
    NAME EMPLOYEE.EMP_NAME%TYPE;
    J_CODE EMPLOYEE.JOB_CODE%TYPE;
    SALARY EMPLOYEE.SALARY%TYPE;
BEGIN
    SELECT EMP_ID, EMP_NAME, JOB_CODE, SALARY
    INTO ID, NAME, J_CODE, SALARY
    FROM EMPLOYEE
    WHERE EMP_NAME='송종기';
    DBMS_OUTPUT.PUT_LINE('사번 : ' || ID);
    DBMS_OUTPUT.PUT_LINE('사원명 : ' || NAME);
    DBMS_OUTPUT.PUT_LINE('직급코드 : ' || J_CODE);
    DBMS_OUTPUT.PUT_LINE('급여 : ' || SALARY);
END;
/


--@실습문제2
--사번, 사원명, 직급명을 담을수 있는 참조변수를 통해서 (record)
-- 사원명을 검색하여 해당 사원의 사번, 사원명, 부서명,직급명을 
-- 익명블럭을 통해 스크립트 출력하세요.

SELECT * FROM DEPARTMENT;

DECLARE
    TYPE MY_ROWTYPE IS RECORD (
    ID EMPLOYEE.EMP_ID%TYPE,
    NAME VARCHAR2(20),
    J_NAME JOB.JOB_NAME%TYPE,
    D_TITLE VARCHAR2(20));
    EMP MY_ROWTYPE;
BEGIN
    SELECT EMP_ID, EMP_NAME, JOB_NAME, DEPT_TITLE
    INTO EMP.ID, EMP.NAME, EMP.J_NAME, EMP.D_TITLE
    FROM EMPLOYEE JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID)
    JOIN JOB USING (JOB_CODE)
    WHERE EMP_NAME='&사원명';
    DBMS_OUTPUT.PUT_LINE('사번 : ' || EMP.ID);
    DBMS_OUTPUT.PUT_LINE('사원명 : ' || EMP.NAME);
    DBMS_OUTPUT.PUT_LINE('부서명 : ' || EMP.D_TITLE);
    DBMS_OUTPUT.PUT_LINE('직급명 : ' || EMP.J_NAME);
EXCEPTION
    WHEN NO_DATA_FOUND
    THEN DBMS_OUTPUT.PUT_LINE('데이터가 없습니다');
END;
/

--@실습문제3
-- 사원번호를 입력하여 해당 사원을 찾아  (%ROWTYPE을 사용)
-- 사원명, 주민번호, 입사일, 부서명을 
-- 익명블럭을 통해 스크립트 출력하세요.

SELECT * FROM EMPLOYEE;

DECLARE
    EMP EMPLOYEE%ROWTYPE;
    DEPT DEPARTMENT%ROWTYPE;
BEGIN
    SELECT EMP_NAME, EMP_NO, HIRE_DATE, DEPT_TITLE
    INTO EMP.EMP_NAME, EMP.EMP_NO, EMP.HIRE_DATE, DEPT.DEPT_TITLE
    FROM EMPLOYEE JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID)
    WHERE EMP_ID = '&사원번호';
    DBMS_OUTPUT.PUT_LINE('사원명 : ' || EMP.EMP_NAME);
    DBMS_OUTPUT.PUT_LINE('주민번호 : ' || EMP.EMP_NO);
    DBMS_OUTPUT.PUT_LINE('입사일 : ' || EMP.HIRE_DATE);
    DBMS_OUTPUT.PUT_LINE('부서명 : ' || DEPT.DEPT_TITLE);
EXCEPTION
    WHEN NO_DATA_FOUND
    THEN DBMS_OUTPUT.PUT_LINE('NoData');
END;
/

-- 사원 번호를 가지고 사원의 사번, 이름, 급여, 보너스율을 출력하고
-- 보너스율이 없으면 '보너스를 지금받지 않는 사원입니다.' 를 출력 하려면?
-- 1. 사원번호를 가지고 해당 사원의 사번, 이름, 급여, 보너스율을 출력
-- 2. 보너스율이 0% 라면?
--        -> 보너스를 지급받지 않는 사원입니다.

DECLARE
    ID EMPLOYEE.EMP_ID%TYPE;
    NAME EMPLOYEE.EMP_NAME%TYPE;
    SALARY EMPLOYEE.SALARY%TYPE;
    BONUS EMPLOYEE.BONUS%TYPE;
BEGIN
    SELECT EMP_ID, EMP_NAME, SALARY, NVL(BONUS,0)*100
    INTO ID, NAME, SALARY, BONUS
    FROM EMPLOYEE
    WHERE EMP_ID='&사원번호';
    DBMS_OUTPUT.PUT_LINE('사번 : ' || ID);
    DBMS_OUTPUT.PUT_LINE('이름 : ' || NAME);
    DBMS_OUTPUT.PUT_LINE('급여 : ' || SALARY);
    DBMS_OUTPUT.PUT_LINE('보너스 : ' || BONUS || '%');    
    IF (BONUS=0)
    THEN DBMS_OUTPUT.PUT_LINE('보너스를 지급받지 않는 사원입니다.');
    END IF;
END;
/

DECLARE
    ID EMPLOYEE.EMP_ID%TYPE;
    NAME EMPLOYEE.EMP_NAME%TYPE;
    SALARY EMPLOYEE.SALARY%TYPE;
    BONUS EMPLOYEE.BONUS%TYPE;
BEGIN
    SELECT EMP_ID, EMP_NAME, SALARY, NVL(BONUS,0)*100
    INTO ID, NAME, SALARY, BONUS
    FROM EMPLOYEE
    WHERE EMP_ID='&사원번호';
    DBMS_OUTPUT.PUT_LINE('사번 : ' || ID);
    DBMS_OUTPUT.PUT_LINE('이름 : ' || NAME);
    DBMS_OUTPUT.PUT_LINE('급여 : ' || SALARY);            
    IF (BONUS!=0)
    THEN DBMS_OUTPUT.PUT_LINE('보너스 : ' || BONUS || '%');
    ELSE DBMS_OUTPUT.PUT_LINE('보너스를 지급받지 않는 사원입니다.');
    END IF;
END;
/

-- 사원 번호를 가지고 해당 사원을 조회
-- 이때 사원명, 부서명을 출력하여라
-- 만약 부서가 없다면 부서명을 출력하지 않고,
-- '부서가 없는 사원 입니다'를 출력하고
-- 부서가 있다면 부서명을 출력하여라.
DECLARE
    NAME EMPLOYEE.EMP_NAME%TYPE;
    D_TITLE DEPARTMENT.DEPT_TITLE%TYPE;
BEGIN
    SELECT EMP_NAME, NVL(DEPT_TITLE,'없음')
    INTO NAME, D_TITLE
    FROM EMPLOYEE LEFT JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID)
    WHERE EMP_ID = '&사원번호';
    DBMS_OUTPUT.PUT_LINE('사원명 : ' || NAME);
    IF (D_TITLE='없음')
    THEN DBMS_OUTPUT.PUT_LINE('부서가 없는 사원 입니다');
    ELSE DBMS_OUTPUT.PUT_LINE('부서명 : ' || D_TITLE);
    END IF;
END;
/

-- 문제2
-- 사원 코드를 입력 받았을때 사번, 이름, 부서코드, 부서명, 소속 값을 출력하시오
-- 그때, 소속값은 J1,J2는 임원진, 그외에는 일반직원으로 출력되게 하시오

DECLARE
    ID EMPLOYEE.EMP_ID%TYPE;
    NAME EMPLOYEE.EMP_NAME%TYPE;
    D_CODE EMPLOYEE.DEPT_CODE%TYPE;
    D_TITLE DEPARTMENT.DEPT_TITLE%TYPE;
    J_CODE EMPLOYEE.JOB_CODE%TYPE;
BEGIN
    SELECT EMP_ID,EMP_NAME,DEPT_CODE,DEPT_TITLE,JOB_CODE
    INTO ID, NAME, D_CODE, D_TITLE, J_CODE
    FROM EMPLOYEE LEFT JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID)
    WHERE EMP_ID='&사원코드';
    DBMS_OUTPUT.PUT_LINE('사번 : ' || ID);
    DBMS_OUTPUT.PUT_LINE('이름 : ' || NAME);
    DBMS_OUTPUT.PUT_LINE('부서코드 : ' || D_CODE);
    DBMS_OUTPUT.PUT_LINE('부서명 : ' || D_TITLE);
    IF(J_CODE IN ('J1','J2'))
    THEN DBMS_OUTPUT.PUT_LINE('소속 : 임원진');
    ELSE DBMS_OUTPUT.PUT_LINE('소속 : 일반직원');
    END IF;
END;
/

DECLARE
    ID EMPLOYEE.EMP_ID%TYPE;
    NAME EMPLOYEE.EMP_NAME%TYPE;
    D_CODE EMPLOYEE.DEPT_CODE%TYPE;
    D_TITLE DEPARTMENT.DEPT_TITLE%TYPE;
    J_CODE EMPLOYEE.JOB_CODE%TYPE;
    TEAM VARCHAR2(20);
BEGIN
    SELECT EMP_ID,EMP_NAME,DEPT_CODE,DEPT_TITLE,JOB_CODE
    INTO ID, NAME, D_CODE, D_TITLE, J_CODE
    FROM EMPLOYEE LEFT JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID)
    WHERE EMP_ID='&사원코드';
    DBMS_OUTPUT.PUT_LINE('사번 : ' || ID);
    DBMS_OUTPUT.PUT_LINE('이름 : ' || NAME);
    DBMS_OUTPUT.PUT_LINE('부서코드 : ' || D_CODE);
    DBMS_OUTPUT.PUT_LINE('부서명 : ' || D_TITLE);
    IF(J_CODE IN ('J1','J2'))
    THEN TEAM := '임원진';
    ELSE TEAM := '일반직원';
    END IF;
    DBMS_OUTPUT.PUT_LINE('소속 : ' || TEAM);
END;
/

/*
	사원 번호로 사원을 조회하였을때
	급여레벨 S1,S2 인 경우 고임금
	급여레벨 S3,S4 인 경우 평균임금
	급여레벨 S5,S6인 경우 저임금
	로 출력될 수 있도록 하여라.
*/
DECLARE
    S_LEVEL EMPLOYEE.SAL_LEVEL%TYPE;
BEGIN
    SELECT SAL_LEVEL
    INTO S_LEVEL
    FROM EMPLOYEE
    WHERE EMP_ID='&사번';
    IF (S_LEVEL IN ('S1','S2'))
        THEN DBMS_OUTPUT.PUT_LINE('고임금');
    ELSIF (S_LEVEL IN ('S3','S4'))
        THEN DBMS_OUTPUT.PUT_LINE('평균임금');
    ELSIF (s_LEVEL IN ('S5','S6'))
        THEN DBMS_OUTPUT.PUT_LINE('저임금');
    ELSE DBMS_OUTPUT.PUT_LINE('열정페이...');
    END IF;
END;
/

DECLARE
    ID EMPLOYEE.EMP_ID%TYPE;
    NAME EMPLOYEE.EMP_NAME%TYPE;
    SALARY EMPLOYEE.SALARY%TYPE;
BEGIN
SELECT EMP_ID, EMP_NAME, SALARY
INTO ID,NAME,SALARY
FROM EMPLOYEE
WHERE EMP_ID = '&사번';
DBMS_OUTPUT.PUT_LINE('사번 : ' || ID);
DBMS_OUTPUT.PUT_LINE('이름 : ' || NAME);
DBMS_OUTPUT.PUT_LINE('급여 : ' || SALARY);
SALARY:=SALARY/10000;
IF (SALARY BETWEEN 0 AND 99)
THEN DBMS_OUTPUT.PUT_LINE('등급 : F');
ELSIF (SALARY BETWEEN 100 AND 199)
THEN DBMS_OUTPUT.PUT_LINE('등급 : E');
ELSIF (SALARY BETWEEN 200 AND 299)
THEN DBMS_OUTPUT.PUT_LINE('등급 : D');
ELSIF (SALARY BETWEEN 300 AND 399)
THEN DBMS_OUTPUT.PUT_LINE('등급 : C');
ELSIF (SALARY BETWEEN 400 AND 499)
THEN DBMS_OUTPUT.PUT_LINE('등급 : B');
ELSE DBMS_OUTPUT.PUT_LINE('등급 : A');
END IF;
END;
/

DECLARE
    DATA NUMBER;
BEGIN
    DATA := '&DATA값';
    CASE DATA
        WHEN 1 THEN
            DBMS_OUTPUT.PUT_LINE('안녕하세요');
        WHEN 2 THEN
            DBMS_OUTPUT.PUT_LINE('반갑습니다');
        WHEN 3 THEN
            DBMS_OUTPUT.PUT_LINE('행복하세요');
        ELSE
            DBMS_OUTPUT.PUT_LINE('잘못 입력하셨습니다.');
        END CASE;
END;
/

DECLARE
    ID EMPLOYEE.EMP_ID%TYPE;
    NAME EMPLOYEE.EMP_NAME%TYPE;
    SALARY EMPLOYEE.SALARY%TYPE;
BEGIN
SELECT EMP_ID, EMP_NAME, SALARY
INTO ID,NAME,SALARY
FROM EMPLOYEE
WHERE EMP_ID = '&사번';
DBMS_OUTPUT.PUT_LINE('사번 : ' || ID);
DBMS_OUTPUT.PUT_LINE('이름 : ' || NAME);
DBMS_OUTPUT.PUT_LINE('급여 : ' || SALARY);
CASE FLOOR(SALARY/1000000)
WHEN 0
THEN DBMS_OUTPUT.PUT_LINE('등급 : F');
WHEN 1
THEN DBMS_OUTPUT.PUT_LINE('등급 : E');
WHEN 2
THEN DBMS_OUTPUT.PUT_LINE('등급 : D');
WHEN 3
THEN DBMS_OUTPUT.PUT_LINE('등급 : C');
WHEN 4
THEN DBMS_OUTPUT.PUT_LINE('등급 : B');
ELSE DBMS_OUTPUT.PUT_LINE('등급 : A');
END CASE;
END;
/


--## 실습문제 1 ##
-- 사원번호를 입력받아서 사원의 사번,이름,급여,보너스율을 출력히자.
-- (추가)대표님인 경우, '저희회사 대표님이십니다.'를 출력. (직급코드변수 추가.)
DECLARE
    ID EMPLOYEE.EMP_ID%TYPE;
    NAME EMPLOYEE.EMP_NAME%TYPE;
    SALARY EMPLOYEE.SALARY%TYPE;
    BONUS EMPLOYEE.BONUS%TYPE;
    J_CODE EMPLOYEE.JOB_CODE%TYPE;
BEGIN
    SELECT EMP_ID, EMP_NAME, SALARY, NVL(BONUS,0)*100,JOB_CODE
    INTO ID,NAME,SALARY,BONUS,J_CODE
    FROM EMPLOYEE
    WHERE EMP_ID = '&사원번호';
    DBMS_OUTPUT.PUT_LINE('사번 : ' || ID);
    DBMS_OUTPUT.PUT_LINE('이름 : ' || NAME);
    DBMS_OUTPUT.PUT_LINE('급여 : ' || SALARY);
    DBMS_OUTPUT.PUT_LINE('보너스율 : ' || BONUS);
    IF(J_CODE='J1')
    THEN DBMS_OUTPUT.PUT_LINE('저희회사 대표님입니다.');
    END IF;
END;
/

-- ## 실습문제 2 ##
-- 해당 사원 번호를 입력받아 해당 사원이 소속된 부서에서 
-- 가장 높은 급여를 받고 있는 사원을 출력하여라
-- 출력 값은 
-- 검색된 사원명, 검색된 사원 부서, 
-- 소속부서에서 가장 높은 급여를 받은 사원명 및 급여,부서 정보를 출력 하여라.

DECLARE
    NAME EMPLOYEE.EMP_NAME%TYPE;
    D_TITLE DEPARTMENT.DEPT_TITLE%TYPE;
    NAME1 VARCHAR2(20);
    SALARY NUMBER;
    DEPT VARCHAR2(20);
    
BEGIN
    SELECT EMP_NAME, DEPT_TITLE
    INTO NAME,D_TITLE
    FROM EMPLOYEE JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID)
    WHERE EMP_ID='&사원번호';
    DBMS_OUTPUT.PUT_LINE('### 검색된 사원 정보 ###');
    DBMS_OUTPUT.PUT_LINE('검색된 사원명 : ' || NAME);
    DBMS_OUTPUT.PUT_LINE('소속된 부서명 : ' || D_TITLE);
    
    SELECT *
    INTO NAME1, SALARY, DEPT
    FROM (SELECT EMP_NAME, MAX(SALARY), DEPT_TITLE
    FROM EMPLOYEE JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID)
    WHERE DEPT_TITLE=D_TITLE
    GROUP BY (EMP_NAME,DEPT_TITLE)
    ORDER BY 2 DESC)
       WHERE ROWNUM=1;
       
    
    DBMS_OUTPUT.PUT_LINE('### 검색된 사원 정보 ###');
    DBMS_OUTPUT.PUT_LINE('검색된 사원명 : ' || NAME1);
    DBMS_OUTPUT.PUT_LINE('소속된 부서명 : ' || SALARY);
    DBMS_OUTPUT.PUT_LINE('소속된 부서명 : ' || DEPT);
    
END;
/

SELECT *
FROM (SELECT EMP_NAME, MAX(SALARY), DEPT_TITLE
FROM EMPLOYEE JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID)
WHERE DEPT_TITLE='해외영업1부'
GROUP BY (EMP_NAME,DEPT_TITLE)
ORDER BY 2 DESC)
WHERE ROWNUM=1;
