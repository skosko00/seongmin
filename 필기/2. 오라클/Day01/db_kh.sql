select * from tabs;

select job_name from job;

select * from DEPARTMENT;

select emp_name,email,phone,hire_date from employee;

select emp_name, hire_date, salary from employee;

select emp_name,sal_level from employee where salary>=2500000;

select emp_name,phone from employee where salary>=3500000 and job_code='J3';

select * from employee;

SELECT EMP_NAME,SALARY*12 FROM EMPLOYEE;

SELECT EMP_NAME,SALARY*BONUS FROM EMPLOYEE;

SELECT EMP_NAME AS 이름,((SALARY*BONUS)+SALARY)*12 AS "연봉(원)" FROM EMPLOYEE;

SELECT EMP_NAME AS 이름, SALARY*12 AS "연봉", '원' AS "단위" FROM EMPLOYEE;

SELECT EMP_NAME AS "이름", SALARY*12 AS "연봉", ((salary*bonus)+salary)*12 AS "총수령액",
(((salary*bonus)+salary)*12)-(SALARY*0.03)*12 AS "실수령액"  FROM EMPLOYEE;

SELECT EMP_NAME,NVL(BONUS,0) FROM EMPLOYEE;

SELECT EMP_NAME AS "이름", FLOOR(SYSDATE-HIRE_DATE) AS "근무일수", '일' FROM EMPLOYEE;

SELECT EMP_NAME AS "이름", SALARY AS "월급", NVL(BONUS,0)*100 ||'%' AS "보너스율" FROM EMPLOYEE WHERE (SYSDATE-HIRE_DATE)/365 >= 20;

SELECT * FROM EMPLOYEE;

SELECT DEPT_CODE FROM EMPLOYEE;

SELECT DISTINCT DEPT_CODE FROM EMPLOYEE;

SELECT EMP_NAME, SALARY||'원' AS "월급" FROM EMPLOYEE;

SELECT EMP_NAME, '폰번호 : ' || PHONE AS "휴대폰" FROM EMPLOYEE;

SELECT EMP_NAME, '급여 : ' || SALARY || '/보너스율 : ' || NVL(BONUS,0)*100 ||'%' AS "급여및보너스율" FROM EMPLOYEE;

SELECT EMP_NAME,SALARY
FROM EMPLOYEE
WHERE 3500000<= SALARY AND SALARY <= 6000000;

SELECT EMP_NAME,SALARY
FROM EMPLOYEE
WHERE SALARY BETWEEN 3500000 AND 6000000;

SELECT * FROM EMPLOYEE;

SELECT EMP_NAME, HIRE_DATE AS "고용일"
FROM EMPLOYEE 
WHERE HIRE_DATE BETWEEN '90/01/01' AND '01/01/01';

SELECT * FROM EMPLOYEE WHERE EMP_NAME LIKE '이__';

SELECT * FROM EMPLOYEE WHERE EMP_NAME NOT LIKE '이%';

SELECT * FROM EMPLOYEE WHERE PHONE LIKE '%3%';

SELECT * FROM EMPLOYEE WHERE EMP_NAME LIKE '%연';
SELECT EMP_NAME,PHONE FROM EMPLOYEE WHERE PHONE NOT LIKE '010%';
SELECT * FROM EMPLOYEE WHERE EMAIL LIKE '____/_%' ESCAPE '/' AND 
(DEPT_CODE='D9' OR DEPT_CODE='D6')
AND (HIRE_DATE BETWEEN '90/01/01' AND '00/12/01')
AND SALARY>=2700000;

SELECT * 
FROM EMPLOYEE
WHERE EMAIL LIKE '%s%' ESCAPE '/' AND 
(DEPT_CODE='D9' OR DEPT_CODE='D6')
AND (HIRE_DATE BETWEEN '90/01/01' AND '00/12/01')
AND SALARY>=2700000;

SELECT EMAIL, SALARY FROM EMPLOYEE;


SELECT * FROM EMPLOYEE WHERE BONUS IS NULL;
SELECT * FROM EMPLOYEE WHERE BONUS IS NOT NULL;

SELECT * FROM EMPLOYEE;

SELECT EMP_NAME FROM EMPLOYEE WHERE MANAGER_ID IS NULL AND DEPT_CODE IS NULL;

SELECT EMP_NAME FROM EMPLOYEE WHERE DEPT_CODE IS NULL AND BONUS IS NOT NULL;

SELECT * FROM EMPLOYEE WHERE DEPT_CODE IN ('D6','D9');

SELECT EMP_NAME, SALARY, JOB_CODE FROM EMPLOYEE WHERE JOB_CODE IN ('J7','J2') AND SALARY>2000000;

SELECT * FROM EMPLOYEE ORDER BY 2;

SELECT BONUS*SALARY FROM EMPLOYEE ORDER BY 1 DESC;

SELECT * FROM EMPLOYEE;

SELECT EMP_NAME, EMP_NO, SALARY, HIRE_DATE FROM EMPLOYEE WHERE (SYSDATE-HIRE_DATE)/365 BETWEEN 5 AND 10;

SELECT EMP_NAME, DEPT_CODE, HIRE_DATE, ENT_DATE-HIRE_DATE, ENT_DATE FROM EMPLOYEE WHERE ENT_YN='Y';

SELECT EMP_NAME, SALARY, FLOOR((SYSDATE-HIRE_DATE)/365) AS "근속년수" FROM EMPLOYEE WHERE (SYSDATE-HIRE_DATE)/365>=10 ORDER BY "근속년수" ASC;

SELECT EMP_NAME, EMP_NO, EMAIL, PHONE, SALARY FROM EMPLOYEE
WHERE HIRE_DATE BETWEEN '99/01/01' AND '10/01/01' AND SALARY<=2000000;

SELECT EMP_NAME, EMP_NO, SALARY, NVL(DEPT_CODE,'없음')
FROM EMPLOYEE WHERE (SALARY BETWEEN '2000000' AND '3000000')
AND EMP_NO LIKE '__04__-2%'
ORDER BY 2 DESC;

SELECT EMP_NAME as "이름",
FLOOR((SYSDATE-HIRE_DATE)/1000)*SALARY*0.1 ||'원'AS "특별보너스"
FROM EMPLOYEE
WHERE EMP_NO LIKE '%-1%' AND BONUS IS NULL
ORDER BY EMP_NAME;

SELECT EMAIL, LENGTH(EMAIL) AS "이메일 길이"
FROM EMPLOYEE;



SELECT JOB_NAME FROM JOB;

SELECT * FROM DEPARTMENT;

SELECT EMP_NAME, EMAIL, PHONE, HIRE_DATE FROM EMPLOYEE;

SELECT HIRE_DATE, EMP_NAME, SALARY FROM EMPLOYEE;

SELECT EMP_NAME, SAL_LEVEL FROM EMPLOYEE WHERE SALARY>=2500000;

SELECT EMP_NAME, PHONE FROM EMPLOYEE WHERE SALARY>=3500000 AND JOB_CODE='J3';



SELECT EMP_NAME AS "이름", 
SALARY*12 AS "연봉", 
(SALARY*12)+(SALARY*BONUS*12) AS "총수령액",
(SALARY*12)+(SALARY*BONUS*12)-(SALARY*0.03*12) AS "실수령액"
FROM EMPLOYEE;

SELECT EMP_NAME AS "이름", (SYSDATE-HIRE_DATE) AS "근무 일수" FROM EMPLOYEE;

SELECT EMP_NAME AS "이름", SALARY AS "월급",
NVL(BONUS,0)*100 AS "보너스율", '%'
FROM EMPLOYEE
WHERE (SYSDATE-HIRE_DATE)/365>=20;

SELECT EMP_NAME AS "이름" FROM EMPLOYEE WHERE EMP_NAME LIKE '%연';

SELECT EMP_NAME, PHONE FROM EMPLOYEE WHERE PHONE NOT LIKE '010%';

SELECT * 
FROM EMPLOYEE 
WHERE (EMAIL LIKE '%s%') 
AND (DEPT_CODE='D9' OR DEPT_CODE='D6')
AND (HIRE_DATE BETWEEN '90/01/01' AND '00/12/01')
AND SALARY>=2700000;


SELECT EMP_NAME, LENGTH(EMP_NAME), LENGTHB(EMP_NAME) FROM EMPLOYEE;

SELECT INSTR('Hello World Hi High', 'H',1,1) FROM DUAL;
SELECT INSTR('Hello World Hi High', 'H',1,2) FROM DUAL;
SELECT INSTR('Hello World Hi High', 'H',1,3) FROM DUAL;
SELECT INSTR('Hello World Hi High', 'H',1,4) FROM DUAL;

SELECT INSTR(EMAIL, '@') FROM EMPLOYEE;

SELECT RPAD('mslove',20,'@') FROM DUAL;

SELECT RPAD(EMAIL,20) FROM EMPLOYEE;

SELECT LPAD(EMAIL,20) FROM EMPLOYEE;

SELECT LTRIM('0000000000KHLOVE0','0') FROM DUAL;

SELECT LTRIM('123321KH','123') FROM DUAL;
SELECT LTRIM('12312332112321313121KH','123') FROM DUAL;

SELECT TRIM ('  KH  ') FROM DUAL;

SELECT TRIM('Z'FROM'ZZKHZZ') FROM DUAL;
SELECT TRIM(LEADING'Z'FROM'ZZKHZZ') FROM DUAL;
SELECT TRIM(TRAILING'Z'FROM'ZZKHZZ') FROM DUAL;
SELECT TRIM(BOTH 'Z'FROM'ZZKHZZ') FROM DUAL;

SELECT RTRIM('Hello KH Java',' Java') FROM DUAL;

SELECT LTRIM('Hello KH Java','Hello ') FROM DUAL;

SELECT DEPT_TITLE FROM DEPARTMENT;

SELECT TRIM(TRAILING'부' FROM DEPT_TITLE) FROM DEPARTMENT;

SELECT LTRIM(RTRIM('982341678934509hello89798739273402', '0123456789'),'0123456789') FROM DUAL;

SELECT SUBSTR('SHOWMETHEMONEY',5,2) FROM DUAL;
SELECT SUBSTR('SHOWMETHEMONEY',5) FROM DUAL;
SELECT SUBSTR('SHOWMETHEMONEY',1,6) FROM DUAL;
SELECT SUBSTR('SHOWMETHEMONEY',-8,3) FROM DUAL;
SELECT SUBSTR('SHOWMETHEMONEY',1,6) FROM DUAL;
SELECT SUBSTR('쇼미더머니',1,2) FROM DUAL;

SELECT EMP_NAME,SUBSTR(EMP_NO,1,6) FROM EMPLOYEE;

SELECT DISTINCT SUBSTR(EMP_NAME,1,1) FROM EMPLOYEE ORDER BY SUBSTR(EMP_NAME,1,1) ASC;

SELECT EMP_ID AS "사원번호", EMP_NAME AS "사원명", RPAD(SUBSTR(EMP_NO,1,7),14,'*') AS " 주민번호", SALARY*12 AS "연봉" FROM EMPLOYEE WHERE EMP_NO LIKE '%-1%';

SELECT LOWER('Welecome To My Oracle World') FROM DUAL;
SELECT UPPER('Welecome To My Oracle World') FROM DUAL;
SELECT INITCAP('welecome to my oracle world') FROM DUAL;

SELECT CONCAT(CONCAT('가나다','ABC'),'123') FROM DUAL;
SELECT '가나다'||'ABC'||'123' FROM DUAL;

SELECT replace('Hello World' ,'Hello','Java') FROM DUAL;

SELECT EMP_NAME, EMP_NO, REPLACE(EMAIL, 'kh','iei') FROM EMPLOYEE;

SELECT ABS(+3) FROM DUAL;
SELECT ABS(-3) FROM DUAL;

SELECT MOD(10,3) FROM DUAL;

SELECT TRUNC(123.456,2) FROM DUAL;
SELECT TRUNC(123.456,1) FROM DUAL;
SELECT TRUNC(123.456,0) FROM DUAL;
SELECT TRUNC(123.456,-1) FROM DUAL;
SELECT TRUNC(123.456,-2) FROM DUAL;

SELECT CEIL(123.456) FROM DUAL;

SELECT CURRENT_DATE FROM DUAL;
SELECT LOCALTIMESTAMP FROM DUAL;
SELECT CURRENT_TIMESTAMP FROM DUAL;


SELECT EMP_NAME, FLOOR(MONTHS_BETWEEN(SYSDATE, HIRE_DATE)) AS "개월",
HIRE_DATE,
SYSDATE
FROM EMPLOYEE;

SELECT EMP_NAME, HIRE_DATE, ADD_MONTHS(HIRE_DATE,6)
FROM EMPLOYEE;

SELECT SYSDATE AS "재입대일",
ADD_MONTHS(SYSDATE,18) AS "제대일자",
(ADD_MONTHS(SYSDATE,18)-SYSDATE)*3 AS "짬밥그릇"
FROM DUAL;

SELECT SYSDATE,NEXT_DAY(SYSDATE,'수요일') FROM DUAL;
SELECT SYSDATE,NEXT_DAY(SYSDATE,'수') FROM DUAL;
SELECT SYSDATE,NEXT_DAY(SYSDATE,4) FROM DUAL;

SELECT LAST_DAY('20/02/01') FROM DUAL;

SELECT EXTRACT (YEAR FROM SYSDATE) FROM DUAL;
SELECT EXTRACT (MONTH FROM SYSDATE) FROM DUAL;
SELECT EXTRACT (DAY FROM SYSDATE) FROM DUAL;

SELECT EMP_NAME AS "이름",
EXTRACT(YEAR FROM HIRE_DATE)||'년 '
|| EXTRACT(MONTH FROM HIRE_DATE) || '월 '
|| EXTRACT(DAY FROM HIRE_DATE) || '일' AS "입사일",
CEIL(MONTHS_BETWEEN(SYSDATE,HIRE_DATE)/365) AS "년차"
FROM EMPLOYEE
ORDER BY "년차";

SELECT EMP_NAME AS "이름",
HIRE_DATE AS "입사일",
(LAST_DAY(HIRE_DATE)+1) AS "기준일",
ADD_MONTHS((LAST_DAY(HIRE_DATE)+1),6) AS "기준일+6",
EXTRACT (MONTH FROM ADD_MONTHS((LAST_DAY(HIRE_DATE)+1),6))||'월' AS "기준달(월)"
FROM EMPLOYEE
ORDER BY "입사일";

SELECT TO_CHAR(SYSDATE, 'YYYY-MM-DD') FROM DUAL;
SELECT TO_CHAR(SYSDATE, 'YYYY/MON/DD/DAY') FROM DUAL;
SELECT TO_CHAR(SYSDATE, 'YYYY/MONTH/DD/DAY') FROM DUAL;
SELECT TO_CHAR(SYSDATE, 'YYYY/MM/DD/HH12"시"MI"분"SS"초"') FROM DUAL;
SELECT TO_CHAR(SYSDATE, 'YYYY/MM/DD/HH24"시"MI"분"SS"초"') FROM DUAL;

SELECT EMP_NAME AS "이름", TO_CHAR(HIRE_DATE, 'YYYY/MM/DD(DY)') AS "고용일" FROM EMPLOYEE;

SELECT TO_CHAR(100000000,'999,999,999') FROM DUAL;
SELECT TO_CHAR(100000000,'$999,999,999') FROM DUAL;
SELECT TO_CHAR(100000000,'l999,999,999') FROM DUAL;
SELECT TO_CHAR(100000000,'999,999,999.999') FROM DUAL;

SELECT TO_DATE(20010101,'YYYY/MM/DD') FROM DUAL;
SELECT TO_CHAR(TO_DATE(20010101,'YYYY/MM/DD'),'YYYY/MM/DD') FROM DUAL;
SELECT TO_CHAR(TO_DATE(20010101,'YYYY/MM/DD'),'YYYY/MM/DD HH24:MI:SS') FROM DUAL;


SELECT TO_CHAR(TO_NUMBER('1,000,000','9,999,999')
-TO_NUMBER('500,000','999,999'),'999,999') FROM DUAL;

SELECT TO_NUMBER('A1,000,000','999,999,999') FROM DUAL;
SELECT TO_NUMBER('$1,000,000','999,999,999') FROM DUAL;
SELECT TO_NUMBER('$1,000,000','$999,999,999') FROM DUAL;

SELECT NVL(BONUS,0)
FROM EMPLOYEE;

SELECT EMP_NAME, DECODE(SUBSTR(EMP_NO,8,1),'1','남자','2','여자')
FROM EMPLOYEE;

SELECT EMP_NAME, DECODE(SUBSTR(EMP_NO,1,2),
'61','소띠',
'62','호랑이띠',
'63','토끼띠',
'64','용띠',
'65','뱀띠',
'66','말띠',
'67','양띠',
'68','원숭이띠',
'69','닭띠')
FROM EMPLOYEE
WHERE SUBSTR(EMP_NO,1,2) BETWEEN 60 AND 69;

SELECT EMP_NAME, CASE WHEN SUBSTR(EMP_NO,8,1) = 1 THEN '남자'
WHEN SUBSTR(EMP_NO,8,1) = 2 THEN '여자'
END
FROM EMPLOYEE;

SELECT EMP_NAME,
CASE WHEN SUBSTR(EMP_NO,3,2) BETWEEN 3 AND 5 THEN '봄 태생'
WHEN SUBSTR(EMP_NO,3,2) BETWEEN 6 AND 8 THEN '여름 태생'
WHEN SUBSTR(EMP_NO,3,2) BETWEEN 9 AND 11 THEN '가을 태생'
ELSE '겨울 태생'
END
FROM EMPLOYEE;

SELECT SUM(SALARY) FROM EMPLOYEE;
SELECT AVG(SALARY) FROM EMPLOYEE;
SELECT SUM(SALARY),COUNT(*) FROM EMPLOYEE;
SELECT MIN(SALARY), MAX(SALARY) FROM EMPLOYEE;

SELECT EMP_NAME AS "직원명",
EMAIL AS "이메일",
LENGTH(EMAIL) AS "이메일길이"
FROM EMPLOYEE;

SELECT EMP_NAME AS "이름",
SUBSTR(EMAIL,1,INSTR(EMAIL,'@')-1)
FROM EMPLOYEE;

SELECT EMP_NAME AS "직원명",
SUBSTR(EMP_NO,1,2) AS "년생",
NVL(BONUS,0) AS "보너스"
FROM EMPLOYEE
WHERE SUBSTR(EMP_NO,1,2) BETWEEN 60 AND 69;

SELECT COUNT(PHONE)||'명'
FROM EMPLOYEE
WHERE PHONE NOT LIKE '010%';

SELECT EMP_NAME AS "직원명",
TO_CHAR(HIRE_DATE,'YYYY"년"MON') AS "입사년월"
FROM EMPLOYEE;

select emp_name as "직원명",
RPAD(SUBSTR(EMP_NO,1,8),14,'*')
FROM EMPLOYEE;

SELECT * FROM EMPLOYEE;

SELECT EMP_NAME AS "직원명",
JOB_CODE AS "직급코드",
TO_CHAR(((NVL(BONUS,0)*SALARY*12)+SALARY*12),'L999,999,999')||'원' AS "연봉"
FROM EMPLOYEE;

SELECT EMP_ID AS "사번",
EMP_NAME AS "사원명",
DEPT_CODE AS "부서코드",
HIRE_DATE AS "입사일"
FROM EMPLOYEE
WHERE (DEPT_CODE = 'D5' OR DEPT_CODE = 'D9')
AND EXTRACT(YEAR FROM HIRE_DATE)='2004';

SELECT EMP_NAME AS "직원명",
HIRE_DATE AS "입사일",
FLOOR((SYSDATE-HIRE_DATE)) AS "근무일수"
FROM EMPLOYEE;

SELECT EMP_NO
FROM EMPLOYEE;

SELECT MAX(TO_CHAR(EXTRACT(YEAR FROM SYSDATE)-LPAD(SUBSTR(EMP_NO,1,2),4,19))) AS "나이 많음", 
MIN(TO_CHAR(EXTRACT(YEAR FROM SYSDATE)-LPAD(SUBSTR(EMP_NO,1,2),4,19))) AS "나이 적음"
FROM EMPLOYEE;

SELECT EMP_NAME AS "이름",
DEPT_CODE AS "부서코드",
CASE WHEN DEPT_CODE='D5'OR DEPT_CODE='D6' OR DEPT_CODE='D9' THEN '야근'
ELSE '야근없음' 
END
AS "야근유무"
FROM EMPLOYEE
ORDER BY 2;

SELECT DEPT_CODE, SUM(SALARY), FLOOR(AVG(SALARY))
FROM EMPLOYEE
GROUP BY DEPT_CODE;

SELECT JOB_CODE, SUM(SALARY), SUM(SALARY)*12
FROM EMPLOYEE
GROUP BY JOB_CODE;

SELECT DEPT_CODE, SUM(SALARY), FLOOR(AVG(SALARY)), COUNT(*)
FROM EMPLOYEE
GROUP BY DEPT_CODE
ORDER BY 1;

SELECT DEPT_CODE, COUNT(*)
FROM EMPLOYEE
WHERE BONUS IS NOT NULL
GROUP BY DEPT_CODE
ORDER BY 1;

SELECT JOB_CODE, COUNT(*), FLOOR(AVG(SALARY))
FROM EMPLOYEE
WHERE JOB_CODE NOT LIKE 'J1'
GROUP BY JOB_CODE;

SELECT DEPT_CODE, 
DECODE(SUBSTR(EMP_NO,8,1),'1','남자','여자')AS "성별",
COUNT(*) AS "인원"
FROM EMPLOYEE
GROUP BY DEPT_CODE, SUBSTR(EMP_NO,8,1)
ORDER BY DEPT_CODE;

SELECT DEPT_CODE, FLOOR(AVG(SALARY))
FROM EMPLOYEE
GROUP BY DEPT_CODE
HAVING FLOOR(AVG(SALARY))>=3000000;

-- 부서별 인원 정보 출력
SELECT DEPT_CODE,COUNT(*)
FROM EMPLOYEE
GROUP BY DEPT_CODE;

-- 집계를 하고 싶다면???
SELECT DEPT_CODE,COUNT(*)
FROM EMPLOYEE
GROUP BY ROLLUP(DEPT_CODE)
ORDER BY 1;

SELECT DEPT_CODE,COUNT(*)
FROM EMPLOYEE
GROUP BY CUBE(DEPT_CODE)
ORDER BY 1;

-- 부서내 평균연봉과 집계
SELECT DEPT_CODE, SUM(SALARY)
FROM EMPLOYEE
GROUP BY ROLLUP(DEPT_CODE);

-- 직급별 평균연봉과 집계
SELECT JOB_CODE, SUM(SALARY)
FROM EMPLOYEE
GROUP BY ROLLUP(JOB_CODE);

-- 이번에는 부서내 직급별 인원 정보를 출력하고 싶다면?
SELECT DEPT_CODE, JOB_CODE, COUNT(*)
FROM EMPLOYEE
GROUP BY DEPT_CODE, JOB_CODE
ORDER BY 1;

-- 집계를 하고 싶다면? (ROLLUP을 사용)
SELECT DEPT_CODE, JOB_CODE, COUNT(*)
FROM EMPLOYEE
GROUP BY ROLLUP(DEPT_CODE, JOB_CODE)
ORDER BY 1;

-- ROLLUP을 사용하게 되면 부서별 집계 및 총 집계를 확인 할 수 있음
-- ROLLUP은 가장 먼저 지정한 그룹별 집계와 총 집계를 구하는 함수

-- 만약 부서별이 아닌 직급별 집계와 총 집계를 보고 싶다면??
-- JOB_CODE 위치와 DEPT_CODE 위치를 바꾸어 주면 됨

SELECT JOB_CODE, DEPT_CODE, COUNT(*)
FROM EMPLOYEE
GROUP BY ROLLUP(JOB_CODE, DEPT_CODE)
ORDER BY 1;

-- 내가 보고 싶은건!
-- 직급별 집계와 직급별 집계 및 총 집계

SELECT DEPT_CODE, JOB_CODE, COUNT(*)
FROM EMPLOYEE
GROUP BY CUBE(DEPT_CODE, JOB_CODE)
ORDER BY 1;

-- CUBE 는 그룹으로 지정된 모든 그룹에 대한 집계와 총 집계를 구함
-- 즉, 위에 코드를 보면 부서별 집계 이후에 직급별 집계를 진행하고 마지막으로
-- 총 집계를 구하게 됨

-- 직관적으로 이야기 하면!
-- ROLLUP과 CUBE는 집계용 함수
-- ROLLUP은 가장 먼저 지정한 그룹별 집계 및 총 집계
-- CUBE는 그룹으로 지정된 모든 그룹에 대한 그룹별 집계 및 총 집계

-- 문제1 부서내 직급별 급여 정보 출력 및 각 부서별 집계
SELECT DEPT_CODE, JOB_CODE, SUM(SALARY)
FROM EMPLOYEE
GROUP BY ROLLUP(DEPT_CODE, JOB_CODE)
ORDER BY 1;

-- 문제2 부서내 직급별 급여 정보 출력 및 각 부서별 집계 및 직급별 집계
SELECT DEPT_CODE,COUNT(*)
FROM EMPLOYEE
GROUP BY ROLLUP(DEPT_CODE)
ORDER BY 1;

SELECT DEPT_CODE, COUNT(*), GROUPING(DEPT_CODE)
FROM EMPLOYEE
GROUP BY ROLLUP(DEPT_CODE);

SELECT DEPT_CODE, COUNT(*), DECODE(GROUPING(DEPT_CODE),1,'총 집계','부서별')
FROM EMPLOYEE
GROUP BY ROLLUP(DEPT_CODE);

SELECT DECODE(GROUPING(DEPT_CODE),0,NVL(DEPT_CODE,'부서없음'),DEPT_CODE,1,'총 집계') AS "부서코드",COUNT(*)
FROM EMPLOYEE
GROUP BY ROLLUP(DEPT_CODE);

SELECT DEPT_CODE,JOB_CODE, COUNT(*),
CASE WHEN GROUPING(DEPT_CODE)=0 AND GROUPING(JOB_CODE) =1 THEN '부서별 집계'
WHEN GROUPING(DEPT_CODE)=1 AND GROUPING(JOB_CODE) =0 THEN '직급별 집계'
WHEN GROUPING(DEPT_CODE)=1 AND GROUPING(JOB_CODE) =1 THEN '총 집계'
ELSE ' '
END AS "집계 현황"
FROM EMPLOYEE
GROUP BY CUBE(DEPT_CODE,JOB_CODE)
ORDER BY 1;

SELECT DEPT_CODE,JOB_CODE, COUNT(*),
GROUPING(DEPT_CODE),GROUPING(JOB_CODE)
FROM EMPLOYEE
GROUP BY CUBE(DEPT_CODE,JOB_CODE)
ORDER BY 1;

SELECT * FROM EMPLOYEE;
SELECT * FROM DEPARTMENT;
SELECT * FROM JOB;

SELECT EMP_NAME, DEPT_CODE
FROM EMPLOYEE
WHERE EMP_NAME='선동일';

SELECT DEPT_TITLE
FROM DEPARTMENT
WHERE DEPT_ID='D9';

SELECT EMP_NAME,DEPT_CODE,DEPT_TITLE
FROM EMPLOYEE,DEPARTMENT
WHERE DEPT_ID = DEPT_CODE AND EMP_NAME='선동일';

SELECT EMP_NAME,DEPT_CODE,DEPT_TITLE
FROM DEPARTMENT,EMPLOYEE
WHERE DEPT_ID = DEPT_CODE;

SELECT EMP_NAME, DEPT_TITLE, DEPT_CODE, DEPT_ID
FROM EMPLOYEE INNER JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);

SELECT EMP_NAME, DEPT_TITLE, DEPT_CODE, DEPT_ID
FROM EMPLOYEE LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);

SELECT EXTRACT(YEAR FROM HIRE_DATE) AS "입사년도",
COUNT(*) AS "인원"
FROM EMPLOYEE
WHERE JOB_CODE != 'J1'
GROUP BY EXTRACT(YEAR FROM HIRE_DATE)
ORDER BY 1;

SELECT CASE WHEN GROUPING(DEPT_CODE)=1 THEN '합계'
ELSE NVL(DEPT_CODE,'인턴') END AS "부서코드",
CASE WHEN GROUPING(JOB_CODE)=1 THEN '합계'
ELSE JOB_CODE END AS "직급코드",
COUNT(*)||'명' AS "명",
CASE WHEN GROUPING(DEPT_CODE)=0 AND GROUPING(JOB_CODE)=0 THEN '그룹별 합계'
WHEN GROUPING(DEPT_CODE)=1 AND GROUPING(JOB_CODE)=0 THEN '직급별합계'
WHEN GROUPING(DEPT_CODE)=1 AND GROUPING(JOB_CODE)=1 THEN '총합계'
ELSE '부서별 합계'
END AS 구분
FROM EMPLOYEE
GROUP BY CUBE(DEPT_CODE, JOB_CODE)
ORDER BY 1,2;

SELECT EMP_NAME, DEPT_CODE, DEPT_TITLE
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);

SELECT EMP_NAME, DEPT_CODE, DEPT_TITLE
FROM EMPLOYEE
FULL JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);

SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE
CROSS JOIN DEPARTMENT
ORDER BY 1;

SELECT EMP_ID, EMP_NAME, SALARY, E.SAL_LEVEL, S.SAL_LEVEL
FROM EMPLOYEE E
JOIN SAL_GRADE S ON (SALARY BETWEEN 3000000 AND 4000000)
WHERE E.SAL_LEVEL = S.SAL_LEVEL
ORDER BY 1;

SELECT * FROM EMPLOYEE;

-- 만약 사원들 마다 관리자 ID를 확인하고 싶다면?

SELECT EMP_ID, EMP_NAME,MANAGER_ID
FROM EMPLOYEE;

SELECT E.EMP_ID, E.EMP_NAME, E.MANAGER_ID, E2.EMP_ID AS "매니저ID", E2.EMP_NAME AS "매니저 이름"
FROM EMPLOYEE E
JOIN EMPLOYEE E2 ON (E.MANAGER_ID = E2.EMP_ID);

SELECT E.EMP_ID, E.EMP_NAME, E.MANAGER_ID, E2.EMP_ID AS "매니저ID", E2.EMP_NAME AS "매니저 이름"
FROM EMPLOYEE E, EMPLOYEE E2
WHERE E.MANAGER_ID = E2.EMP_ID;

SELECT E.EMP_NAME, E2.EMP_NAME, E2.SALARY, E2.JOB_CODE
FROM EMPLOYEE E, EMPLOYEE E2
WHERE E.EMP_ID=E2.MANAGER_ID
ORDER BY 1;

SELECT * FROM LOCATION;
SELECT * FROM DEPARTMENT;

--DEPARTMENT 테이블과 LOCATION 테이블을 조인해서
--DEPARTMENT의 LOCATION_ID에 따른 LOCAL_NAME을 보고 싶다면?

SELECT LOCAL_NAME
FROM DEPARTMENT JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE);

SELECT EMP_ID, EMP_NAME, DEPT_CODE, DEPT_TITLE, LOCATION_ID, LOCAL_NAME
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE);

-- 각 사원들의 이름,나이,부서명,직책명을 출력하여라
-- (부서코두,직책코드가 아닌 부서명과 직책명을 출력하여야 함)

SELECT * FROM DEPARTMENT;
SELECT * FROM JOB;
SELECT * FROM EMPLOYEE;

SELECT EMP_NAME AS "이름",
EXTRACT(YEAR FROM SYSDATE)-('19'||SUBSTR(EMP_NO,1,2)) AS "나이",
NVL(DEPT_TITLE,'부서없음') AS "부서명",
JOB_NAME AS "직책명"
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN JOB ON (JOB.JOB_CODE = EMPLOYEE.JOB_CODE)
ORDER BY 2 DESC;

SELECT TO_CHAR(TO_DATE(20201225, 'YYYY/MM/DD'),'DAY')
FROM DUAL;

SELECT EMP_NAME AS "사원명",
EMP_NO AS "주민번호",
DEPT_TITLE AS "부서",
JOB_NAME AS "직급"
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID)
JOIN JOB USING(JOB_CODE)
WHERE SUBSTR(EMP_NO,1,2) BETWEEN 70 AND 79
AND SUBSTR(EMP_NO,8,1)=2
AND EMP_NAME LIKE '전%';

SELECT EMP_ID AS "사원번호",
EMP_NAME AS "사원명",
DEPT_TITLE AS "부서"
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID)
WHERE EMP_NAME LIKE '%형%';

SELECT * FROM DEPARTMENT;

SELECT EMP_NAME AS "사원명",
EMPLOYEE.JOB_CODE AS "직급",
JOB_NAME AS "부서코드",
DEPT_TITLE AS "부서명"
FROM EMPLOYEE, DEPARTMENT, JOB
WHERE DEPT_ID = DEPT_CODE AND
EMPLOYEE.JOB_CODE = JOB.JOB_CODE AND
DEPT_TITLE LIKE '해외영업%';

SELECT EMP_NAME AS "사원명",
BONUS AS "보너스 포인트",
DEPT_TITLE AS "부서명",
LOCAL_NAME AS "근무지역"
FROM EMPLOYEE E, DEPARTMENT D, LOCATION L
WHERE E.DEPT_CODE = D.DEPT_ID(+) AND
D.LOCATION_ID = LOCAL_CODE(+) AND
BONUS IS NOT NULL;

SELECT EMP_NAME AS "사원명",
JOB_NAME AS "직급",
DEPT_TITLE AS "부서",
LOCAL_NAME AS "근무지역"
FROM EMPLOYEE E, JOB J, DEPARTMENT D, LOCATION L
WHERE E.DEPT_CODE = D.DEPT_ID AND
E.JOB_CODE = J.JOB_CODE AND
D.LOCATION_ID = LOCAL_CODE AND
DEPT_CODE = 'D2';

SELECT EMP_NAME AS "사원명",
JOB_NAME AS "직급명",
SALARY AS "급여",
SALARY*12 AS "연봉"
FROM EMPLOYEE
JOIN JOB USING (JOB_CODE)
JOIN SAL_GRADE USING(SAL_LEVEL)
WHERE SALARY>MAX_SAL-500000;

SELECT EMP_NAME AS "사원",
DEPT_TITLE AS "부서",
LOCAL_NAME AS "지역",
NATIONAL_NAME AS "국가"
FROM EMPLOYEE 
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE)
JOIN NATIONAL USING(NATIONAL_CODE)
WHERE NATIONAL_CODE IN ('KO','JP');

SELECT E.EMP_NAME AS "사원",
DEPT_TITLE AS "부서",
E2.EMP_NAME AS "동료"
FROM EMPLOYEE E, EMPLOYEE E2, DEPARTMENT D
WHERE E.DEPT_CODE = D.DEPT_ID AND
E.DEPT_CODE = E2.DEPT_CODE
ORDER BY 1;

SELECT EMP_NAME AS "사원",
JOB_NAME AS "직급",
SALARY AS "급여"
FROM EMPLOYEE
JOIN JOB USING(JOB_CODE)
WHERE JOB_NAME IN ('차장','사원') AND
BONUS IS NULL
ORDER BY 2;

SELECT DECODE(ENT_YN,'Y','퇴사','재직') AS "재직여부",
COUNT(*) AS "인원수"
FROM EMPLOYEE
GROUP BY ENT_YN;

-- 부서코드가 D5인 사람의 EMP_ID,EMP_NAME,DEPT_CODE,SALARY 를 출력

SELECT EMP_ID,EMP_NAME,DEPT_CODE,SALARY
FROM EMPLOYEE
WHERE DEPT_CODE='D5';
-- 결과가 6명이 출력 됨

-- 급여가 300만원보다 큰 사람의 EMP_ID, EMP_NAME, DEPT_CODE, SALARY를 출력
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE SALARY>3000000;

-- 결과는 8명이 출력 됨

-- UNION 결과
SELECT EMP_ID,EMP_NAME,DEPT_CODE,SALARY
FROM EMPLOYEE
WHERE DEPT_CODE='D5'
UNION
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE SALARY>3000000
ORDER BY 1;

-- UNION ALL 결과
SELECT EMP_ID,EMP_NAME,DEPT_CODE,SALARY
FROM EMPLOYEE
WHERE DEPT_CODE='D5'
UNION ALL
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE SALARY>3000000
ORDER BY 1;

-- INTERSECT 결과
SELECT EMP_ID,EMP_NAME,DEPT_CODE,SALARY
FROM EMPLOYEE
WHERE DEPT_CODE='D5'
INTERSECT
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE SALARY>3000000
ORDER BY 1;

-- MINUS 결과
SELECT EMP_ID,EMP_NAME,DEPT_CODE,SALARY
FROM EMPLOYEE
WHERE DEPT_CODE='D5'
MINUS
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE SALARY>3000000
ORDER BY 1;

-- 전지연의 관리자 이름을 출력!
-- SELF 조인 안하고!
-- 1. 전지연의 관리자 ID 추출
SELECT MANAGER_ID
FROM EMPLOYEE
WHERE EMP_NAME = '전지연';

-- 2. 추출한 214번을 가지고 이름을 추출
SELECT EMP_NAME
FROM EMPLOYEE
WHERE EMP_ID = '214';


SELECT EMP_NAME AS "관리자 이름"
FROM EMPLOYEE
WHERE EMP_ID = (SELECT MANAGER_ID FROM EMPLOYEE WHERE EMP_NAME = '전지연');

-- 전 직원의 평균 급여보다 많은 급여를 받고 있는 직원의 사번, 이름, 직급코드, 급여를 조회하시오

SELECT EMP_ID, EMP_NAME, JOB_CODE, SALARY
FROM EMPLOYEE
WHERE SALARY>(SELECT FLOOR(AVG(SALARY)) FROM EMPLOYEE);

SELECT EMP_NAME FROM EMPLOYEE;

-- 예제
-- 윤은해와 급여가 같은 사원을 검색하여
-- 사원번호, 사원, 이름, 급여를 출력하여라.
-- (단, 윤은해는 출력하지 않는다).

SELECT EMP_ID, EMP_NAME, SALARY
FROM EMPLOYEE
WHERE SALARY = (SELECT SALARY FROM EMPLOYEE WHERE EMP_NAME = '윤은해') AND
EMP_NAME != '윤은해';

SELECT EMP_ID, EMP_NAME, SALARY
FROM EMPLOYEE
WHERE SALARY=(SELECT MAX(SALARY) FROM EMPLOYEE) OR
SALARY=(SELECT MIN(SALARY) FROM EMPLOYEE);

SELECT DEPT_CODE, EMP_ID, EMP_NAME,SALARY
FROM EMPLOYEE
WHERE SALARY>(SELECT AVG(SALARY) FROM EMPLOYEE WHERE DEPT_CODE = 'D5') AND
DEPT_CODE IN ('D1','D2');

SELECT EMP_NAME, DEPT_CODE
FROM EMPLOYEE
WHERE DEPT_CODE IN (SELECT DEPT_CODE
FROM EMPLOYEE
WHERE EMP_NAME IN ('송종기','박나라'));

--@ 실습문제
-- 차태연, 전지연, 사원의 급여등급(EMPLOYEE테이블의 SAL_LEVEL컬럼)과
-- 같은 사원의 직급명, 사원명을 출력
SELECT * FROM SAL_GRADE;
SELECT * FROM LOCATION;
SELECT * FROM EMPLOYEE;
SELECT * FROM DEPARTMENT;
SELECT * FROM JOB;
SELECT * FROM NATIONAL;

SELECT JOB_NAME AS "직급명",
EMP_NAME AS "사원명"
FROM EMPLOYEE JOIN JOB USING (JOB_CODE)
WHERE SAL_LEVEL IN (SELECT SAL_LEVEL FROM EMPLOYEE WHERE EMP_NAME IN ('차태연','전지연')) AND
EMP_NAME NOT IN ('차태연','전지연');

--@ 실습문제
--1. 직급이 대표, 부사장이 아닌 모든 사원을
-- 이름,부서명,직급코드를 출력하고 부서별로 출력

SELECT EMP_NAME, DEPT_TITLE, JOB_CODE
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID)
WHERE EMP_NAME NOT IN (SELECT EMP_NAME FROM EMPLOYEE JOIN JOB USING(JOB_CODE) WHERE JOB_NAME IN ('대표','부사장'));

SELECT EMP_NAME FROM EMPLOYEE JOIN JOB USING(JOB_CODE) WHERE JOB_NAME IN ('대표','부사장');


SELECT EMP_NAME, SALARY
FROM EMPLOYEE
WHERE SALARY < ANY (2000000,5000000);

-- ex) J3 코드를 가진 사람의 급여들을 가지고 비교

SELECT SALARY
FROM EMPLOYEE
WHERE JOB_CODE = 'J3';

-- J3 코드를 가진 사람들의 급여 중에서 가장 작은 사람보다 큰 급여들을 출력

SELECT EMP_NAME, SALARY
FROM EMPLOYEE
WHERE SALARY > ANY (SELECT SALARY
FROM EMPLOYEE
WHERE JOB_CODE = 'J3');


-- 'D1' 또는 'D5' 부서코드를 가지고 있는 사원들의
-- 급여 중에서  가장 높은 급여보다 작은 모든 사원들의 이름, 급여,부서코드를 출력하여라.

SELECT EMP_NAME, SALARY, DEPT_CODE
FROM EMPLOYEE
WHERE SALARY < ANY (SELECT SALARY
FROM EMPLOYEE
WHERE DEPT_CODE IN ('D1','D5'));

-- < ANY (OR)
-- 서브쿼리에서 나온 결과물 중에서
-- 하나라도 작다면!

-- 부서별 평균 급여를 조사하였을 때 가장 낮은 부서의 급여보다
-- 높거나 같은 모든 사람들의 이름,급여,부서명을 출력하시오
SELECT EMP_NAME, SALARY, DEPT_TITLE
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE SALARY > ANY (SELECT AVG(SALARY) FROM EMPLOYEE GROUP BY DEPT_CODE);

SELECT EMP_NAME, SALARY
FROM EMPLOYEE
WHERE SALARY < ALL(2000000, 5000000);

-- 실습 1
-- 'D2'부서있는 사원들의 급여보다 적은 급여를 받는 모든 사원을 조회
SELECT EMP_NAME, SALARY
FROM EMPLOYEE
WHERE SALARY < ALL(SELECT SALARY FROM EMPLOYEE WHERE DEPT_CODE='D2');

-- 보너스 포인트 3.0 이상인 사원들이 있다면
-- 모든 사원의 정보를 출력해 주어라.
SELECT EMP_NAME,BONUS
FROM EMPLOYEE
WHERE EXISTS 
(SELECT NULL
FROM EMPLOYEE
WHERE NVL(BONUS,0) >= 0.3);

-- 보너스율이 1 이상인 사원이 없다면
-- 모든 사원의 이름, 급여를 출력하되 10% 인상된 급여로 출력하여라
-- 보너스율이 1 이상인 사원이 있다면
-- 출력하지 말아라.

SELECT EMP_NAME, SALARY*1.1
FROM EMPLOYEE
WHERE NOT EXISTS
(SELECT NULL
FROM EMPLOYEE
WHERE NVL(BONUS,0) >= 1);

-- 회사에서 퇴사한 여직원(1명만 있을때를 가정)과 같은 부서 및 직급인 사원 검색 하시오
-- (이름,직급,부서,입사일을 출력)

SELECT EMP_NAME,JOB_CODE,DEPT_CODE,HIRE_DATE
FROM EMPLOYEE
WHERE (DEPT_CODE,JOB_CODE) IN
(SELECT DEPT_CODE,JOB_CODE
FROM EMPLOYEE
WHERE ENT_YN = 'Y' -- ENT_YN 값이 Y이면 퇴사한 직원
AND SUBSTR(EMP_NO,8,1)=2);

SELECT * FROM TABS;
SELECT * FROM LOCATION;
SELECT * FROM EMPLOYEE;
SELECT * FROM DEPARTMENT;

-- @실습문제
-- 기술지원부이면서 급여가 2,000,000원
-- 직원의 이름,부서코드,급여,부서의지역명을 출력하시오
SELECT EMP_NAME,DEPT_CODE,SALARY, LOCAL_NAME
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE)
WHERE (DEPT_TITLE,SALARY) IN (SELECT DEPT_TITLE,SALARY
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE DEPT_TITLE = '기술지원부' AND SALARY = 2000000);

SELECT EMP_NAME, DEPT_CODE, SALARY, LOCAL_NAME
FROM EMPLOYEE, LOCATION
WHERE (DEPT_CODE,LOCAL_CODE) IN
(SELECT DEPT_ID,LOCATION_ID
FROM DEPARTMENT
WHERE DEPT_TITLE='기술지원부')
AND SALARY = 2000000;

SELECT EMP_NAME, DEPT_CODE, SALARY, LOCAL_NAME
FROM EMPLOYEE
JOIN LOCATION ON (DEPT_CODE,LOCAL_CODE)
IN (SELECT DEPT_ID,LOCATION_ID
FROM DEPARTMENT
WHERE DEPT_TITLE='기술지원부')
AND SALARY = 2000000;


-- 직급별 최소 급여를 받는 직원의 이름, 사번, 부서코드, 입사일, 연봉을 출력

SELECT EMP_NAME,JOB_CODE,DEPT_CODE,HIRE_DATE,SALARY
FROM EMPLOYEE
WHERE (JOB_CODE,SALARY)
IN (SELECT JOB_CODE, MIN(SALARY)
FROM EMPLOYEE
GROUP BY JOB_CODE);

SELECT JOB_CODE, MIN(SALARY)
FROM EMPLOYEE
GROUP BY JOB_CODE;


-- 상관 쿼리 예시
-- 관리자가 있는 사원들 중 관리자의 사번이 EMPLOYEE 테이블에 존재하는
-- 직원의 사번과 같을 때 직원의 사번, 이름, 소속부서, 관리자 사번을 조회 하시오
SELECT EMP_ID,EMP_NAME,DEPT_CODE,MANAGER_ID
FROM EMPLOYEE E
WHERE EXISTS (SELECT NULL
FROM EMPLOYEE E2
WHERE E.MANAGER_ID = E2.EMP_ID);


SELECT E.EMP_ID, E.EMP_NAME, E.MANAGER_ID,
	NVL((SELECT E2.EMP_NAME
		FROM EMPLOYEE E2
		WHERE E.MANAGER_ID = E2.EMP_ID),'없음') AS "관리자명"
FROM EMPLOYEE E
ORDER BY 1;

-- @실습문제
--1. 사원명, 부서코드, 부서별 평균임금을 스칼라서브쿼리를 이용해서 출력
SELECT E.EMP_NAME,E.DEPT_CODE,
(SELECT FLOOR(AVG(E2.SALARY))
FROM EMPLOYEE E2
WHERE NVL(E.DEPT_CODE,'N') = NVL(E2.DEPT_CODE,'N')
) AS "부서별 평균임금"
FROM EMPLOYEE E;

SELECT EMP_NAME, JOB_CODE, SALARY
FROM EMPLOYEE E1
WHERE SALARY >= (SELECT AVG(SALARY)
		FROM EMPLOYEE E2
		WHERE E2.JOB_CODE = E1.JOB_CODE)
ORDER BY 2;


SELECT EMP_NAME, SALARY, DEPT_CODE
FROM EMPLOYEE
WHERE SALARY >= 3000000;

SELECT *
FROM (SELECT *
FROM (SELECT EMP_NAME, SALARY, DEPT_CODE
FROM EMPLOYEE
WHERE SALARY >= 3000000)
WHERE DEPT_CODE IN ('D9','D5'));

-- ex) 회사에서 급여가 가장 높은 사람 5명을 검색하시오
SELECT ROWNUM,뷰.*
FROM 
(SELECT EMP_NAME, SALARY
FROM EMPLOYEE
ORDER BY 2 DESC) "뷰"
WHERE ROWNUM <= 5;

-- ex) 회사에서 급여가 가장 높은 사람 5명을 검색하시오
WITH TOP_N_SAL AS (SELECT EMP_NAME, SALARY FROM EMPLOYEE ORDER BY SALARY DESC)

SELECT ROWNUM, TOP_N_SAL.*
FROM TOP_N_SAL
WHERE ROWNUM <= 5;

--@ RANK() OVER
WITH TOP_N AS (SELECT RANK() OVER(ORDER BY SALARY DESC) AS "순위",
                EMP_NAME, SALARY 
                FROM EMPLOYEE)
SELECT *
FROM TOP_N;

--@ DENSE_RANK() OVER
WITH TOP_N AS (SELECT DENSE_RANK() OVER(ORDER BY SALARY DESC) AS "순위",
                EMP_NAME, SALARY 
                FROM EMPLOYEE)
SELECT *
FROM TOP_N;

--@ ROW_NUMBER() OVER
WITH TOP_N AS (SELECT ROW_NUMBER() OVER(ORDER BY SALARY DESC) AS "순위",
                EMP_NAME, SALARY 
                FROM EMPLOYEE)
SELECT *
FROM TOP_N;

--1
SELECT EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE DEPT_CODE = ANY (
SELECT DEPT_ID
FROM DEPARTMENT
WHERE DEPT_TITLE = '기술지원부');

--2
SELECT 탑.*
FROM (SELECT EMP_NAME, DEPT_CODE, SALARY*12
        FROM EMPLOYEE
        WHERE DEPT_CODE = ANY (
                SELECT DEPT_ID
                FROM DEPARTMENT
            WHERE DEPT_TITLE = '기술지원부')
            ORDER BY SALARY DESC) "탑"
WHERE ROWNUM = 1;

--3
SELECT E.EMP_ID,E.EMP_NAME,
E2.EMP_NAME AS "매니저 이름",
E2.SALARY/10000 || '만'
FROM EMPLOYEE E
JOIN EMPLOYEE E2 ON (E.MANAGER_ID = E2.EMP_ID)
WHERE E.SALARY > (SELECT AVG(E2.SALARY)
FROM EMPLOYEE E2
WHERE E.MANAGER_ID = E2.EMP_ID);

--4
SELECT EMP_NAME, JOB_CODE, SALARY, SAL_LEVEL
FROM EMPLOYEE
WHERE (JOB_CODE,SAL_LEVEL) IN
(SELECT JOB_CODE,MIN(SAL_LEVEL)
FROM EMPLOYEE
GROUP BY JOB_CODE)
ORDER BY 2;

--5
SELECT*
FROM (SELECT DEPT_TITLE, FLOOR(AVG(SALARY))
FROM EMPLOYEE 
LEFT JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID)
GROUP BY DEPT_TITLE
HAVING AVG(SALARY)>=2200000);

SELECT DEPT_TITLE, FLOOR(AVG(SALARY))
FROM EMPLOYEE E
LEFT JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID)
WHERE 2200000 <= (SELECT AVG(SALARY)
FROM EMPLOYEE E2
WHERE NVL(E.DEPT_CODE,'없음') = NVL(E2.DEPT_CODE,'없음')
GROUP BY DEPT_CODE) group by DEPT_TITLE;

SELECT * FROM EMPLOYEE;
SELECT * FROM DEPARTMENT;

--6

SELECT EMP_NAME,JOB_CODE,DEPT_CODE,(SALARY+(SALARY*NVL(BONUS,0)))*12
FROM EMPLOYEE E1
WHERE (SALARY+(SALARY*NVL(BONUS,0)))*12 < (SELECT AVG((SALARY+(SALARY*NVL(BONUS,0)))*12)
FROM EMPLOYEE E2
WHERE E2.JOB_CODE = E1.JOB_CODE) AND
SUBSTR(EMP_NO,8,1)=2;

DESC EMPLOYEE;
DROP TABLE USER_NOTCONS;
CREATE TABLE MEMBER(
	MEMBER_ID VARCHAR2(20),
	MEMBER_PWD VARCHAR2(20),
	MEMBER_NAME VARCHAR2(20)
);
DESC MEMBER;

SELECT * FROM MEMBER;

COMMENT ON COLUMN MEMBER.MEMBER_ID IS '회원아이디';
COMMENT ON COLUMN MEMBER.MEMBER_PWD IS '비밀번호';
COMMENT ON COLUMN MEMBER.MEMBER_NAME IS '회원이름';

INSERT INTO MEMBER VALUES('Hlove','1111','홍성민');
INSERT INTO MEMBER VALUES('Hlove','2222','홍성민');

SELECT * FROM EMPLOYEE;

SELECT CONSTRAINT_NAME, CONSTRAINT_TYPE
FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'EMPLOYEE';

CREATE TABLE USER_NOTCONS
(
	USER_NO NUMBER,
	USER_ID VARCHAR2(20),
	USER_PWD VARCHAR2(20),
	USER_NAME VARCHAR2(30),
	GERNDER VARCHAR2(30),
	PHONE VARCHAR2(30),
	EMAIL VARCHAR2(50)
);

SELECT CONSTRAINT_NAME, CONSTRAINT_TYPE
FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'NOTCONS';

INSERT INTO USER_NOTCONS
VALUES(1,NULL,NULL,NULL,NULL,NULL,NULL);

CREATE TABLE USER_NOTCONS
(
	USER_NO NUMBER,
	USER_ID VARCHAR2(20) NOT NULL,
	USER_PWD VARCHAR2(20) NOT NULL,
	USER_NAME VARCHAR2(30) NOT NULL,
	GERNDER VARCHAR2(30) NOT NULL,
	PHONE VARCHAR2(30) NOT NULL,
	EMAIL VARCHAR2(50) NOT NULL
);

INSERT INTO USER_NOTCONS
VALUES(1,NULL,NULL,NULL,NULL,NULL,NULL);

SELECT TABLE_NAME, COLUMN_NAME, CONSTRAINT_NAME
FROM USER_CONS_COLUMNS
WHERE TABLE_NAME='USER_NOTCONS'
UNION
SELECT TABLE_NAME,CONSTRAINT_NAME,CONSTRAINT_TYPE 
FROM USER_CONSTRAINTS
WHERE TABLE_NAME='USER_NOTCONS'
ORDER BY 3 DESC;

INSERT INTO USER_NOTCONS
VALUES(2,'USER22','PASS11','홍길동','남','010-1111-2222','hong@kh.or.kr');

SELECT * FROM USER_NOTCONS;

CREATE TABLE USER_NOTCONS
(
	USER_NO NUMBER,
	USER_ID	VARCHAR2(20) UNIQUE,
	USER_PWD VARCHAR2(30) NOT NULL,
	USER_NAME VARCHAR2(30) NOT NULL,
	GENDER VARCHAR2(30) NOT NULL,
	PHONE VARCHAR2(30) NOT NULL,
	EMAIL VARCHAR2(50) NOT NULL
);

-- PRIMARY KEY 설정
CREATE TABLE USER_NOTCONS
(
	USER_NO NUMBER PRIMARY KEY,  -- 컬럼 레벨 설정
	USER_ID	VARCHAR2(20) UNIQUE,	
	USER_PWD VARCHAR2(30) NOT NULL,
	USER_NAME VARCHAR2(30) NOT NULL,
	GENDER VARCHAR2(30) NOT NULL,
	PHONE VARCHAR2(30) NOT NULL,
	EMAIL VARCHAR2(50) NOT NULL
);

INSERT INTO USER_NOTCONS
VALUES(1,'USR11','PASS11','홍길동','M','010-1111-2222','HONG@KH.OR.KR');
INSERT INTO USER_NOTCONS
VALUES(1,'USR22','PASS11','홍길동','M','010-1111-2222','HONG@KH.OR.KR');

-- CHECK 제약조건 (GENDER 컬럼에 'M' 또는 'F')
CREATE TABLE USER_NOTCONS
(
	USER_NO NUMBER PRIMARY KEY,  -- 컬럼 레벨 설정
	USER_ID	VARCHAR2(20) UNIQUE,	
	USER_PWD VARCHAR2(30) NOT NULL,
	USER_NAME VARCHAR2(30) NOT NULL,
	GENDER VARCHAR2(30) CHECK (GENDER IN('M','F')),
	PHONE VARCHAR2(30) NOT NULL,
	EMAIL VARCHAR2(50) NOT NULL
);
INSERT INTO USER_NOTCONS
VALUES(1,'USER11','PASS11','홍길동','M','010-1111-2222','HONG@KH.OR.KR');
INSERT INTO USER_NOTCONS
VALUES(2,'USER22','PASS11','김말똥','%','010-1111-2222','HONG@KH.OR.KR');

-- 회원이 물품을 구매했을 경우 기록하는 테이블 생성
CREATE TABLE BUY
(
    BUY_NO NUMBER PRIMARY KEY,
    USER_ID VARCHAR2(20),
    PRODUCT_NAME VARCHAR2(20),
    REG_DATE DATE
);

INSERT INTO BUY
VALUES(2,'USER22','바나나',SYSDATE);

SELECT * FROM BUY;

DROP TABLE BUY;

CREATE TABLE BUY
(
    BUY_NO NUMBER PRIMARY KEY,
    USER_ID VARCHAR2(20) ,
    PRODUCT_NAME VARCHAR2(20),
    REG_DATE DATE,
    FOREIGN KEY (USER_ID) REFERENCES USER_NOTCONS(USER_ID)
);

INSERT INTO BUY
VALUES(1,'USER11','사과',SYSDATE);
INSERT INTO BUY
VALUES(2,'USER22','바나나',SYSDATE);  -- 존재하지 않는 회원이 구매 시도

SELECT * FROM USER_NOTCONS;
SELECT * FROM BUY;

INSERT INTO USER_NOTCONS
VALUES(2,'USER22','PASS11','김말떵','F','010-1111-2222','HONG@KH.OR.KR');

INSERT INTO USER_NOTCONS
VALUES(3,'USER33','PASS11','고길동','F','010-1111-2222','HONG@KH.OR.KR');

INSERT INTO USER_NOTCONS
VALUES(4,'USER44','PASS11','둘리','M','010-1111-2222','HONG@KH.OR.KR');

INSERT INTO BUY
VALUES(1,'USER11','사과',SYSDATE);
INSERT INTO BUY
VALUES(2,'USER11','망고',SYSDATE);
INSERT INTO BUY
VALUES(3,'USER22','파인애플',SYSDATE);
INSERT INTO BUY
VALUES(4,'USER33','딸기',SYSDATE);

SELECT * FROM BUY;
SELECT * FROM USER_NOTCONS;
DELETE FROM USER_NOTCONS WHERE USER_ID='USER11';

CREATE TABLE BUY
(
    BUY_NO NUMBER PRIMARY KEY,
    USER_ID VARCHAR2(20) ,
    PRODUCT_NAME VARCHAR2(20),
    REG_DATE DATE,
    FOREIGN KEY (USER_ID) REFERENCES USER_NOTCONS(USER_ID) 
    ON DELETE CASCADE
);


CREATE TABLE testTBL
(
    DATA1 NUMBER DEFAULT 100,
    DATA2 NUMBER DEFAULT 200
);
INSERT INTO testTBL
VALUES(DEFAULT,DEFAULT);
SELECT * FROM testTBL;

CREATE TABLE EMP_DEPT_TBL
AS
SELECT EMP_NAME,DEPT_TITLE
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID);

SELECT * FROM EMP_DEPT_TBL;

CREATE TABLE EXPERT_TBL
(
    MEMBER_CODE NUMBER PRIMARY KEY,
    MEMBER_ID VARCHAR2(20) UNIQUE,
    MEMBER_PWD CHAR(20) NOT NULL,
    MEMBER_NAME NCHAR(10) NOT NULL,
    MEMBER_ADDR char(50) NOT NULL,
    GENDER VARCHAR2(5) CHECK (GENDER IN ('남','여')),
    PHONE VARCHAR2(20) DEFAULT '000-0000-0000'
);

CREATE TABLE A3Company_TBL
(
    MEMBER_CODE NUMBER,
    SKILL NCHAR(10),
    FOREIGN KEY (MEMBER_CODE) REFERENCES
    EXPERT_TBL (MEMBER_CODE)
    ON DELETE CASCADE
);

INSERT INTO EXPERT_TBL
VALUES (100,'mslove','1233','노민수','경기도 부천','남','010-4254-5664');

INSERT INTO EXPERT_TBL
VALUES (101,'khlove','5437','경실련','인천광역시','여','010-1222-4444');

INSERT INTO EXPERT_TBL
VALUES (102,'samsam2','1233','김조조','서울시 구로','남','010-4555-7778');

INSERT INTO EXPERT_TBL
VALUES (103,'mongshell','1233','이롯데','남태평양','여','010-6666-7458');

INSERT INTO EXPERT_TBL
VALUES (104,'candy','1233','박인기','후쿠시마 원전','남',default);

INSERT INTO EXPERT_TBL
VALUES (105,'smart','1233','최바보','베이징','남','010-8996-4226');

INSERT INTO A3Company_TBL
VALUES (100,'해킹');
INSERT INTO A3Company_TBL
VALUES (104,'교육');
INSERT INTO A3Company_TBL
VALUES (102,'교육');
INSERT INTO A3Company_TBL
VALUES (105,'개발');

SELECT * FROM EXPERT_TBL;
SELECT * FROM A3Company_TBL;

CREATE TABLE INSERT_TEST
(
    DATA1 NUMBER,
    DATA2 NUMBER,
    DATA3 NUMBER,
    DATA4 NUMBER,
    DATA5 NUMBER
);
INSERT INTO INSERT_TEST VALUES(1,2,3,4,5);
SELECT * FROM INSERT_TEST;

INSERT INTO INSERT_TEST (DATA1,DATA2,DATA3) VALUES (5,4,3);
INSERT INTO INSERT_TEST VALUES(4,2,1,3,5);

CREATE TABLE EMP_01
(
    EMP_ID NUMBER,
    EMP_NAME VARCHAR2(30),
    DEPT_TITLE VARCHAR2(20)
);

INSERT INTO EMP_01
(
    SELECT EMP_ID, EMP_NAME, DEPT_TITLE
    FROM EMPLOYEE
    LEFT JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID)
);

SELECT * FROM EMP_01;


CREATE TABLE EMP_DEPT_01
AS SELECT EMP_ID,EMP_NAME,DEPT_CODE,HIRE_DATE
    FROM EMPLOYEE
    WHERE 1 = 0;
    
CREATE TABLE EMP_MANAGER
AS SELECT EMP_ID,EMP_NAME,MANAGER_ID
    FROM EMPLOYEE
    WHERE 1 = 0;

SELECT * FROM EMP_DEPT_01;
SELECT * FROM EMP_MANAGER;
    
-- [EMP_DEPT_01] 테이블에 EMPLOYEE 테이블에서 부서코드가 D2인 직원을
-- 조회하여 사번, 이름, 소속부서, 입사일을 삽입하고,
-- [EMP_MANAGER] 테이블에 EMPLOYEE 테이블에서 부서코드가 D2인 직원을
-- 조회하여 사번, 이름, 관리자 사번을 삽입 해야 함

-- 즉, 가져오는 테이블명 : EMPLOYEE
-- 조건 : 부서코드가 D2
-- 테이블과 조건이 같다면 ! INSERT ALL 을 이용하여 한번에 처리가 가능함

INSERT ALL
INTO EMP_DEPT_01
VALUES (EMP_ID, EMP_NAME,DEPT_CODE,HIRE_DATE)
INTO EMP_MANAGER
VALUES (EMP_ID, EMP_NAME, MANAGER_ID)
SELECT EMP_ID,EMP_NAME,DEPT_CODE,HIRE_DATE,MANAGER_ID
FROM EMPLOYEE
WHERE DEPT_CODE='D2';

SELECT * FROM EMP_DEPT_01;
SELECT * FROM EMP_MANAGER;

CREATE TABLE EMP_OLD
AS SELECT EMP_ID,EMP_NAME,HIRE_DATE,SALARY
FROM EMPLOYEE
WHERE 1=0;
CREATE TABLE EMP_NEW
AS SELECT EMP_ID,EMP_NAME,HIRE_DATE,SALARY
FROM EMPLOYEE
WHERE 1=0;

INSERT ALL
WHEN HIRE_DATE < '2000/01/01' THEN INTO EMP_OLD
VALUES (EMP_ID,EMP_NAME,HIRE_DATE,SALARY)
WHEN HIRE_DATE >= '2000/01/01' THEN INTO EMP_NEW
VALUES (EMP_ID,EMP_NAME,HIRE_DATE,SALARY)
SELECT EMP_ID,EMP_NAME,HIRE_DATE,SALARY
FROM EMPLOYEE;

SELECT * FROM EMP_OLD;
SELECT * FROM EMP_NEW;

CREATE TABLE DEPT_COPY
AS SELECT * FROM DEPARTMENT;

UPDATE DEPT_COPY
SET DEPT_ID='D0'
WHERE DEPT_TITLE='총무부';

SELECT * FROM DEPT_COPY;

-- 평상시 유재식 사원을 부러워하던 방명수 사원의 급여와 보너스율을 유재식 사원과
-- 동일하게 변경해 주기로 했다. 이를 반영하는 UPDATE 구문을 작성하시오
-- EMPLOYEE 테이블에서 하지말고 !! EMP_COPY 테이블 만들어서 해주세요

CREATE TABLE COPY_EMPLOYEE
AS SELECT * FROM EMPLOYEE;

-- 1. 서브 쿼리를 이용하는 방법
UPDATE COPY_EMPLOYEE
SET SALARY = (SELECT SALARY FROM COPY_EMPLOYEE WHERE EMP_NAME='유재식'),
BONUS = (SELECT BONUS FROM COPY_EMPLOYEE WHERE EMP_NAME='유재식')
WHERE EMP_NAME = '방명수';
ROLLBACK;

-- 2. 서브 쿼리를 이용하는 방법(다중열)
UPDATE COPY_EMPLOYEE
SET (SALARY,BONUS) = (SELECT SALARY,BONUS FROM COPY_EMPLOYEE WHERE EMP_NAME='유재식')
WHERE EMP_NAME = '방명수';

SELECT * FROM COPY_EMPLOYEE;

CREATE TABLE M_TEST01
(
    ID CHAR(20),
    NAME VARCHAR2(20)
);

CREATE TABLE M_TEST02
(
    ID CHAR(20),
    NAME VARCHAR2(20)
);

INSERT INTO M_TEST01 VALUES('USER11','유영훈');
INSERT INTO M_TEST01 VALUES('USER12','유미경');
INSERT INTO M_TEST01 VALUES('USER13','유지섭');

INSERT INTO M_TEST02 VALUES('USER11','무영훈');
INSERT INTO M_TEST02 VALUES('USER22','무형조');
INSERT INTO M_TEST02 VALUES('USER23','무지수');

SELECT * FROM M_TEST01;
SELECT * FROM M_TEST02;

MERGE INTO M_TEST01 
USING M_TEST02 ON(M_TEST01.ID = M_TEST02.ID)
WHEN MATCHED THEN UPDATE SET M_TEST01.NAME = M_TEST02.NAME
WHEN NOT MATCHED THEN INSERT VALUES (M_TEST02.ID, M_TEST02.NAME);

