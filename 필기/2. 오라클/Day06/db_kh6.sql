SELECT EMP_NAME, SALARY
FROM EMPLOYEE
WHERE SALARY < ANY (2000000,5000000);

-- ex) J3 코드를 가진 사람의 급여들을 가지고 비교

SELECT SALARY
FROM EMPLOYEE
WHERE JOB_CODE = 'J3';

-- J3 코드를 가진 사람들의 급여 중에서 가장 작은 사람보다 큰 급여들을 출력

SELECT EMP_NAME, SALARY
FROM EMPLOYEE
WHERE SALARY > ANY (SELECT SALARY
FROM EMPLOYEE
WHERE JOB_CODE = 'J3');


-- 'D1' 또는 'D5' 부서코드를 가지고 있는 사원들의
-- 급여 중에서  가장 높은 급여보다 작은 모든 사원들의 이름, 급여,부서코드를 출력하여라.

SELECT EMP_NAME, SALARY, DEPT_CODE
FROM EMPLOYEE
WHERE SALARY < ANY (SELECT SALARY
FROM EMPLOYEE
WHERE DEPT_CODE IN ('D1','D5'));

-- < ANY (OR)
-- 서브쿼리에서 나온 결과물 중에서
-- 하나라도 작다면!

-- 부서별 평균 급여를 조사하였을 때 가장 낮은 부서의 급여보다
-- 높거나 같은 모든 사람들의 이름,급여,부서명을 출력하시오
SELECT EMP_NAME, SALARY, DEPT_TITLE
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE SALARY > ANY (SELECT AVG(SALARY) FROM EMPLOYEE GROUP BY DEPT_CODE);

SELECT EMP_NAME, SALARY
FROM EMPLOYEE
WHERE SALARY < ALL(2000000, 5000000);

-- 실습 1
-- 'D2'부서있는 사원들의 급여보다 적은 급여를 받는 모든 사원을 조회
SELECT EMP_NAME, SALARY
FROM EMPLOYEE
WHERE SALARY < ALL(SELECT SALARY FROM EMPLOYEE WHERE DEPT_CODE='D2');

-- 보너스 포인트 3.0 이상인 사원들이 있다면
-- 모든 사원의 정보를 출력해 주어라.
SELECT EMP_NAME,BONUS
FROM EMPLOYEE
WHERE EXISTS 
(SELECT NULL
FROM EMPLOYEE
WHERE NVL(BONUS,0) >= 0.3);

-- 보너스율이 1 이상인 사원이 없다면
-- 모든 사원의 이름, 급여를 출력하되 10% 인상된 급여로 출력하여라
-- 보너스율이 1 이상인 사원이 있다면
-- 출력하지 말아라.

SELECT EMP_NAME, SALARY*1.1
FROM EMPLOYEE
WHERE NOT EXISTS
(SELECT NULL
FROM EMPLOYEE
WHERE NVL(BONUS,0) >= 1);

-- 회사에서 퇴사한 여직원(1명만 있을때를 가정)과 같은 부서 및 직급인 사원 검색 하시오
-- (이름,직급,부서,입사일을 출력)

SELECT EMP_NAME,JOB_CODE,DEPT_CODE,HIRE_DATE
FROM EMPLOYEE
WHERE (DEPT_CODE,JOB_CODE) IN
(SELECT DEPT_CODE,JOB_CODE
FROM EMPLOYEE
WHERE ENT_YN = 'Y' -- ENT_YN 값이 Y이면 퇴사한 직원
AND SUBSTR(EMP_NO,8,1)=2);

SELECT * FROM TABS;
SELECT * FROM LOCATION;
SELECT * FROM EMPLOYEE;
SELECT * FROM DEPARTMENT;

-- @실습문제
-- 기술지원부이면서 급여가 2,000,000원
-- 직원의 이름,부서코드,급여,부서의지역명을 출력하시오
SELECT EMP_NAME,DEPT_CODE,SALARY, LOCAL_NAME
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE)
WHERE (DEPT_TITLE,SALARY) IN (SELECT DEPT_TITLE,SALARY
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE DEPT_TITLE = '기술지원부' AND SALARY = 2000000);

SELECT EMP_NAME, DEPT_CODE, SALARY, LOCAL_NAME
FROM EMPLOYEE, LOCATION
WHERE (DEPT_CODE,LOCAL_CODE) IN
(SELECT DEPT_ID,LOCATION_ID
FROM DEPARTMENT
WHERE DEPT_TITLE='기술지원부')
AND SALARY = 2000000;

SELECT EMP_NAME, DEPT_CODE, SALARY, LOCAL_NAME
FROM EMPLOYEE
JOIN LOCATION ON (DEPT_CODE,LOCAL_CODE)
IN (SELECT DEPT_ID,LOCATION_ID
FROM DEPARTMENT
WHERE DEPT_TITLE='기술지원부')
AND SALARY = 2000000;


-- 직급별 최소 급여를 받는 직원의 이름, 사번, 부서코드, 입사일, 연봉을 출력

SELECT EMP_NAME,JOB_CODE,DEPT_CODE,HIRE_DATE,SALARY
FROM EMPLOYEE
WHERE (JOB_CODE,SALARY)
IN (SELECT JOB_CODE, MIN(SALARY)
FROM EMPLOYEE
GROUP BY JOB_CODE);

SELECT JOB_CODE, MIN(SALARY)
FROM EMPLOYEE
GROUP BY JOB_CODE;


-- 상관 쿼리 예시
-- 관리자가 있는 사원들 중 관리자의 사번이 EMPLOYEE 테이블에 존재하는
-- 직원의 사번과 같을 때 직원의 사번, 이름, 소속부서, 관리자 사번을 조회 하시오
SELECT EMP_ID,EMP_NAME,DEPT_CODE,MANAGER_ID
FROM EMPLOYEE E
WHERE EXISTS (SELECT NULL
FROM EMPLOYEE E2
WHERE E.MANAGER_ID = E2.EMP_ID);


SELECT E.EMP_ID, E.EMP_NAME, E.MANAGER_ID,
	NVL((SELECT E2.EMP_NAME
		FROM EMPLOYEE E2
		WHERE E.MANAGER_ID = E2.EMP_ID),'없음') AS "관리자명"
FROM EMPLOYEE E
ORDER BY 1;

-- @실습문제
--1. 사원명, 부서코드, 부서별 평균임금을 스칼라서브쿼리를 이용해서 출력
SELECT E.EMP_NAME,E.DEPT_CODE,
(SELECT FLOOR(AVG(E2.SALARY))
FROM EMPLOYEE E2
WHERE NVL(E.DEPT_CODE,'N') = NVL(E2.DEPT_CODE,'N')
) AS "부서별 평균임금"
FROM EMPLOYEE E;

SELECT EMP_NAME, JOB_CODE, SALARY
FROM EMPLOYEE E1
WHERE SALARY >= (SELECT AVG(SALARY)
		FROM EMPLOYEE E2
		WHERE E2.JOB_CODE = E1.JOB_CODE)
ORDER BY 2;


SELECT EMP_NAME, SALARY, DEPT_CODE
FROM EMPLOYEE
WHERE SALARY >= 3000000;

SELECT *
FROM (SELECT *
FROM (SELECT EMP_NAME, SALARY, DEPT_CODE
FROM EMPLOYEE
WHERE SALARY >= 3000000)
WHERE DEPT_CODE IN ('D9','D5'));

-- ex) 회사에서 급여가 가장 높은 사람 5명을 검색하시오
SELECT ROWNUM,뷰.*
FROM 
(SELECT EMP_NAME, SALARY
FROM EMPLOYEE
ORDER BY 2 DESC) "뷰"
WHERE ROWNUM <= 5;

-- ex) 회사에서 급여가 가장 높은 사람 5명을 검색하시오
WITH TOP_N_SAL AS (SELECT EMP_NAME, SALARY FROM EMPLOYEE ORDER BY SALARY DESC)

SELECT ROWNUM, TOP_N_SAL.*
FROM TOP_N_SAL
WHERE ROWNUM <= 5;

--@ RANK() OVER
WITH TOP_N AS (SELECT RANK() OVER(ORDER BY SALARY DESC) AS "순위",
                EMP_NAME, SALARY 
                FROM EMPLOYEE)
SELECT *
FROM TOP_N;

--@ DENSE_RANK() OVER
WITH TOP_N AS (SELECT DENSE_RANK() OVER(ORDER BY SALARY DESC) AS "순위",
                EMP_NAME, SALARY 
                FROM EMPLOYEE)
SELECT *
FROM TOP_N;

--@ ROW_NUMBER() OVER
WITH TOP_N AS (SELECT ROW_NUMBER() OVER(ORDER BY SALARY DESC) AS "순위",
                EMP_NAME, SALARY 
                FROM EMPLOYEE)
SELECT *
FROM TOP_N;

--1
SELECT EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE DEPT_CODE = ANY (
SELECT DEPT_ID
FROM DEPARTMENT
WHERE DEPT_TITLE = '기술지원부');

--2
SELECT 탑.*
FROM (SELECT EMP_NAME, DEPT_CODE, SALARY*12
        FROM EMPLOYEE
        WHERE DEPT_CODE = ANY (
                SELECT DEPT_ID
                FROM DEPARTMENT
            WHERE DEPT_TITLE = '기술지원부')
            ORDER BY SALARY DESC) "탑"
WHERE ROWNUM = 1;

--3
SELECT E.EMP_ID,E.EMP_NAME,
E2.EMP_NAME AS "매니저 이름",
E2.SALARY/10000 || '만'
FROM EMPLOYEE E
JOIN EMPLOYEE E2 ON (E.MANAGER_ID = E2.EMP_ID)
WHERE E.SALARY > (SELECT AVG(E2.SALARY)
FROM EMPLOYEE E2
WHERE E.MANAGER_ID = E2.EMP_ID);

--4
SELECT EMP_NAME, JOB_CODE, SALARY, SAL_LEVEL
FROM EMPLOYEE
WHERE (JOB_CODE,SAL_LEVEL) IN
(SELECT JOB_CODE,MIN(SAL_LEVEL)
FROM EMPLOYEE
GROUP BY JOB_CODE)
ORDER BY 2;

--5
SELECT*
FROM (SELECT DEPT_TITLE, FLOOR(AVG(SALARY))
FROM EMPLOYEE 
LEFT JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID)
GROUP BY DEPT_TITLE
HAVING AVG(SALARY)>=2200000);

SELECT DEPT_TITLE, FLOOR(AVG(SALARY))
FROM EMPLOYEE E
LEFT JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID)
WHERE 2200000 <= (SELECT AVG(SALARY)
FROM EMPLOYEE E2
WHERE NVL(E.DEPT_CODE,'없음') = NVL(E2.DEPT_CODE,'없음')
GROUP BY DEPT_CODE) group by DEPT_TITLE;

SELECT * FROM EMPLOYEE;
SELECT * FROM DEPARTMENT;

--6

SELECT EMP_NAME,JOB_CODE,DEPT_CODE,(SALARY+(SALARY*NVL(BONUS,0)))*12
FROM EMPLOYEE E1
WHERE (SALARY+(SALARY*NVL(BONUS,0)))*12 < (SELECT AVG((SALARY+(SALARY*NVL(BONUS,0)))*12)
FROM EMPLOYEE E2
WHERE E2.JOB_CODE = E1.JOB_CODE) AND
SUBSTR(EMP_NO,8,1)=2;
