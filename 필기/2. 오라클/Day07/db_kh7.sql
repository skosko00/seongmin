DESC EMPLOYEE;
DROP TABLE USER_NOTCONS;
CREATE TABLE MEMBER(
	MEMBER_ID VARCHAR2(20),
	MEMBER_PWD VARCHAR2(20),
	MEMBER_NAME VARCHAR2(20)
);
DESC MEMBER;

SELECT * FROM MEMBER;

COMMENT ON COLUMN MEMBER.MEMBER_ID IS '회원아이디';
COMMENT ON COLUMN MEMBER.MEMBER_PWD IS '비밀번호';
COMMENT ON COLUMN MEMBER.MEMBER_NAME IS '회원이름';

INSERT INTO MEMBER VALUES('Hlove','1111','홍성민');
INSERT INTO MEMBER VALUES('Hlove','2222','홍성민');

SELECT * FROM EMPLOYEE;

SELECT CONSTRAINT_NAME, CONSTRAINT_TYPE
FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'EMPLOYEE';

CREATE TABLE USER_NOTCONS
(
	USER_NO NUMBER,
	USER_ID VARCHAR2(20),
	USER_PWD VARCHAR2(20),
	USER_NAME VARCHAR2(30),
	GERNDER VARCHAR2(30),
	PHONE VARCHAR2(30),
	EMAIL VARCHAR2(50)
);

SELECT CONSTRAINT_NAME, CONSTRAINT_TYPE
FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'NOTCONS';

INSERT INTO USER_NOTCONS
VALUES(1,NULL,NULL,NULL,NULL,NULL,NULL);

CREATE TABLE USER_NOTCONS
(
	USER_NO NUMBER,
	USER_ID VARCHAR2(20) NOT NULL,
	USER_PWD VARCHAR2(20) NOT NULL,
	USER_NAME VARCHAR2(30) NOT NULL,
	GERNDER VARCHAR2(30) NOT NULL,
	PHONE VARCHAR2(30) NOT NULL,
	EMAIL VARCHAR2(50) NOT NULL
);

INSERT INTO USER_NOTCONS
VALUES(1,NULL,NULL,NULL,NULL,NULL,NULL);

SELECT TABLE_NAME, COLUMN_NAME, CONSTRAINT_NAME
FROM USER_CONS_COLUMNS
WHERE TABLE_NAME='USER_NOTCONS'
UNION
SELECT TABLE_NAME,CONSTRAINT_NAME,CONSTRAINT_TYPE 
FROM USER_CONSTRAINTS
WHERE TABLE_NAME='USER_NOTCONS'
ORDER BY 3 DESC;

INSERT INTO USER_NOTCONS
VALUES(2,'USER22','PASS11','홍길동','남','010-1111-2222','hong@kh.or.kr');

SELECT * FROM USER_NOTCONS;

CREATE TABLE USER_NOTCONS
(
	USER_NO NUMBER,
	USER_ID	VARCHAR2(20) UNIQUE,
	USER_PWD VARCHAR2(30) NOT NULL,
	USER_NAME VARCHAR2(30) NOT NULL,
	GENDER VARCHAR2(30) NOT NULL,
	PHONE VARCHAR2(30) NOT NULL,
	EMAIL VARCHAR2(50) NOT NULL
);

-- PRIMARY KEY 설정
CREATE TABLE USER_NOTCONS
(
	USER_NO NUMBER PRIMARY KEY,  -- 컬럼 레벨 설정
	USER_ID	VARCHAR2(20) UNIQUE,	
	USER_PWD VARCHAR2(30) NOT NULL,
	USER_NAME VARCHAR2(30) NOT NULL,
	GENDER VARCHAR2(30) NOT NULL,
	PHONE VARCHAR2(30) NOT NULL,
	EMAIL VARCHAR2(50) NOT NULL
);

INSERT INTO USER_NOTCONS
VALUES(1,'USR11','PASS11','홍길동','M','010-1111-2222','HONG@KH.OR.KR');
INSERT INTO USER_NOTCONS
VALUES(1,'USR22','PASS11','홍길동','M','010-1111-2222','HONG@KH.OR.KR');

-- CHECK 제약조건 (GENDER 컬럼에 'M' 또는 'F')
CREATE TABLE USER_NOTCONS
(
	USER_NO NUMBER PRIMARY KEY,  -- 컬럼 레벨 설정
	USER_ID	VARCHAR2(20) UNIQUE,	
	USER_PWD VARCHAR2(30) NOT NULL,
	USER_NAME VARCHAR2(30) NOT NULL,
	GENDER VARCHAR2(30) CHECK (GENDER IN('M','F')),
	PHONE VARCHAR2(30) NOT NULL,
	EMAIL VARCHAR2(50) NOT NULL
);
INSERT INTO USER_NOTCONS
VALUES(1,'USER11','PASS11','홍길동','M','010-1111-2222','HONG@KH.OR.KR');
INSERT INTO USER_NOTCONS
VALUES(2,'USER22','PASS11','김말똥','%','010-1111-2222','HONG@KH.OR.KR');

-- 회원이 물품을 구매했을 경우 기록하는 테이블 생성
CREATE TABLE BUY
(
    BUY_NO NUMBER PRIMARY KEY,
    USER_ID VARCHAR2(20),
    PRODUCT_NAME VARCHAR2(20),
    REG_DATE DATE
);

INSERT INTO BUY
VALUES(2,'USER22','바나나',SYSDATE);

SELECT * FROM BUY;

DROP TABLE BUY;

CREATE TABLE BUY
(
    BUY_NO NUMBER PRIMARY KEY,
    USER_ID VARCHAR2(20) ,
    PRODUCT_NAME VARCHAR2(20),
    REG_DATE DATE,
    FOREIGN KEY (USER_ID) REFERENCES USER_NOTCONS(USER_ID)
);

INSERT INTO BUY
VALUES(1,'USER11','사과',SYSDATE);
INSERT INTO BUY
VALUES(2,'USER22','바나나',SYSDATE);  -- 존재하지 않는 회원이 구매 시도

SELECT * FROM USER_NOTCONS;
SELECT * FROM BUY;

INSERT INTO USER_NOTCONS
VALUES(2,'USER22','PASS11','김말떵','F','010-1111-2222','HONG@KH.OR.KR');

INSERT INTO USER_NOTCONS
VALUES(3,'USER33','PASS11','고길동','F','010-1111-2222','HONG@KH.OR.KR');

INSERT INTO USER_NOTCONS
VALUES(4,'USER44','PASS11','둘리','M','010-1111-2222','HONG@KH.OR.KR');

INSERT INTO BUY
VALUES(1,'USER11','사과',SYSDATE);
INSERT INTO BUY
VALUES(2,'USER11','망고',SYSDATE);
INSERT INTO BUY
VALUES(3,'USER22','파인애플',SYSDATE);
INSERT INTO BUY
VALUES(4,'USER33','딸기',SYSDATE);

SELECT * FROM BUY;
SELECT * FROM USER_NOTCONS;
DELETE FROM USER_NOTCONS WHERE USER_ID='USER11';

CREATE TABLE BUY
(
    BUY_NO NUMBER PRIMARY KEY,
    USER_ID VARCHAR2(20) ,
    PRODUCT_NAME VARCHAR2(20),
    REG_DATE DATE,
    FOREIGN KEY (USER_ID) REFERENCES USER_NOTCONS(USER_ID) 
    ON DELETE CASCADE
);


CREATE TABLE testTBL
(
    DATA1 NUMBER DEFAULT 100,
    DATA2 NUMBER DEFAULT 200
);
INSERT INTO testTBL
VALUES(DEFAULT,DEFAULT);
SELECT * FROM testTBL;

CREATE TABLE EMP_DEPT_TBL
AS
SELECT EMP_NAME,DEPT_TITLE
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID);

SELECT * FROM EMP_DEPT_TBL;

CREATE TABLE EXPERT_TBL
(
    MEMBER_CODE NUMBER PRIMARY KEY,
    MEMBER_ID VARCHAR2(20) UNIQUE,
    MEMBER_PWD CHAR(20) NOT NULL,
    MEMBER_NAME NCHAR(10) NOT NULL,
    MEMBER_ADDR char(50) NOT NULL,
    GENDER VARCHAR2(5) CHECK (GENDER IN ('남','여')),
    PHONE VARCHAR2(20) DEFAULT '000-0000-0000'
);

CREATE TABLE A3Company_TBL
(
    MEMBER_CODE NUMBER,
    SKILL NCHAR(10),
    FOREIGN KEY (MEMBER_CODE) REFERENCES
    EXPERT_TBL (MEMBER_CODE)
    ON DELETE CASCADE
);

INSERT INTO EXPERT_TBL
VALUES (100,'mslove','1233','노민수','경기도 부천','남','010-4254-5664');

INSERT INTO EXPERT_TBL
VALUES (101,'khlove','5437','경실련','인천광역시','여','010-1222-4444');

INSERT INTO EXPERT_TBL
VALUES (102,'samsam2','1233','김조조','서울시 구로','남','010-4555-7778');

INSERT INTO EXPERT_TBL
VALUES (103,'mongshell','1233','이롯데','남태평양','여','010-6666-7458');

INSERT INTO EXPERT_TBL
VALUES (104,'candy','1233','박인기','후쿠시마 원전','남',default);

INSERT INTO EXPERT_TBL
VALUES (105,'smart','1233','최바보','베이징','남','010-8996-4226');

INSERT INTO A3Company_TBL
VALUES (100,'해킹');
INSERT INTO A3Company_TBL
VALUES (104,'교육');
INSERT INTO A3Company_TBL
VALUES (102,'교육');
INSERT INTO A3Company_TBL
VALUES (105,'개발');

SELECT * FROM EXPERT_TBL;
SELECT * FROM A3Company_TBL;

CREATE TABLE INSERT_TEST
(
    DATA1 NUMBER,
    DATA2 NUMBER,
    DATA3 NUMBER,
    DATA4 NUMBER,
    DATA5 NUMBER
);
INSERT INTO INSERT_TEST VALUES(1,2,3,4,5);
SELECT * FROM INSERT_TEST;

INSERT INTO INSERT_TEST (DATA1,DATA2,DATA3) VALUES (5,4,3);
INSERT INTO INSERT_TEST VALUES(4,2,1,3,5);

CREATE TABLE EMP_01
(
    EMP_ID NUMBER,
    EMP_NAME VARCHAR2(30),
    DEPT_TITLE VARCHAR2(20)
);

INSERT INTO EMP_01
(
    SELECT EMP_ID, EMP_NAME, DEPT_TITLE
    FROM EMPLOYEE
    LEFT JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID)
);

SELECT * FROM EMP_01;


CREATE TABLE EMP_DEPT_01
AS SELECT EMP_ID,EMP_NAME,DEPT_CODE,HIRE_DATE
    FROM EMPLOYEE
    WHERE 1 = 0;
    
CREATE TABLE EMP_MANAGER
AS SELECT EMP_ID,EMP_NAME,MANAGER_ID
    FROM EMPLOYEE
    WHERE 1 = 0;

SELECT * FROM EMP_DEPT_01;
SELECT * FROM EMP_MANAGER;
    
-- [EMP_DEPT_01] 테이블에 EMPLOYEE 테이블에서 부서코드가 D2인 직원을
-- 조회하여 사번, 이름, 소속부서, 입사일을 삽입하고,
-- [EMP_MANAGER] 테이블에 EMPLOYEE 테이블에서 부서코드가 D2인 직원을
-- 조회하여 사번, 이름, 관리자 사번을 삽입 해야 함

-- 즉, 가져오는 테이블명 : EMPLOYEE
-- 조건 : 부서코드가 D2
-- 테이블과 조건이 같다면 ! INSERT ALL 을 이용하여 한번에 처리가 가능함

INSERT ALL
INTO EMP_DEPT_01
VALUES (EMP_ID, EMP_NAME,DEPT_CODE,HIRE_DATE)
INTO EMP_MANAGER
VALUES (EMP_ID, EMP_NAME, MANAGER_ID)
SELECT EMP_ID,EMP_NAME,DEPT_CODE,HIRE_DATE,MANAGER_ID
FROM EMPLOYEE
WHERE DEPT_CODE='D2';

SELECT * FROM EMP_DEPT_01;
SELECT * FROM EMP_MANAGER;

CREATE TABLE EMP_OLD
AS SELECT EMP_ID,EMP_NAME,HIRE_DATE,SALARY
FROM EMPLOYEE
WHERE 1=0;
CREATE TABLE EMP_NEW
AS SELECT EMP_ID,EMP_NAME,HIRE_DATE,SALARY
FROM EMPLOYEE
WHERE 1=0;

INSERT ALL
WHEN HIRE_DATE < '2000/01/01' THEN INTO EMP_OLD
VALUES (EMP_ID,EMP_NAME,HIRE_DATE,SALARY)
WHEN HIRE_DATE >= '2000/01/01' THEN INTO EMP_NEW
VALUES (EMP_ID,EMP_NAME,HIRE_DATE,SALARY)
SELECT EMP_ID,EMP_NAME,HIRE_DATE,SALARY
FROM EMPLOYEE;

SELECT * FROM EMP_OLD;
SELECT * FROM EMP_NEW;

CREATE TABLE DEPT_COPY
AS SELECT * FROM DEPARTMENT;

UPDATE DEPT_COPY
SET DEPT_ID='D0'
WHERE DEPT_TITLE='총무부';

SELECT * FROM DEPT_COPY;

-- 평상시 유재식 사원을 부러워하던 방명수 사원의 급여와 보너스율을 유재식 사원과
-- 동일하게 변경해 주기로 했다. 이를 반영하는 UPDATE 구문을 작성하시오
-- EMPLOYEE 테이블에서 하지말고 !! EMP_COPY 테이블 만들어서 해주세요

CREATE TABLE COPY_EMPLOYEE
AS SELECT * FROM EMPLOYEE;

-- 1. 서브 쿼리를 이용하는 방법
UPDATE COPY_EMPLOYEE
SET SALARY = (SELECT SALARY FROM COPY_EMPLOYEE WHERE EMP_NAME='유재식'),
BONUS = (SELECT BONUS FROM COPY_EMPLOYEE WHERE EMP_NAME='유재식')
WHERE EMP_NAME = '방명수';
ROLLBACK;

-- 2. 서브 쿼리를 이용하는 방법(다중열)
UPDATE COPY_EMPLOYEE
SET (SALARY,BONUS) = (SELECT SALARY,BONUS FROM COPY_EMPLOYEE WHERE EMP_NAME='유재식')
WHERE EMP_NAME = '방명수';

SELECT * FROM COPY_EMPLOYEE;

CREATE TABLE M_TEST01
(
    ID CHAR(20),
    NAME VARCHAR2(20)
);

CREATE TABLE M_TEST02
(
    ID CHAR(20),
    NAME VARCHAR2(20)
);

INSERT INTO M_TEST01 VALUES('USER11','유영훈');
INSERT INTO M_TEST01 VALUES('USER12','유미경');
INSERT INTO M_TEST01 VALUES('USER13','유지섭');

INSERT INTO M_TEST02 VALUES('USER11','무영훈');
INSERT INTO M_TEST02 VALUES('USER22','무형조');
INSERT INTO M_TEST02 VALUES('USER23','무지수');

SELECT * FROM M_TEST01;
SELECT * FROM M_TEST02;

MERGE INTO M_TEST01 
USING M_TEST02 ON(M_TEST01.ID = M_TEST02.ID)
WHEN MATCHED THEN UPDATE SET M_TEST01.NAME = M_TEST02.NAME
WHEN NOT MATCHED THEN INSERT VALUES (M_TEST02.ID, M_TEST02.NAME);

