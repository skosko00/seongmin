

@ DML (Data Manipulation Language)
-> Data를 조작하기 위해 사용하는 언어
-> Data의 삽입,수정,삭제,조회 등의 동작을 제어함
-> Data를 이용하려는 사용자와 시스템 간의 인터페이스를 직접적으로 제공하는 언어
-> 가장 많이 사용 됨


@ INSERT 
-> 새로운 데이터(행)를 테이블에 추가하는 구문
-> 추가할때마다 테이블의 행 개수가 증가함


사용 구문
INSERT INTO <테이블명> VALUES (입력데이터1,입력데이터2,...);
혹은
INSERT INTO <테이블명>(컬럼명1,컬럼명2,....) VALUES(입력데이터1,입력데이터2,...);


ex)

CREATE TABLE INSERT_TEST
(
    DATA1 NUMBER,
    DATA2 NUMBER,
    DATA3 NUMBER,
    DATA4 NUMBER,
    DATA5 NUMBER
);

INSERT INTO INSERT_TEST VALUES(1,2,3,4,5); -- 데이터 삽입

SELECT * FROM INSERT_Test; -- 데이터 확인

INSERT INTO INSERT_TEST  VALUES(2,3,1,5,4); -- 컬럼 순서대로 데이터가 삽입됨

INSERT INTO 
INSERT_TEST(DATA2,DATA3,DATA1,DATA5,DATA4) -- 컬럼명을 안다면 직접 정할 수 있음
VALUES(2,3,1,5,4);

INSERT INTO
INSERT_TEST(DATA2,DATA3,DATA1,DATA5) -- 컬럼명을 이용하여 해당 데이터만 넣을 수 있음
VALUES(1,2,3,4);


## INSERT시에 서브쿼리를 이용하여 데이터를 삽입 할 수 있음 ##

ex)

CREATE TABLE EMP_01
(
    EMP_ID NUMBER,
    EMP_NAME VARCHAR2(30),
    DEPT_TITLE VARCHAR2(20)
);

INSERT INTO EMP_01
(
    SELECT EMP_ID, EMP_NAME, DEPT_TITLE
    FROM EMPLOYEE
    LEFT JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID)
);

SELECT * EMP_01;



@ INSERT ALL
-> INSERT시 사용하는 서브쿼리가 테이블이 같은 경우, 두 개 이상의
테이블에 INSERT ALL을 이용하여 한번에 삽입할 수 있음
-> 단, 각 서브쿼리의 조건절이 같아야 함

ex)
INSERT ALL
INTO EMP_DEPT_01
VALUES (EMP_ID, EMP_NAME,DEPT_CODE,HIRE_DATE)
INTO EMP_MANAGER
VALUES (EMP_ID, EMP_NAME, MANAGER_ID)
SELECT EMP_ID,EMP_NAME,DEPT_CODE,HIRE_DATE,MANAGER_ID
FROM EMPLOYEE
WHERE DEPT_CODE='D2';


@ UPDATE
-> 테이블에 기록된 컬럼의 값을 수정하는 구문
-> 테이블의 전체 행 개수에는 변화가 없음
	(기존 데이터를 수정하는 것 뿐)


기본 형식

UPDATE 테이블명
SET 컬럼명 = '변경될 값'
WHERE 조건


-- 평상시 유재식 사원을 부러워하던 방명수 사원의 급여와 보너스율을 유재식 사원과
-- 동일하게 변경해 주기로 했다. 이를 반영하는 UPDATE 구문을 작성하시오
-- EMPLOYEE 테이블에서 하지말고 !! EMP_COPY 테이블 만들어서 해주세요

-- 1. 서브 쿼리를 이용하는 방법
UPDATE COPY_EMPLOYEE
SET SALARY = (SELECT SALARY FROM COPY_EMPLOYEE WHERE EMP_NAME='유재식'),
BONUS = (SELECT BONUS FROM COPY_EMPLOYEE WHERE EMP_NAME='유재식')
WHERE EMP_NAME = '방명수';
ROLLBACK;

-- 2. 서브 쿼리를 이용하는 방법(다중열)
UPDATE COPY_EMPLOYEE
SET (SALARY,BONUS) = (SELECT SALARY,BONUS FROM COPY_EMPLOYEE WHERE EMP_NAME='유재식')
WHERE EMP_NAME = '방명수';

SELECT * FROM COPY_EMPLOYEE;



@ MERGE
-> 구조가 같은 두 개의 테이블을 하나의 테이블로 합치는 기능
-> 두 테이블에서 지정하는 조건의 값이 존재하면 UPDATE가 되고,
조건의 값이 없으면 INSERT 되도록 하는 기능

ex)
CREATE TABLE M_TEST01
(
    ID CHAR(20),
    NAME VARCHAR2(20)
);

CREATE TABLE M_TEST02
(
    ID CHAR(20),
    NAME VARCHAR2(20)
);

INSERT INTO M_TEST01 VALUES('USER11','유영훈');
INSERT INTO M_TEST01 VALUES('USER12','유미경');
INSERT INTO M_TEST01 VALUES('USER13','유지섭');

INSERT INTO M_TEST02 VALUES('USER11','무영훈');
INSERT INTO M_TEST02 VALUES('USER22','무형조');
INSERT INTO M_TEST02 VALUES('USER23','무지수');

SELECT * FROM M_TEST01;
SELECT * FROM M_TEST02;

MERGE INTO M_TEST01 
USING M_TEST02 ON(M_TEST01.ID = M_TEST02.ID)
WHEN MATCHED THEN UPDATE SET M_TEST01.NAME = M_TEST02.NAME
WHEN NOT MATCHED THEN INSERT VALUES (M_TEST02.ID, M_TEST02.NAME);


@ DELETE
-> 테이블의 행을 삭제하는 굽문
-> 테이블 행 개수가 줄어듦
-> DELETE 시에 조건문을 사용하지 않게 되면 Table의 모든 데이터가 삭제 될 수 있음
-> 외래케 제약조건이 설정되어 있는 경우 참조되고 있는 값은 삭제 할 수 없음


형식

DELETE FROM 테이블명
WHERE 조건

※ 조건을 쓰지 않게 되면 해당 테이블의 모든 내용이 삭제 되므로 주의!!

-> 삭제시 외래키(FOREIGN KEY) 제약 조건으로 컬럼 삭제가 불가능 한 경우
제약조건을 비활성화 할 수 있음

ex)
CREATE TABLE MEMBER_TEST01
(
    USER_NO NUMBER PRIMARY KEY,
    USER_ID VARCHAR2(20) UNIQUE,
    USER_PWD VARCHAR2(30) NOT NULL,
    USER_NAME VARCHAR2(30)
);

INSERT INTO MEMBER_TEST01
VALUES(1,'USER11','1111','홍길동');
INSERT INTO MEMBER_TEST01
VALUES(2,'USER22','2222','김말똥');
INSERT INTO MEMBER_TEST01
VALUES(3,'USER33','3333','고길똥');

CREATE TABLE MEMBER_FOREIGN
(
    USER_ID VARCHAR2(20),
    REGDATE DATE,
    FOREIGN KEY (USER_ID) REFERENCES MEMBER_TEST01 (USER_ID)
);

INSERT INTO MEMBER_FOREIGN
VALUES('USER11',SYSDATE);
INSERT INTO MEMBER_FOREIGN
VALUES('USER22',SYSDATE);
INSERT INTO MEMBER_FOREIGN
VALUES('USER33',SYSDATE);

SELECT * FROM MEMBER_TEST01;
SELECT * FROM MEMBER_FOREIGN;

DELETE FROM MEMBER_TEST01
WHERE USER_ID='USER11';

-- 제약조건 확인
SELECT TABLE_NAME, COLUMN_NAME, CONSTRAINT_NAME
FROM USER_CONS_COLUMNS
WHERE TABLE_NAME='MEMBER_FOREIGN'
UNION
SELECT TABLE_NAME,CONSTRAINT_NAME,CONSTRAINT_TYPE 
FROM USER_CONSTRAINTS
WHERE TABLE_NAME='MEMBER_FOREIGN'
ORDER BY 3 DESC;

-- 제약조건 비활성화
ALTER TABLE MEMBER_FOREIGN
DISABLE CONSTRAINT SYS_C007096;

-- 제약조건 활성화
ALTER TABLE MEMBER_FOREIGN
ENABLE CONSTRAINT SYS_C007096;

DELETE FROM MEMBER_FOREIGN
WHERE USER_ID = 'USER11';

-> 무결성 원칙에 따라서 참조하는 값이 일치해야함


@ TRUNCATE
-> 테이블의 전체 행을 삭제 시 사용
-> DELETE 문보다 수행 속도가 빠르지만, ROLLBACK을 통해 복구를 할 수 없음
-> DELETE와 마찬가지로 FOREIGN KEY 제약조건 일 때는 적용 불가능하기 때문에
제약조건을 비활성화 해야 삭제 할 수 있음


형식

TRUNCATE TABLE 테이블명;

