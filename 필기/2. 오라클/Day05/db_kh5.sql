
SELECT EXTRACT(YEAR FROM HIRE_DATE) AS "입사년도",
COUNT(*) AS "인원"
FROM EMPLOYEE
WHERE JOB_CODE != 'J1'
GROUP BY EXTRACT(YEAR FROM HIRE_DATE)
ORDER BY 1;

SELECT CASE WHEN GROUPING(DEPT_CODE)=1 THEN '합계'
ELSE NVL(DEPT_CODE,'인턴') END AS "부서코드",
CASE WHEN GROUPING(JOB_CODE)=1 THEN '합계'
ELSE JOB_CODE END AS "직급코드",
COUNT(*)||'명' AS "명",
CASE WHEN GROUPING(DEPT_CODE)=0 AND GROUPING(JOB_CODE)=0 THEN '그룹별 합계'
WHEN GROUPING(DEPT_CODE)=1 AND GROUPING(JOB_CODE)=0 THEN '직급별합계'
WHEN GROUPING(DEPT_CODE)=1 AND GROUPING(JOB_CODE)=1 THEN '총합계'
ELSE '부서별 합계'
END AS 구분
FROM EMPLOYEE
GROUP BY CUBE(DEPT_CODE, JOB_CODE)
ORDER BY 1,2;

SELECT EMP_NAME, DEPT_CODE, DEPT_TITLE
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);

SELECT EMP_NAME, DEPT_CODE, DEPT_TITLE
FROM EMPLOYEE
FULL JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);

SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE
CROSS JOIN DEPARTMENT
ORDER BY 1;

SELECT EMP_ID, EMP_NAME, SALARY, E.SAL_LEVEL, S.SAL_LEVEL
FROM EMPLOYEE E
JOIN SAL_GRADE S ON (SALARY BETWEEN 3000000 AND 4000000)
WHERE E.SAL_LEVEL = S.SAL_LEVEL
ORDER BY 1;

SELECT * FROM EMPLOYEE;

-- 만약 사원들 마다 관리자 ID를 확인하고 싶다면?

SELECT EMP_ID, EMP_NAME,MANAGER_ID
FROM EMPLOYEE;

SELECT E.EMP_ID, E.EMP_NAME, E.MANAGER_ID, E2.EMP_ID AS "매니저ID", E2.EMP_NAME AS "매니저 이름"
FROM EMPLOYEE E
JOIN EMPLOYEE E2 ON (E.MANAGER_ID = E2.EMP_ID);

SELECT E.EMP_ID, E.EMP_NAME, E.MANAGER_ID, E2.EMP_ID AS "매니저ID", E2.EMP_NAME AS "매니저 이름"
FROM EMPLOYEE E, EMPLOYEE E2
WHERE E.MANAGER_ID = E2.EMP_ID;

SELECT E.EMP_NAME, E2.EMP_NAME, E2.SALARY, E2.JOB_CODE
FROM EMPLOYEE E, EMPLOYEE E2
WHERE E.EMP_ID=E2.MANAGER_ID
ORDER BY 1;

SELECT * FROM LOCATION;
SELECT * FROM DEPARTMENT;

--DEPARTMENT 테이블과 LOCATION 테이블을 조인해서
--DEPARTMENT의 LOCATION_ID에 따른 LOCAL_NAME을 보고 싶다면?

SELECT LOCAL_NAME
FROM DEPARTMENT JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE);

SELECT EMP_ID, EMP_NAME, DEPT_CODE, DEPT_TITLE, LOCATION_ID, LOCAL_NAME
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE);

-- 각 사원들의 이름,나이,부서명,직책명을 출력하여라
-- (부서코두,직책코드가 아닌 부서명과 직책명을 출력하여야 함)

SELECT * FROM DEPARTMENT;
SELECT * FROM JOB;
SELECT * FROM EMPLOYEE;

SELECT EMP_NAME AS "이름",
EXTRACT(YEAR FROM SYSDATE)-('19'||SUBSTR(EMP_NO,1,2)) AS "나이",
NVL(DEPT_TITLE,'부서없음') AS "부서명",
JOB_NAME AS "직책명"
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN JOB ON (JOB.JOB_CODE = EMPLOYEE.JOB_CODE)
ORDER BY 2 DESC;

SELECT TO_CHAR(TO_DATE(20201225, 'YYYY/MM/DD'),'DAY')
FROM DUAL;

SELECT EMP_NAME AS "사원명",
EMP_NO AS "주민번호",
DEPT_TITLE AS "부서",
JOB_NAME AS "직급"
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID)
JOIN JOB USING(JOB_CODE)
WHERE SUBSTR(EMP_NO,1,2) BETWEEN 70 AND 79
AND SUBSTR(EMP_NO,8,1)=2
AND EMP_NAME LIKE '전%';

SELECT EMP_ID AS "사원번호",
EMP_NAME AS "사원명",
DEPT_TITLE AS "부서"
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID)
WHERE EMP_NAME LIKE '%형%';

SELECT * FROM DEPARTMENT;

SELECT EMP_NAME AS "사원명",
EMPLOYEE.JOB_CODE AS "직급",
JOB_NAME AS "부서코드",
DEPT_TITLE AS "부서명"
FROM EMPLOYEE, DEPARTMENT, JOB
WHERE DEPT_ID = DEPT_CODE AND
EMPLOYEE.JOB_CODE = JOB.JOB_CODE AND
DEPT_TITLE LIKE '해외영업%';

SELECT EMP_NAME AS "사원명",
BONUS AS "보너스 포인트",
DEPT_TITLE AS "부서명",
LOCAL_NAME AS "근무지역"
FROM EMPLOYEE E, DEPARTMENT D, LOCATION L
WHERE E.DEPT_CODE = D.DEPT_ID(+) AND
D.LOCATION_ID = LOCAL_CODE(+) AND
BONUS IS NOT NULL;

SELECT EMP_NAME AS "사원명",
JOB_NAME AS "직급",
DEPT_TITLE AS "부서",
LOCAL_NAME AS "근무지역"
FROM EMPLOYEE E, JOB J, DEPARTMENT D, LOCATION L
WHERE E.DEPT_CODE = D.DEPT_ID AND
E.JOB_CODE = J.JOB_CODE AND
D.LOCATION_ID = LOCAL_CODE AND
DEPT_CODE = 'D2';

SELECT EMP_NAME AS "사원명",
JOB_NAME AS "직급명",
SALARY AS "급여",
SALARY*12 AS "연봉"
FROM EMPLOYEE
JOIN JOB USING (JOB_CODE)
JOIN SAL_GRADE USING(SAL_LEVEL)
WHERE SALARY>MAX_SAL-500000;

SELECT EMP_NAME AS "사원",
DEPT_TITLE AS "부서",
LOCAL_NAME AS "지역",
NATIONAL_NAME AS "국가"
FROM EMPLOYEE 
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE)
JOIN NATIONAL USING(NATIONAL_CODE)
WHERE NATIONAL_CODE IN ('KO','JP');

SELECT E.EMP_NAME AS "사원",
DEPT_TITLE AS "부서",
E2.EMP_NAME AS "동료"
FROM EMPLOYEE E, EMPLOYEE E2, DEPARTMENT D
WHERE E.DEPT_CODE = D.DEPT_ID AND
E.DEPT_CODE = E2.DEPT_CODE
ORDER BY 1;

SELECT EMP_NAME AS "사원",
JOB_NAME AS "직급",
SALARY AS "급여"
FROM EMPLOYEE
JOIN JOB USING(JOB_CODE)
WHERE JOB_NAME IN ('차장','사원') AND
BONUS IS NULL
ORDER BY 2;

SELECT DECODE(ENT_YN,'Y','퇴사','재직') AS "재직여부",
COUNT(*) AS "인원수"
FROM EMPLOYEE
GROUP BY ENT_YN;

-- 부서코드가 D5인 사람의 EMP_ID,EMP_NAME,DEPT_CODE,SALARY 를 출력

SELECT EMP_ID,EMP_NAME,DEPT_CODE,SALARY
FROM EMPLOYEE
WHERE DEPT_CODE='D5';
-- 결과가 6명이 출력 됨

-- 급여가 300만원보다 큰 사람의 EMP_ID, EMP_NAME, DEPT_CODE, SALARY를 출력
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE SALARY>3000000;

-- 결과는 8명이 출력 됨

-- UNION 결과
SELECT EMP_ID,EMP_NAME,DEPT_CODE,SALARY
FROM EMPLOYEE
WHERE DEPT_CODE='D5'
UNION
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE SALARY>3000000
ORDER BY 1;

-- UNION ALL 결과
SELECT EMP_ID,EMP_NAME,DEPT_CODE,SALARY
FROM EMPLOYEE
WHERE DEPT_CODE='D5'
UNION ALL
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE SALARY>3000000
ORDER BY 1;

-- INTERSECT 결과
SELECT EMP_ID,EMP_NAME,DEPT_CODE,SALARY
FROM EMPLOYEE
WHERE DEPT_CODE='D5'
INTERSECT
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE SALARY>3000000
ORDER BY 1;

-- MINUS 결과
SELECT EMP_ID,EMP_NAME,DEPT_CODE,SALARY
FROM EMPLOYEE
WHERE DEPT_CODE='D5'
MINUS
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE SALARY>3000000
ORDER BY 1;

-- 전지연의 관리자 이름을 출력!
-- SELF 조인 안하고!
-- 1. 전지연의 관리자 ID 추출
SELECT MANAGER_ID
FROM EMPLOYEE
WHERE EMP_NAME = '전지연';

-- 2. 추출한 214번을 가지고 이름을 추출
SELECT EMP_NAME
FROM EMPLOYEE
WHERE EMP_ID = '214';


SELECT EMP_NAME AS "관리자 이름"
FROM EMPLOYEE
WHERE EMP_ID = (SELECT MANAGER_ID FROM EMPLOYEE WHERE EMP_NAME = '전지연');

-- 전 직원의 평균 급여보다 많은 급여를 받고 있는 직원의 사번, 이름, 직급코드, 급여를 조회하시오

SELECT EMP_ID, EMP_NAME, JOB_CODE, SALARY
FROM EMPLOYEE
WHERE SALARY>(SELECT FLOOR(AVG(SALARY)) FROM EMPLOYEE);

SELECT EMP_NAME FROM EMPLOYEE;

-- 예제
-- 윤은해와 급여가 같은 사원을 검색하여
-- 사원번호, 사원, 이름, 급여를 출력하여라.
-- (단, 윤은해는 출력하지 않는다).

SELECT EMP_ID, EMP_NAME, SALARY
FROM EMPLOYEE
WHERE SALARY = (SELECT SALARY FROM EMPLOYEE WHERE EMP_NAME = '윤은해') AND
EMP_NAME != '윤은해';

SELECT EMP_ID, EMP_NAME, SALARY
FROM EMPLOYEE
WHERE SALARY=(SELECT MAX(SALARY) FROM EMPLOYEE) OR
SALARY=(SELECT MIN(SALARY) FROM EMPLOYEE);

SELECT DEPT_CODE, EMP_ID, EMP_NAME,SALARY
FROM EMPLOYEE
WHERE SALARY>(SELECT AVG(SALARY) FROM EMPLOYEE WHERE DEPT_CODE = 'D5') AND
DEPT_CODE IN ('D1','D2');

SELECT EMP_NAME, DEPT_CODE
FROM EMPLOYEE
WHERE DEPT_CODE IN (SELECT DEPT_CODE
FROM EMPLOYEE
WHERE EMP_NAME IN ('송종기','박나라'));

--@ 실습문제
-- 차태연, 전지연, 사원의 급여등급(EMPLOYEE테이블의 SAL_LEVEL컬럼)과
-- 같은 사원의 직급명, 사원명을 출력
SELECT * FROM SAL_GRADE;
SELECT * FROM LOCATION;
SELECT * FROM EMPLOYEE;
SELECT * FROM DEPARTMENT;
SELECT * FROM JOB;
SELECT * FROM NATIONAL;

SELECT JOB_NAME AS "직급명",
EMP_NAME AS "사원명"
FROM EMPLOYEE JOIN JOB USING (JOB_CODE)
WHERE SAL_LEVEL IN (SELECT SAL_LEVEL FROM EMPLOYEE WHERE EMP_NAME IN ('차태연','전지연')) AND
EMP_NAME NOT IN ('차태연','전지연');

--@ 실습문제
--1. 직급이 대표, 부사장이 아닌 모든 사원을
-- 이름,부서명,직급코드를 출력하고 부서별로 출력

SELECT EMP_NAME, DEPT_TITLE, JOB_CODE
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID)
WHERE EMP_NAME NOT IN (SELECT EMP_NAME FROM EMPLOYEE JOIN JOB USING(JOB_CODE) WHERE JOB_NAME IN ('대표','부사장'));

SELECT EMP_NAME FROM EMPLOYEE JOIN JOB USING(JOB_CODE) WHERE JOB_NAME IN ('대표','부사장');